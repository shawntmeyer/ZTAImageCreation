{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.25.53.49325",
      "templateHash": "8081369435498467152"
    },
    "name": "Zero Trust Architecture Custom Windows Image Builder",
    "description": "This solution allows you to create a custom image much like Azure VM Image Builder, but utilizes zero trust architecture and does not require that service.",
    "author": "shawn.meyer@microsoft.com",
    "version": "1.0.0"
  },
  "parameters": {
    "deploymentLocation": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "Deployment location. Note that the compute resources will be deployed to the region where the subnet is location."
      }
    },
    "deploymentPrefix": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 6,
      "metadata": {
        "description": "Value to prepend to the deployment names."
      }
    },
    "timeStamp": {
      "type": "string",
      "defaultValue": "[utcNow('yyMMddHHmm')]",
      "metadata": {
        "description": "Value appended to the deployment names."
      }
    },
    "imageVersionCreationTime": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "The current time in ISO 8601 format. Do not modify."
      }
    },
    "guidValue": {
      "type": "string",
      "defaultValue": "[newGuid()]"
    },
    "envClassification": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "dev",
        "test",
        "prod",
        ""
      ],
      "metadata": {
        "description": "Optional. The environment for which the images are being created."
      }
    },
    "computeGalleryResourceId": {
      "type": "string",
      "metadata": {
        "description": "Azure Compute Gallery Resource Id."
      }
    },
    "storageAccountResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource Id of the storage account containing the artifacts (scripts, installers, etc) used during the image build."
      }
    },
    "containerName": {
      "type": "string",
      "metadata": {
        "description": "The name of the storage blob container which contains the artifacts (scripts, installers, etc) used during the image build."
      }
    },
    "userAssignedIdentityResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource Id of the user assigned managed identity used to access the storage account."
      }
    },
    "subnetResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource Id of the subnet to which the image build VM will be attached."
      }
    },
    "imageBuildResourceGroupId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The resource Id of an existing resource group in which to create the vms to build the image. Leave blank to create a new resource group."
      }
    },
    "customBuildResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The custom name of the resource group where the image build and management vms will be created. Leave blank to create a new resource group based on Cloud Adoption Framework naming principals."
      }
    },
    "customSourceImageResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource Id of the source image to use for the image build. If not provided, the latest image from the specified publisher, offer, and sku will be used."
      }
    },
    "publisher": {
      "type": "string",
      "metadata": {
        "description": "The Marketplace Image publisher"
      }
    },
    "offer": {
      "type": "string",
      "metadata": {
        "description": "The Marketplace Image offer"
      }
    },
    "sku": {
      "type": "string",
      "metadata": {
        "description": "The Marketplace Image sku"
      }
    },
    "encryptionAtHost": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Determines if \"EncryptionAtHost\" is enabled on the VMs."
      }
    },
    "vmSize": {
      "type": "string",
      "metadata": {
        "description": "The size of the Image build and Management VMs."
      }
    },
    "installFsLogix": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Install FSLogix Agent."
      }
    },
    "fslogixBlobName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The name of the blob that contains the FSlogix zip."
      }
    },
    "installAccess": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Install Microsoft Access."
      }
    },
    "installExcel": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Install Microsoft Excel."
      }
    },
    "installOneDrive": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Install OneDrive Per Machine."
      }
    },
    "onedriveBlobName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The name of the zip blob containing OneDriveSetup.exe."
      }
    },
    "installOneNote": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Install Microsoft OneNote."
      }
    },
    "installOutlook": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Install Microsoft Outlook."
      }
    },
    "installPowerPoint": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Install Microsoft PowerPoint."
      }
    },
    "installProject": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Install Microsoft Project."
      }
    },
    "installpublisher": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Install Microsoft Publisher."
      }
    },
    "installSkypeForBusiness": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Install Microsoft Skype for Business."
      }
    },
    "installVisio": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Install Microsoft Visio."
      }
    },
    "installWord": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Install Microsoft Word."
      }
    },
    "officeBlobName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The name of the zip blob containing the Office Deployment Tool."
      }
    },
    "installTeams": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Install Microsoft Teams."
      }
    },
    "teamsBlobName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The name of the zip blob containing the VC++Redistributables, MSRDC WebRTC Redirector, and Teams installer."
      }
    },
    "installVirtualDesktopOptimizationTool": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Apply the Virtual Desktop Optimization Tool customizations."
      }
    },
    "vDotBlobName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The name of the zip blob containing the Virtual Desktop Optimization Tool Script and files."
      }
    },
    "customizations": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "An array of image customizations consisting of the blob name and parameters.\r\nBICEP example:\r\n[\r\n  {\r\n    name: 'FSLogix'\r\n    blobName: 'Install-FSLogix.zip'\r\n    arguments: 'latest'\r\n  }\r\n  {\r\n    name: 'VSCode'\r\n    blobName: 'VSCode.zip'\r\n    arguments: ''\r\n  }\r\n]\r\n"
      }
    },
    "collectCustomizationLogs": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Collect image customization logs."
      }
    },
    "installUpdates": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Determines if the latest updates from the specified update service will be installed."
      }
    },
    "updateService": {
      "type": "string",
      "defaultValue": "MU",
      "allowedValues": [
        "WU",
        "MU",
        "WSUS",
        "DCAT",
        "STORE",
        "OTHER"
      ],
      "metadata": {
        "description": "Optional. The update service."
      }
    },
    "wsusServer": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The WSUS Server Url if WSUS is specified. (i.e., https://wsus.corp.contoso.com:8531)"
      }
    },
    "blobPrivateDnsZoneResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The resource id of the existing Azure storage account blob service private dns zone.\r\nMust be provided if [collectCustomizationLogs] is set to \"true\".\r\nThis zone must be linked to or resolvable from the vnet referenced in the [privateEndpointSubnetResourceId] parameter."
      }
    },
    "privateEndpointSubnetResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The resource id of the private endpoint subnet. Must be provided if [collectCustomizationLogs] is set to \"true\"."
      }
    },
    "imageDefinitionResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource id of an existing Image Definition in the Compute gallery."
      }
    },
    "customImageDefinitionName": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 80,
      "metadata": {
        "description": "Conditional. The name of the image Definition to create in the Compute Gallery.\r\nOnly valid if [imageDefinitionResourceId] is not provided.\r\nIf left blank, the image definition name will be built on Cloud Adoption Framework principals and based on the [imageDefinitonPublisher], [imageDefinitionOffer], and [imageDefinitionSku] values."
      }
    },
    "imageDefinitionPublisher": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 128,
      "metadata": {
        "description": "Conditional. The compute gallery image definition Publisher."
      }
    },
    "imageDefinitionOffer": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 64,
      "metadata": {
        "description": "Conditional. The computer gallery image definition Offer."
      }
    },
    "imageDefinitionSku": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 64,
      "metadata": {
        "description": "Conditional. The compute gallery image definition Sku."
      }
    },
    "imageDefinitionIsAcceleratedNetworkSupported": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Specifies whether the image definition supports the deployment of virtual machines with accelerated networking enabled."
      }
    },
    "imageDefinitionIsHibernateSupported": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Specifies whether the image definition supports creating VMs with support for hibernation."
      }
    },
    "imageDefinitionIsHigherStoragePerformanceSupported": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Specifies whether the image definition supports capturing images of NVMe disks or Virtual Machines."
      }
    },
    "imageDefinitionSecurityType": {
      "type": "string",
      "defaultValue": "TrustedLaunchSupported",
      "allowedValues": [
        "Standard",
        "ConfidentialVM",
        "ConfidentialVMSupported",
        "TrustedLaunch",
        "TrustedLaunchSupported",
        "TrustedLaunchAndConfidentialVMSupported"
      ]
    },
    "autoImageVersionName": {
      "type": "string",
      "defaultValue": "[utcNow('yy.MMdd.hhmm')]",
      "metadata": {
        "description": "Automatically generated Image Version name."
      }
    },
    "imageMajorVersion": {
      "type": "int",
      "defaultValue": -1,
      "minValue": -1,
      "maxValue": 9999,
      "metadata": {
        "description": "Optional. The image major version from 0 - 9999.\r\nIn order to specify a custom image version you must specify the [imageMajorVersion], [imageMinorVersion], and [imagePatch] integer from 0-9999."
      }
    },
    "imageMinorVersion": {
      "type": "int",
      "defaultValue": -1,
      "minValue": -1,
      "maxValue": 9999,
      "metadata": {
        "description": "Optional. The image minor version from 0 - 9999.\r\nIn order to specify a custom image version you must specify the [imageMajorVersion], [imageMinorVersion], and [imagePatch] integer from 0-9999."
      }
    },
    "imagePatch": {
      "type": "int",
      "defaultValue": -1,
      "minValue": -1,
      "maxValue": 9999,
      "metadata": {
        "description": "Optional. The image patch version from 0 - 9999.\r\nIn order to specify a custom image version you must specify the [imageMajorVersion], [imageMinorVersion], and [imagePatch] integer from 0-9999."
      }
    },
    "imageVersionEOLinDays": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Optional. The number of days from now that the image version will reach end of life."
      }
    },
    "imageVersionDefaultReplicaCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 100,
      "metadata": {
        "description": "Optional. The default image version replica count per region. This can be overwritten by the regional value."
      }
    },
    "imageVersionDefaultStorageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "Standard_ZRS"
      ],
      "metadata": {
        "description": "Optional. Specifies the storage account type to be used to store the image. This property is not updatable."
      }
    },
    "imageVersionDefaultRegion": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. Specifies the default replication region when imageVersionTargetRegions is not supplied."
      }
    },
    "imageVersionExcludeFromLatest": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Exclude this image version from the latest. This property can be overwritten by the regional value."
      }
    },
    "imageVersionTargetRegions": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. The regions to which the image version will be replicated. (Default: deployment location with Standard_LRS storage and 1 replica.)"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The tags to apply to all resources deployed by this template."
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "australiacentral": {
        "abbreviation": "auc",
        "timeDifference": "+10:00",
        "timeZone": "AUS Eastern Standard Time"
      },
      "australiacentral2": {
        "abbreviation": "auc2",
        "timeDifference": "+10:00",
        "timeZone": "AUS Eastern Standard Time"
      },
      "australiaeast": {
        "abbreviation": "aue",
        "timeDifference": "+10:00",
        "timeZone": "AUS Eastern Standard Time"
      },
      "australiasoutheast": {
        "abbreviation": "ause",
        "timeDifference": "+10:00",
        "timeZone": "AUS Eastern Standard Time"
      },
      "brazilsouth": {
        "abbreviation": "brs",
        "timeDifference": "-3:00",
        "timeZone": "E. South America Standard Time"
      },
      "brazilsoutheast": {
        "abbreviation": "brse",
        "timeDifference": "-3:00",
        "timeZone": "E. South America Standard Time"
      },
      "canadacentral": {
        "abbreviation": "cac",
        "timeDifference": "-5:00",
        "timeZone": "Eastern Standard Time"
      },
      "canadaeast": {
        "abbreviation": "cae",
        "timeDifference": "-5:00",
        "timeZone": "Eastern Standard Time"
      },
      "centralindia": {
        "abbreviation": "inc",
        "timeDifference": "+5:30",
        "timeZone": "India Standard Time"
      },
      "centralus": {
        "abbreviation": "usc",
        "timeDifference": "-6:00",
        "timeZone": "Central Standard Time"
      },
      "chinaeast": {
        "abbreviation": "cne",
        "timeDifference": "+8:00",
        "timeZone": "China Standard Time"
      },
      "chinaeast2": {
        "abbreviation": "cne2",
        "timeDifference": "+8:00",
        "timeZone": "China Standard Time"
      },
      "chinanorth": {
        "abbreviation": "cnn",
        "timeDifference": "+8:00",
        "timeZone": "China Standard Time"
      },
      "chinanorth2": {
        "abbreviation": "cnn2",
        "timeDifference": "+8:00",
        "timeZone": "China Standard Time"
      },
      "eastasia": {
        "abbreviation": "ase",
        "timeDifference": "+8:00",
        "timeZone": "China Standard Time"
      },
      "eastus": {
        "abbreviation": "use",
        "timeDifference": "-5:00",
        "timeZone": "Eastern Standard Time"
      },
      "eastus2": {
        "abbreviation": "use2",
        "timeDifference": "-5:00",
        "timeZone": "Eastern Standard Time"
      },
      "francecentral": {
        "abbreviation": "frc",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "francesouth": {
        "abbreviation": "frs",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "germanynorth": {
        "abbreviation": "den",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "germanywestcentral": {
        "abbreviation": "dewc",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "japaneast": {
        "abbreviation": "jpe",
        "timeDifference": "+9:00",
        "timeZone": "Tokyo Standard Time"
      },
      "japanwest": {
        "abbreviation": "jpw",
        "timeDifference": "+9:00",
        "timeZone": "Tokyo Standard Time"
      },
      "jioindiacentral": {
        "abbreviation": "injc",
        "timeDifference": "+5:30",
        "timeZone": "India Standard Time"
      },
      "jioindiawest": {
        "abbreviation": "injw",
        "timeDifference": "+5:30",
        "timeZone": "India Standard Time"
      },
      "koreacentral": {
        "abbreviation": "krc",
        "timeDifference": "+9:00",
        "timeZone": "Korea Standard Time"
      },
      "koreasouth": {
        "abbreviation": "krs",
        "timeDifference": "+9:00",
        "timeZone": "Korea Standard Time"
      },
      "northcentralus": {
        "abbreviation": "usnc",
        "timeDifference": "-6:00",
        "timeZone": "Central Standard Time"
      },
      "northeurope": {
        "abbreviation": "eun",
        "timeDifference": "0:00",
        "timeZone": "GMT Standard Time"
      },
      "norwayeast": {
        "abbreviation": "noe",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "norwaywest": {
        "abbreviation": "now",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "southafricanorth": {
        "abbreviation": "zan",
        "timeDifference": "+2:00",
        "timeZone": "South Africa Standard Time"
      },
      "southafricawest": {
        "abbreviation": "zaw",
        "timeDifference": "+2:00",
        "timeZone": "South Africa Standard Time"
      },
      "southcentralus": {
        "abbreviation": "ussc",
        "timeDifference": "-6:00",
        "timeZone": "Central Standard Time"
      },
      "southeastasia": {
        "abbreviation": "asse",
        "timeDifference": "+8:00",
        "timeZone": "Singapore Standard Time"
      },
      "southindia": {
        "abbreviation": "ins",
        "timeDifference": "+5:30",
        "timeZone": "India Standard Time"
      },
      "swedencentral": {
        "abbreviation": "sec",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "switzerlandnorth": {
        "abbreviation": "chn",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "switzerlandwest": {
        "abbreviation": "chw",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "uaecentral": {
        "abbreviation": "aec",
        "timeDifference": "+3:00",
        "timeZone": "Arabian Standard Time"
      },
      "uaenorth": {
        "abbreviation": "aen",
        "timeDifference": "+3:00",
        "timeZone": "Arabian Standard Time"
      },
      "uksouth": {
        "abbreviation": "uks",
        "timeDifference": "0:00",
        "timeZone": "GMT Standard Time"
      },
      "ukwest": {
        "abbreviation": "ukw",
        "timeDifference": "0:00",
        "timeZone": "GMT Standard Time"
      },
      "usdodcentral": {
        "abbreviation": "dodc",
        "timeDifference": "-6:00",
        "timeZone": "Central Standard Time"
      },
      "usdodeast": {
        "abbreviation": "dode",
        "timeDifference": "-5:00",
        "timeZone": "Eastern Standard Time"
      },
      "usgovarizona": {
        "abbreviation": "az",
        "timeDifference": "-7:00",
        "timeZone": "Mountain Standard Time"
      },
      "usgovtexas": {
        "abbreviation": "tx",
        "timeDifference": "-6:00",
        "timeZone": "Central Standard Time"
      },
      "usgovvirginia": {
        "abbreviation": "va",
        "timeDifference": "-5:00",
        "timeZone": "Eastern Standard Time"
      },
      "westcentralus": {
        "abbreviation": "uswc",
        "timeDifference": "-7:00",
        "timeZone": "Mountain Standard Time"
      },
      "westeurope": {
        "abbreviation": "euw",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "westindia": {
        "abbreviation": "inw",
        "timeDifference": "+5:30",
        "timeZone": "India Standard Time"
      },
      "westus": {
        "abbreviation": "usw",
        "timeDifference": "-8:00",
        "timeZone": "Pacific Standard Time"
      },
      "westus2": {
        "abbreviation": "usw2",
        "timeDifference": "-8:00",
        "timeZone": "Pacific Standard Time"
      },
      "westus3": {
        "abbreviation": "usw3",
        "timeDifference": "-7:00",
        "timeZone": "Mountain Standard Time"
      }
    },
    "$fxv#1": {
      "automationAccounts": "aa",
      "availabilitySets": "as",
      "computeGallery": "gal",
      "desktopApplicationGroups": "vddag",
      "remoteApplicationGroups": "vdrag",
      "disks": "disk",
      "diskEncryptionSets": "des",
      "hostPools": "vdpool",
      "imageDefinitions": "vmid",
      "keyVaults": "kv",
      "logAnalyticsWorkspaces": "law",
      "managedImage": "img",
      "netAppAccounts": "naa",
      "netAppCapacityPools": "nacp",
      "networkInterfaces": "nic",
      "recoveryServicesVaults": "rsv",
      "resourceGroups": "rg",
      "storageAccounts": "sa",
      "userAssignedIdentities": "uai",
      "virtualMachines": "vm",
      "workspaces": "vdws"
    },
    "cloud": "[environment().name]",
    "subscriptionId": "[subscription().subscriptionId]",
    "tenantId": "[tenant().tenantId]",
    "locations": "[variables('$fxv#0')]",
    "resourceAbbreviations": "[variables('$fxv#1')]",
    "depPrefix": "[if(not(empty(parameters('deploymentPrefix'))), format('{0}-', parameters('deploymentPrefix')), '')]",
    "imageBuildResourceGroupName": "[if(empty(parameters('imageBuildResourceGroupId')), if(empty(parameters('customBuildResourceGroupName')), if(not(empty(parameters('envClassification'))), format('{0}-image-builder-{1}-{2}', variables('resourceAbbreviations').resourceGroups, parameters('envClassification'), variables('locations')[parameters('deploymentLocation')].abbreviation), format('{0}-image-builder-{1}', variables('resourceAbbreviations').resourceGroups, variables('locations')[parameters('deploymentLocation')].abbreviation)), parameters('customBuildResourceGroupName')), last(split(parameters('imageBuildResourceGroupId'), '/')))]",
    "adminPw": "[format('{0}-{1}', toUpper(uniqueString(subscription().id)), parameters('guidValue'))]",
    "adminUserName": "xadmin",
    "collectLogs": "[if(and(and(parameters('collectCustomizationLogs'), not(empty(parameters('privateEndpointSubnetResourceId')))), not(empty(parameters('blobPrivateDnsZoneResourceId')))), true(), false())]",
    "logContainerName": "image-customization-logs",
    "galleryImageDefinitionPublisher": "[if(not(empty(parameters('imageDefinitionPublisher'))), replace(parameters('imageDefinitionPublisher'), ' ', ''), parameters('publisher'))]",
    "galleryImageDefinitionOffer": "[if(not(empty(parameters('imageDefinitionOffer'))), replace(parameters('imageDefinitionOffer'), ' ', ''), parameters('offer'))]",
    "galleryImageDefinitionSku": "[if(not(empty(parameters('imageDefinitionSku'))), replace(parameters('imageDefinitionSku'), ' ', ''), parameters('sku'))]",
    "galleryImageDefinitionHyperVGeneration": "[if(or(endsWith(parameters('sku'), 'g2'), startsWith(parameters('sku'), 'win11')), 'V2', 'V1')]",
    "galleryImageDefinitionName": "[if(empty(parameters('imageDefinitionResourceId')), if(empty(parameters('customImageDefinitionName')), format('{0}', replace(format('{0}-{1}-{2}-{3}', variables('resourceAbbreviations').imageDefinitions, replace(variables('galleryImageDefinitionPublisher'), '-', ''), replace(variables('galleryImageDefinitionOffer'), '-', ''), replace(variables('galleryImageDefinitionSku'), '-', '')), ' ', '')), parameters('customImageDefinitionName')), last(split(parameters('imageDefinitionResourceId'), '/')))]",
    "imageVersionName": "[if(and(and(not(equals(parameters('imageMajorVersion'), -1)), not(equals(parameters('imageMajorVersion'), -1))), not(equals(parameters('imagePatch'), -1))), format('{0}.{1}.{2}', parameters('imageMajorVersion'), parameters('imageMinorVersion'), parameters('imagePatch')), parameters('autoImageVersionName'))]",
    "imageVersionEndOfLifeDate": "[if(greater(parameters('imageVersionEOLinDays'), 0), dateTimeAdd(parameters('imageVersionCreationTime'), format('P{0}D', parameters('imageVersionEOLinDays'))), '')]",
    "imageVersionReplicationRegions": "[if(not(empty(parameters('imageVersionTargetRegions'))), parameters('imageVersionTargetRegions'), createArray(createObject('excludeFromLatest', parameters('imageVersionExcludeFromLatest'), 'name', if(not(empty(parameters('imageVersionDefaultRegion'))), parameters('imageVersionDefaultRegion'), parameters('deploymentLocation')), 'regionalReplicaCount', parameters('imageVersionDefaultReplicaCount'), 'storageAccountType', parameters('imageVersionDefaultStorageAccountType'))))]",
    "imageVmName": "[take(format('vmimg-{0}', uniqueString(parameters('timeStamp'))), 15)]",
    "managementVmName": "[take(format('vmmgt-{0}', uniqueString(parameters('timeStamp'))), 15)]"
  },
  "resources": [
    {
      "condition": "[empty(parameters('imageBuildResourceGroupId'))]",
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2023-07-01",
      "name": "[variables('imageBuildResourceGroupName')]",
      "location": "[parameters('deploymentLocation')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}RoleAssign-MI-Contributor-BuildRG-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "resourceGroup": "[variables('imageBuildResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('userAssignedIdentityResourceId'), '/'))), '2023-01-31').principalId]"
          },
          "roleDefinitionId": {
            "value": "b24988ac-6180-42a0-ab88-20f7382dd24c"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "18439070699875796729"
            },
            "name": "Role Assignments (Resource Group scope)",
            "description": "This module deploys a Role Assignment at a Resource Group scope.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "roleDefinitionId": {
              "type": "string",
              "metadata": {
                "description": "Required. You can provide either the role definition GUID or its fully qualified ID in the following format: \\'/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11\\'.\r\nYou can find the GUIDs in the ID column on the table at https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles.\r\n"
              }
            },
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
              }
            },
            "resourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Optional. Name of the Resource Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
              }
            },
            "subscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
              }
            },
            "description": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The description of the role assignment."
              }
            },
            "delegatedManagedIdentityResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. ID of the delegated managed identity resource."
              }
            },
            "condition": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
              }
            },
            "conditionVersion": {
              "type": "string",
              "defaultValue": "2.0",
              "allowedValues": [
                "2.0"
              ],
              "metadata": {
                "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
              }
            },
            "principalType": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "ServicePrincipal",
                "Group",
                "User",
                "ForeignGroup",
                "Device",
                ""
              ],
              "metadata": {
                "description": "Optional. The principal type of the assigned principal ID."
              }
            }
          },
          "variables": {
            "roleDefinitionIdVar": "[if(contains(parameters('roleDefinitionId'), '/providers/Microsoft.Authorization/roleDefinitions/'), parameters('roleDefinitionId'), format('/providers/Microsoft.Authorization/roleDefinitions/{0}', parameters('roleDefinitionId')))]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
              "properties": {
                "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                "principalId": "[parameters('principalId')]",
                "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The GUID of the Role Assignment."
              },
              "value": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Role Assignment."
              },
              "value": "[resourceId('Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the role assignment was applied at."
              },
              "value": "[resourceGroup().name]"
            },
            "scope": {
              "type": "string",
              "metadata": {
                "description": "The scope this Role Assignment applies to."
              },
              "value": "[resourceGroup().id]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('imageBuildResourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}RoleAssign-MI-Reader-GalleryRG-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "subscriptionId": "[split(parameters('computeGalleryResourceId'), '/')[2]]",
      "resourceGroup": "[split(parameters('computeGalleryResourceId'), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('userAssignedIdentityResourceId'), '/'))), '2023-01-31').principalId]"
          },
          "roleDefinitionId": {
            "value": "acdd72a7-3385-48ef-bd42-f606fba81ae7"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "18439070699875796729"
            },
            "name": "Role Assignments (Resource Group scope)",
            "description": "This module deploys a Role Assignment at a Resource Group scope.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "roleDefinitionId": {
              "type": "string",
              "metadata": {
                "description": "Required. You can provide either the role definition GUID or its fully qualified ID in the following format: \\'/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11\\'.\r\nYou can find the GUIDs in the ID column on the table at https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles.\r\n"
              }
            },
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
              }
            },
            "resourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Optional. Name of the Resource Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
              }
            },
            "subscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
              }
            },
            "description": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The description of the role assignment."
              }
            },
            "delegatedManagedIdentityResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. ID of the delegated managed identity resource."
              }
            },
            "condition": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
              }
            },
            "conditionVersion": {
              "type": "string",
              "defaultValue": "2.0",
              "allowedValues": [
                "2.0"
              ],
              "metadata": {
                "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
              }
            },
            "principalType": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "ServicePrincipal",
                "Group",
                "User",
                "ForeignGroup",
                "Device",
                ""
              ],
              "metadata": {
                "description": "Optional. The principal type of the assigned principal ID."
              }
            }
          },
          "variables": {
            "roleDefinitionIdVar": "[if(contains(parameters('roleDefinitionId'), '/providers/Microsoft.Authorization/roleDefinitions/'), parameters('roleDefinitionId'), format('/providers/Microsoft.Authorization/roleDefinitions/{0}', parameters('roleDefinitionId')))]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
              "properties": {
                "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                "principalId": "[parameters('principalId')]",
                "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The GUID of the Role Assignment."
              },
              "value": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Role Assignment."
              },
              "value": "[resourceId('Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the role assignment was applied at."
              },
              "value": "[resourceGroup().name]"
            },
            "scope": {
              "type": "string",
              "metadata": {
                "description": "The scope this Role Assignment applies to."
              },
              "value": "[resourceGroup().id]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}Management-VM-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "resourceGroup": "[variables('imageBuildResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location]"
          },
          "name": {
            "value": "[variables('managementVmName')]"
          },
          "adminPassword": {
            "value": "[variables('adminPw')]"
          },
          "adminUsername": {
            "value": "[variables('adminUserName')]"
          },
          "encryptionAtHost": {
            "value": "[parameters('encryptionAtHost')]"
          },
          "extensionCustomScriptConfig": {
            "value": {
              "enabled": true,
              "fileData": [
                {
                  "uri": "[format('{0}PowerShell-Az-Module.zip', format('{0}{1}/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountResourceId'), '/')[2], split(parameters('storageAccountResourceId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountResourceId'), '/'))), '2022-09-01').primaryEndpoints.blob, parameters('containerName')))]"
                },
                {
                  "uri": "[format('{0}cse_master_script.ps1', format('{0}{1}/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountResourceId'), '/')[2], split(parameters('storageAccountResourceId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountResourceId'), '/'))), '2022-09-01').primaryEndpoints.blob, parameters('containerName')))]"
                }
              ]
            }
          },
          "extensionCustomScriptProtectedSetting": {
            "value": {
              "commandToExecute": "powershell -ExecutionPolicy Unrestricted -command .\\cse_master_script.ps1",
              "managedIdentity": {
                "clientId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('userAssignedIdentityResourceId'), '/'))), '2023-01-31').clientId]"
              }
            }
          },
          "imageReference": {
            "value": {
              "publisher": "MicrosoftWindowsServer",
              "offer": "WindowsServer",
              "sku": "2019-datacenter-core-g2",
              "version": "latest"
            }
          },
          "nicConfigurations": {
            "value": [
              {
                "deleteOption": "Delete",
                "ipConfigurations": [
                  {
                    "name": "ipconfig01",
                    "subnetResourceId": "[parameters('subnetResourceId')]"
                  }
                ],
                "nicSuffix": "-nic-01"
              }
            ]
          },
          "osDisk": {
            "value": {
              "caching": "None",
              "createOption": "fromImage",
              "deleteOption": "Delete",
              "diskSizeGB": "128",
              "managedDisk": {
                "storageAccountType": "StandardSSD_LRS"
              }
            }
          },
          "osType": {
            "value": "Windows"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentities": {
            "value": {
              "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
            }
          },
          "vmSize": {
            "value": "[parameters('vmSize')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "6017932835633854532"
            },
            "name": "Virtual Machines",
            "description": "This module deploys a Virtual Machine with one or multiple NICs and optionally one or multiple public IPs.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "[take(toLower(uniqueString(resourceGroup().name)), 10)]",
              "metadata": {
                "description": "Optional. The name of the virtual machine to be created. You should use a unique prefix to reduce name collisions in Active Directory. If no value is provided, a 10 character long unique string will be generated based on the Resource Group's name."
              }
            },
            "computerName": {
              "type": "string",
              "defaultValue": "[parameters('name')]",
              "metadata": {
                "description": "Optional. Can be used if the computer name needs to be different from the Azure VM resource name. If not used, the resource name will be used as computer name."
              }
            },
            "vmSize": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the size for the VMs."
              }
            },
            "encryptionAtHost": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine. This will enable the encryption for all the disks including Resource/Temp disk at host itself. For security reasons, it is recommended to set encryptionAtHost to True. Restrictions: Cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
              }
            },
            "securityType": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies the SecurityType of the virtual machine. It is set as TrustedLaunch to enable UefiSettings."
              }
            },
            "secureBootEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies whether secure boot should be enabled on the virtual machine. This parameter is part of the UefiSettings. SecurityType should be set to TrustedLaunch to enable UefiSettings."
              }
            },
            "vTpmEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies whether vTPM should be enabled on the virtual machine. This parameter is part of the UefiSettings.  SecurityType should be set to TrustedLaunch to enable UefiSettings."
              }
            },
            "imageReference": {
              "type": "object",
              "metadata": {
                "description": "Required. OS image reference. In case of marketplace images, it's the combination of the publisher, offer, sku, version attributes. In case of custom images it's the resource ID of the custom image."
              }
            },
            "plan": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use."
              }
            },
            "osDisk": {
              "type": "object",
              "metadata": {
                "description": "Required. Specifies the OS disk. For security reasons, it is recommended to specify DiskEncryptionSet into the osDisk object.  Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
              }
            },
            "dataDisks": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specifies the data disks. For security reasons, it is recommended to specify DiskEncryptionSet into the dataDisk object. Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
              }
            },
            "ultraSSDEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled."
              }
            },
            "adminUsername": {
              "type": "securestring",
              "metadata": {
                "description": "Required. Administrator username."
              }
            },
            "adminPassword": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. When specifying a Windows Virtual Machine, this value should be passed."
              }
            },
            "customData": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Custom data associated to the VM, this value will be automatically converted into base64 to account for the expected VM format."
              }
            },
            "certificatesToBeInstalled": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specifies set of certificates that should be installed onto the virtual machine."
              }
            },
            "priority": {
              "type": "string",
              "defaultValue": "Regular",
              "allowedValues": [
                "Regular",
                "Low",
                "Spot"
              ],
              "metadata": {
                "description": "Optional. Specifies the priority for the virtual machine."
              }
            },
            "enableEvictionPolicy": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies the eviction policy for the low priority virtual machine. Will result in 'Deallocate' eviction policy."
              }
            },
            "maxPriceForLowPriorityVm": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies the maximum price you are willing to pay for a low priority VM/VMSS. This price is in US Dollars."
              }
            },
            "dedicatedHostId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies resource ID about the dedicated host that the virtual machine resides in."
              }
            },
            "licenseType": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "Windows_Client",
                "Windows_Server",
                ""
              ],
              "metadata": {
                "description": "Optional. Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system."
              }
            },
            "publicKeys": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The list of SSH public keys used to authenticate with linux based VMs."
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource. The system-assigned managed identity will automatically be enabled if extensionAadJoinConfig.enabled = \"True\"."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "bootDiagnostics": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Whether boot diagnostics should be enabled on the Virtual Machine. Boot diagnostics will be enabled with a managed storage account if no bootDiagnosticsStorageAccountName value is provided. If bootDiagnostics and bootDiagnosticsStorageAccountName values are not provided, boot diagnostics will be disabled."
              }
            },
            "bootDiagnosticStorageAccountName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Custom storage account used to store boot diagnostic information. Boot diagnostics will be enabled with a custom storage account if a value is provided."
              }
            },
            "bootDiagnosticStorageAccountUri": {
              "type": "string",
              "defaultValue": "[format('.blob.{0}/', environment().suffixes.storage)]",
              "metadata": {
                "description": "Optional. Storage account boot diagnostic base URI."
              }
            },
            "proximityPlacementGroupResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of a proximity placement group."
              }
            },
            "availabilitySetResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of an availability set. Cannot be used in combination with availability zone nor scale set."
              }
            },
            "availabilityZone": {
              "type": "int",
              "defaultValue": 0,
              "allowedValues": [
                0,
                1,
                2,
                3
              ],
              "metadata": {
                "description": "Optional. If set to 1, 2 or 3, the availability zone for all VMs is hardcoded to that value. If zero, then availability zones is not used. Cannot be used in combination with availability set nor scale set."
              }
            },
            "nicConfigurations": {
              "type": "array",
              "metadata": {
                "description": "Required. Configures NICs and PIPs."
              }
            },
            "pipDiagnosticSettingsName": {
              "type": "string",
              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "metadata": {
                "description": "Optional. The name of the PIP diagnostic setting, if deployed."
              }
            },
            "pipdiagnosticLogCategoriesToEnable": {
              "type": "array",
              "defaultValue": [
                "allLogs"
              ],
              "allowedValues": [
                "",
                "allLogs",
                "DDoSProtectionNotifications",
                "DDoSMitigationFlowLogs",
                "DDoSMitigationReports"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
              }
            },
            "pipdiagnosticMetricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            },
            "nicDiagnosticSettingsName": {
              "type": "string",
              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "metadata": {
                "description": "Optional. The name of the NIC diagnostic setting, if deployed."
              }
            },
            "nicdiagnosticMetricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            },
            "backupVaultName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Recovery service vault name to add VMs to backup."
              }
            },
            "backupVaultResourceGroup": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Optional. Resource group of the backup recovery service vault. If not provided the current resource group name is considered by default."
              }
            },
            "backupPolicyName": {
              "type": "string",
              "defaultValue": "DefaultPolicy",
              "metadata": {
                "description": "Optional. Backup policy the VMs should be using for backup. If not provided, it will use the DefaultPolicy from the backup recovery service vault."
              }
            },
            "allowExtensionOperations": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine."
              }
            },
            "extensionDomainJoinPassword": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Required if name is specified. Password of the user specified in user parameter."
              }
            },
            "extensionDomainJoinConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Domain Join] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionAadJoinConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [AAD Join] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionAntiMalwareConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Anti Malware] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionMonitoringAgentConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Monitoring Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "monitoringWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the monitoring log analytics workspace. Must be set when extensionMonitoringAgentConfig is set to true."
              }
            },
            "extensionDependencyAgentConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Dependency Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionNetworkWatcherAgentConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Network Watcher Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionAzureDiskEncryptionConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Azure Disk Encryption] extension. Must at least contain the [\"enabled\": true] property to be executed. Restrictions: Cannot be enabled on disks that have encryption at host enabled. Managed disks encrypted using Azure Disk Encryption cannot be encrypted using customer-managed keys."
              }
            },
            "extensionDSCConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Desired State Configuration] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionCustomScriptConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false,
                "fileData": []
              },
              "metadata": {
                "description": "Optional. The configuration for the [Custom Script] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionCustomScriptProtectedSetting": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "diagnosticWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic log analytics workspace."
              }
            },
            "diagnosticEventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "diagnosticEventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "baseTime": {
              "type": "string",
              "defaultValue": "[utcNow('u')]",
              "metadata": {
                "description": "Generated. Do not provide a value! This date value is used to generate a registration token."
              }
            },
            "sasTokenValidityLength": {
              "type": "string",
              "defaultValue": "PT8H",
              "metadata": {
                "description": "Optional. SAS token validity length to use to download files from storage accounts. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the SAS token will be valid for 8 hours."
              }
            },
            "osType": {
              "type": "string",
              "allowedValues": [
                "Windows",
                "Linux"
              ],
              "metadata": {
                "description": "Required. The chosen OS type."
              }
            },
            "disablePasswordAuthentication": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies whether password authentication should be disabled."
              }
            },
            "provisionVMAgent": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later."
              }
            },
            "enableAutomaticUpdates": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. When patchMode is set to Manual, this parameter must be set to false. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning."
              }
            },
            "patchMode": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "AutomaticByPlatform",
                "AutomaticByOS",
                "Manual",
                "ImageDefault",
                ""
              ],
              "metadata": {
                "description": "Optional. VM guest patching orchestration mode. 'AutomaticByOS' & 'Manual' are for Windows only, 'ImageDefault' for Linux only. Refer to 'https://learn.microsoft.com/en-us/azure/virtual-machines/automatic-vm-guest-patching'."
              }
            },
            "patchAssessmentMode": {
              "type": "string",
              "defaultValue": "ImageDefault",
              "allowedValues": [
                "AutomaticByPlatform",
                "ImageDefault"
              ],
              "metadata": {
                "description": "Optional. VM guest patching assessment mode. Set it to 'AutomaticByPlatform' to enable automatically check for updates every 24 hours."
              }
            },
            "timeZone": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies the time zone of the virtual machine. e.g. 'Pacific Standard Time'. Possible values can be `TimeZoneInfo.id` value from time zones returned by `TimeZoneInfo.GetSystemTimeZones`."
              }
            },
            "additionalUnattendContent": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. - AdditionalUnattendContent object."
              }
            },
            "winRM": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell. - WinRMConfiguration object."
              }
            },
            "configurationProfile": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesProduction",
                "/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesDevTest",
                ""
              ],
              "metadata": {
                "description": "Required. The configuration profile of automanage."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "publicKeysFormatted",
                "count": "[length(parameters('publicKeys'))]",
                "input": {
                  "path": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].path]",
                  "keyData": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].keyData]"
                }
              }
            ],
            "linuxConfiguration": {
              "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]",
              "ssh": {
                "publicKeys": "[variables('publicKeysFormatted')]"
              },
              "provisionVMAgent": "[parameters('provisionVMAgent')]",
              "patchSettings": "[if(and(parameters('provisionVMAgent'), or(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), equals(toLower(parameters('patchMode')), toLower('ImageDefault')))), createObject('patchMode', parameters('patchMode'), 'assessmentMode', parameters('patchAssessmentMode')), null())]"
            },
            "windowsConfiguration": {
              "provisionVMAgent": "[parameters('provisionVMAgent')]",
              "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
              "patchSettings": "[if(and(parameters('provisionVMAgent'), or(or(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), equals(toLower(parameters('patchMode')), toLower('AutomaticByOS'))), equals(toLower(parameters('patchMode')), toLower('Manual')))), createObject('patchMode', parameters('patchMode'), 'assessmentMode', parameters('patchAssessmentMode')), null())]",
              "timeZone": "[if(empty(parameters('timeZone')), null(), parameters('timeZone'))]",
              "additionalUnattendContent": "[if(empty(parameters('additionalUnattendContent')), null(), parameters('additionalUnattendContent'))]",
              "winRM": "[if(not(empty(parameters('winRM'))), createObject('listeners', parameters('winRM')), null())]"
            },
            "accountSasProperties": {
              "signedServices": "b",
              "signedPermission": "r",
              "signedExpiry": "[dateTimeAdd(parameters('baseTime'), parameters('sasTokenValidityLength'))]",
              "signedResourceTypes": "o",
              "signedProtocol": "https"
            },
            "identityType": "[if(if(parameters('extensionAadJoinConfig').enabled, true(), parameters('systemAssignedIdentity')), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "identity": "[variables('identity')]",
              "tags": "[parameters('tags')]",
              "zones": "[if(not(equals(parameters('availabilityZone'), 0)), array(parameters('availabilityZone')), null())]",
              "plan": "[if(not(empty(parameters('plan'))), parameters('plan'), null())]",
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "securityProfile": {
                  "encryptionAtHost": "[if(parameters('encryptionAtHost'), parameters('encryptionAtHost'), null())]",
                  "securityType": "[parameters('securityType')]",
                  "uefiSettings": "[if(equals(parameters('securityType'), 'TrustedLaunch'), createObject('secureBootEnabled', parameters('secureBootEnabled'), 'vTpmEnabled', parameters('vTpmEnabled')), null())]"
                },
                "storageProfile": {
                  "copy": [
                    {
                      "name": "dataDisks",
                      "count": "[length(parameters('dataDisks'))]",
                      "input": {
                        "lun": "[copyIndex('dataDisks')]",
                        "name": "[format('{0}-disk-data-{1}', parameters('name'), padLeft(add(copyIndex('dataDisks'), 1), 2, '0'))]",
                        "diskSizeGB": "[parameters('dataDisks')[copyIndex('dataDisks')].diskSizeGB]",
                        "createOption": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'createOption'), parameters('dataDisks')[copyIndex('dataDisks')].createOption, 'Empty')]",
                        "deleteOption": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'deleteOption'), parameters('dataDisks')[copyIndex('dataDisks')].deleteOption, 'Delete')]",
                        "caching": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'caching'), parameters('dataDisks')[copyIndex('dataDisks')].caching, 'ReadOnly')]",
                        "managedDisk": {
                          "storageAccountType": "[parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.storageAccountType]",
                          "diskEncryptionSet": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')].managedDisk, 'diskEncryptionSet'), createObject('id', parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.diskEncryptionSet.id), null())]"
                        }
                      }
                    }
                  ],
                  "imageReference": "[parameters('imageReference')]",
                  "osDisk": {
                    "name": "[format('{0}-disk-os-01', parameters('name'))]",
                    "createOption": "[if(contains(parameters('osDisk'), 'createOption'), parameters('osDisk').createOption, 'FromImage')]",
                    "deleteOption": "[if(contains(parameters('osDisk'), 'deleteOption'), parameters('osDisk').deleteOption, 'Delete')]",
                    "diskSizeGB": "[parameters('osDisk').diskSizeGB]",
                    "caching": "[if(contains(parameters('osDisk'), 'caching'), parameters('osDisk').caching, 'ReadOnly')]",
                    "managedDisk": {
                      "storageAccountType": "[parameters('osDisk').managedDisk.storageAccountType]",
                      "diskEncryptionSet": "[if(contains(parameters('osDisk').managedDisk, 'diskEncryptionSet'), createObject('id', parameters('osDisk').managedDisk.diskEncryptionSet.id), null())]"
                    }
                  }
                },
                "additionalCapabilities": {
                  "ultraSSDEnabled": "[parameters('ultraSSDEnabled')]"
                },
                "osProfile": {
                  "computerName": "[parameters('computerName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "customData": "[if(not(empty(parameters('customData'))), base64(parameters('customData')), null())]",
                  "windowsConfiguration": "[if(equals(parameters('osType'), 'Windows'), variables('windowsConfiguration'), null())]",
                  "linuxConfiguration": "[if(equals(parameters('osType'), 'Linux'), variables('linuxConfiguration'), null())]",
                  "secrets": "[parameters('certificatesToBeInstalled')]",
                  "allowExtensionOperations": "[parameters('allowExtensionOperations')]"
                },
                "networkProfile": {
                  "copy": [
                    {
                      "name": "networkInterfaces",
                      "count": "[length(parameters('nicConfigurations'))]",
                      "input": {
                        "properties": {
                          "deleteOption": "[if(contains(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'deleteOption'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].deleteOption, 'Delete')]",
                          "primary": "[if(equals(copyIndex('networkInterfaces'), 0), true(), false())]"
                        },
                        "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', parameters('name'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].nicSuffix))]"
                      }
                    }
                  ]
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), true(), parameters('bootDiagnostics'))]",
                    "storageUri": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), format('https://{0}{1}', parameters('bootDiagnosticStorageAccountName'), parameters('bootDiagnosticStorageAccountUri')), null())]"
                  }
                },
                "availabilitySet": "[if(not(empty(parameters('availabilitySetResourceId'))), createObject('id', parameters('availabilitySetResourceId')), null())]",
                "proximityPlacementGroup": "[if(not(empty(parameters('proximityPlacementGroupResourceId'))), createObject('id', parameters('proximityPlacementGroupResourceId')), null())]",
                "priority": "[parameters('priority')]",
                "evictionPolicy": "[if(parameters('enableEvictionPolicy'), 'Deallocate', null())]",
                "billingProfile": "[if(and(not(empty(parameters('priority'))), not(empty(parameters('maxPriceForLowPriorityVm')))), createObject('maxPrice', parameters('maxPriceForLowPriorityVm')), null())]",
                "host": "[if(not(empty(parameters('dedicatedHostId'))), createObject('id', parameters('dedicatedHostId')), null())]",
                "licenseType": "[if(not(empty(parameters('licenseType'))), parameters('licenseType'), null())]"
              },
              "dependsOn": [
                "vm_nic"
              ]
            },
            {
              "condition": "[not(empty(parameters('configurationProfile')))]",
              "type": "Microsoft.Automanage/configurationProfileAssignments",
              "apiVersion": "2021-04-30-preview",
              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
              "name": "default",
              "properties": {
                "configurationProfile": "[parameters('configurationProfile')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "vm_nic",
                "count": "[length(parameters('nicConfigurations'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-Nic-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "networkInterfaceName": {
                    "value": "[format('{0}{1}', parameters('name'), parameters('nicConfigurations')[copyIndex()].nicSuffix)]"
                  },
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableIPForwarding": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableIPForwarding'), if(not(empty(parameters('nicConfigurations')[copyIndex()].enableIPForwarding)), createObject('value', parameters('nicConfigurations')[copyIndex()].enableIPForwarding), createObject('value', false())), createObject('value', false()))]",
                  "enableAcceleratedNetworking": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableAcceleratedNetworking'), createObject('value', parameters('nicConfigurations')[copyIndex()].enableAcceleratedNetworking), createObject('value', true()))]",
                  "dnsServers": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'dnsServers'), if(not(empty(parameters('nicConfigurations')[copyIndex()].dnsServers)), createObject('value', parameters('nicConfigurations')[copyIndex()].dnsServers), createObject('value', createArray())), createObject('value', createArray()))]",
                  "networkSecurityGroupResourceId": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'networkSecurityGroupResourceId'), createObject('value', parameters('nicConfigurations')[copyIndex()].networkSecurityGroupResourceId), createObject('value', ''))]",
                  "ipConfigurations": {
                    "value": "[parameters('nicConfigurations')[copyIndex()].ipConfigurations]"
                  },
                  "diagnosticStorageAccountId": {
                    "value": "[parameters('diagnosticStorageAccountId')]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('diagnosticWorkspaceId')]"
                  },
                  "diagnosticEventHubAuthorizationRuleId": {
                    "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                  },
                  "diagnosticEventHubName": {
                    "value": "[parameters('diagnosticEventHubName')]"
                  },
                  "pipDiagnosticSettingsName": {
                    "value": "[parameters('pipDiagnosticSettingsName')]"
                  },
                  "nicDiagnosticSettingsName": {
                    "value": "[parameters('nicDiagnosticSettingsName')]"
                  },
                  "pipdiagnosticMetricsToEnable": {
                    "value": "[parameters('pipdiagnosticMetricsToEnable')]"
                  },
                  "pipdiagnosticLogCategoriesToEnable": {
                    "value": "[parameters('pipdiagnosticLogCategoriesToEnable')]"
                  },
                  "nicDiagnosticMetricsToEnable": {
                    "value": "[parameters('nicdiagnosticMetricsToEnable')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "13527221761587781746"
                    }
                  },
                  "parameters": {
                    "networkInterfaceName": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "enableIPForwarding": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableAcceleratedNetworking": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "dnsServers": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "networkSecurityGroupResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The network security group (NSG) to attach to the network interface."
                      }
                    },
                    "ipConfigurations": {
                      "type": "array"
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string"
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string"
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string"
                    },
                    "diagnosticEventHubName": {
                      "type": "string"
                    },
                    "pipdiagnosticMetricsToEnable": {
                      "type": "array"
                    },
                    "pipdiagnosticLogCategoriesToEnable": {
                      "type": "array"
                    },
                    "nicDiagnosticMetricsToEnable": {
                      "type": "array"
                    },
                    "pipDiagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('virtualMachineName'))]",
                      "metadata": {
                        "description": "Optional. The name of the PIP diagnostic setting, if deployed."
                      }
                    },
                    "nicDiagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('virtualMachineName'))]",
                      "metadata": {
                        "description": "Optional. The name of the NIC diagnostic setting, if deployed."
                      }
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "networkInterface_publicIPAddresses",
                        "count": "[length(parameters('ipConfigurations'))]"
                      },
                      "condition": "[contains(parameters('ipConfigurations')[copyIndex()], 'pipconfiguration')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-publicIP-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurations')[copyIndex()].pipconfiguration.publicIpNameSuffix)]"
                          },
                          "diagnosticEventHubAuthorizationRuleId": {
                            "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                          },
                          "diagnosticEventHubName": {
                            "value": "[parameters('diagnosticEventHubName')]"
                          },
                          "diagnosticLogCategoriesToEnable": {
                            "value": "[parameters('pipdiagnosticLogCategoriesToEnable')]"
                          },
                          "diagnosticMetricsToEnable": {
                            "value": "[parameters('pipdiagnosticMetricsToEnable')]"
                          },
                          "diagnosticSettingsName": {
                            "value": "[parameters('pipDiagnosticSettingsName')]"
                          },
                          "diagnosticStorageAccountId": {
                            "value": "[parameters('diagnosticStorageAccountId')]"
                          },
                          "diagnosticWorkspaceId": {
                            "value": "[parameters('diagnosticWorkspaceId')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "publicIPAddressVersion": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'publicIPAddressVersion'), createObject('value', parameters('ipConfigurations')[copyIndex()].publicIPAddressVersion), createObject('value', 'IPv4'))]",
                          "publicIPAllocationMethod": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'publicIPAllocationMethod'), createObject('value', parameters('ipConfigurations')[copyIndex()].publicIPAllocationMethod), createObject('value', 'Static'))]",
                          "publicIPPrefixResourceId": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'publicIPPrefixResourceId'), createObject('value', parameters('ipConfigurations')[copyIndex()].publicIPPrefixResourceId), createObject('value', ''))]",
                          "skuName": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'skuName'), createObject('value', parameters('ipConfigurations')[copyIndex()].skuName), createObject('value', 'Standard'))]",
                          "skuTier": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'skuTier'), createObject('value', parameters('ipConfigurations')[copyIndex()].skuTier), createObject('value', 'Regional'))]",
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "zones": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'zones'), createObject('value', parameters('ipConfigurations')[copyIndex()].zones), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "6299355001850457425"
                            },
                            "name": "Public IP Addresses",
                            "description": "This module deploys a Public IP Address.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the Public IP Address."
                              }
                            },
                            "publicIPPrefixResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                              }
                            },
                            "publicIPAllocationMethod": {
                              "type": "string",
                              "defaultValue": "Static",
                              "allowedValues": [
                                "Dynamic",
                                "Static"
                              ],
                              "metadata": {
                                "description": "Optional. The public IP address allocation method."
                              }
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "Standard",
                              "allowedValues": [
                                "Basic",
                                "Standard"
                              ],
                              "metadata": {
                                "description": "Optional. Name of a public IP address SKU."
                              }
                            },
                            "skuTier": {
                              "type": "string",
                              "defaultValue": "Regional",
                              "allowedValues": [
                                "Global",
                                "Regional"
                              ],
                              "metadata": {
                                "description": "Optional. Tier of a public IP address SKU."
                              }
                            },
                            "zones": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                              }
                            },
                            "publicIPAddressVersion": {
                              "type": "string",
                              "defaultValue": "IPv4",
                              "allowedValues": [
                                "IPv4",
                                "IPv6"
                              ],
                              "metadata": {
                                "description": "Optional. IP address version."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "domainNameLabel": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                              }
                            },
                            "domainNameLabelScope": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "",
                                "NoReuse",
                                "ResourceGroupReuse",
                                "SubscriptionReuse",
                                "TenantReuse"
                              ],
                              "metadata": {
                                "description": "Optional. The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN."
                              }
                            },
                            "fqdn": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                              }
                            },
                            "reverseFqdn": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "allLogs"
                              ],
                              "allowedValues": [
                                "",
                                "allLogs",
                                "DDoSProtectionNotifications",
                                "DDoSMitigationFlowLogs",
                                "DDoSMitigationReports"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "AllMetrics"
                              ],
                              "allowedValues": [
                                "AllMetrics"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogsSpecified",
                                "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), ''))))))]",
                                "input": {
                                  "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), '')))))[copyIndex('diagnosticsLogsSpecified')]]",
                                  "enabled": true
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true
                                }
                              }
                            ],
                            "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), if(contains(parameters('diagnosticLogCategoriesToEnable'), ''), createArray(), variables('diagnosticsLogsSpecified')))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "[parameters('skuName')]",
                                "tier": "[parameters('skuTier')]"
                              },
                              "zones": "[parameters('zones')]",
                              "properties": {
                                "dnsSettings": "[if(not(empty(parameters('domainNameLabel'))), createObject('domainNameLabel', parameters('domainNameLabel'), 'domainNameLabelScope', parameters('domainNameLabelScope'), 'fqdn', parameters('fqdn'), 'reverseFqdn', parameters('reverseFqdn')), null())]",
                                "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                                "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                                "publicIPPrefix": "[if(not(empty(parameters('publicIPPrefixResourceId'))), createObject('id', parameters('publicIPPrefixResourceId')), null())]",
                                "idleTimeoutInMinutes": 4,
                                "ipTags": []
                              }
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                              "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the public IP address was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the public IP address."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the public IP address."
                              },
                              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                            },
                            "ipAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "The public IP address of the public IP address resource."
                              },
                              "value": "[if(contains(reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2023-04-01'), 'ipAddress'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2023-04-01').ipAddress, '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2023-04-01', 'full').location]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-NetworkInterface', deployment().name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('networkInterfaceName')]"
                          },
                          "ipConfigurations": {
                            "copy": [
                              {
                                "name": "value",
                                "count": "[length(parameters('ipConfigurations'))]",
                                "input": "[createObject('name', if(not(empty(parameters('ipConfigurations')[copyIndex('value')].name)), parameters('ipConfigurations')[copyIndex('value')].name, null()), 'primary', equals(copyIndex('value'), 0), 'privateIPAllocationMethod', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('value')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('value')].privateIPAllocationMethod, null()), null()), 'privateIPAddress', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('value')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('value')].privateIPAddress, null()), null()), 'publicIPAddressResourceId', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'pipconfiguration'), resourceId('Microsoft.Network/publicIPAddresses', format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurations')[copyIndex('value')].pipconfiguration.publicIpNameSuffix)), null()), 'subnetResourceId', parameters('ipConfigurations')[copyIndex('value')].subnetResourceId, 'loadBalancerBackendAddressPools', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerBackendAddressPools'), parameters('ipConfigurations')[copyIndex('value')].loadBalancerBackendAddressPools, null()), 'applicationSecurityGroups', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'applicationSecurityGroups'), parameters('ipConfigurations')[copyIndex('value')].applicationSecurityGroups, null()), 'applicationGatewayBackendAddressPools', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'applicationGatewayBackendAddressPools'), parameters('ipConfigurations')[copyIndex('value')].applicationGatewayBackendAddressPools, null()), 'gatewayLoadBalancer', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'gatewayLoadBalancer'), parameters('ipConfigurations')[copyIndex('value')].gatewayLoadBalancer, null()), 'loadBalancerInboundNatRules', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerInboundNatRules'), parameters('ipConfigurations')[copyIndex('value')].loadBalancerInboundNatRules, null()), 'privateIPAddressVersion', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddressVersion'), parameters('ipConfigurations')[copyIndex('value')].privateIPAddressVersion, null()), 'virtualNetworkTaps', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'virtualNetworkTaps'), parameters('ipConfigurations')[copyIndex('value')].virtualNetworkTaps, null()))]"
                              }
                            ]
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "diagnosticEventHubAuthorizationRuleId": {
                            "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                          },
                          "diagnosticEventHubName": {
                            "value": "[parameters('diagnosticEventHubName')]"
                          },
                          "diagnosticStorageAccountId": {
                            "value": "[parameters('diagnosticStorageAccountId')]"
                          },
                          "diagnosticMetricsToEnable": {
                            "value": "[parameters('nicDiagnosticMetricsToEnable')]"
                          },
                          "diagnosticSettingsName": {
                            "value": "[parameters('nicDiagnosticSettingsName')]"
                          },
                          "diagnosticWorkspaceId": {
                            "value": "[parameters('diagnosticWorkspaceId')]"
                          },
                          "dnsServers": "[if(not(empty(parameters('dnsServers'))), createObject('value', parameters('dnsServers')), createObject('value', createArray()))]",
                          "enableAcceleratedNetworking": {
                            "value": "[parameters('enableAcceleratedNetworking')]"
                          },
                          "enableIPForwarding": {
                            "value": "[parameters('enableIPForwarding')]"
                          },
                          "networkSecurityGroupResourceId": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('value', parameters('networkSecurityGroupResourceId')), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "5134080285079659794"
                            },
                            "name": "Network Interface",
                            "description": "This module deploys a Network Interface.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the network interface."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableIPForwarding": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether IP forwarding is enabled on this network interface."
                              }
                            },
                            "enableAcceleratedNetworking": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If the network interface is accelerated networking enabled."
                              }
                            },
                            "dnsServers": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection."
                              }
                            },
                            "networkSecurityGroupResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The network security group (NSG) to attach to the network interface."
                              }
                            },
                            "auxiliaryMode": {
                              "type": "string",
                              "defaultValue": "None",
                              "allowedValues": [
                                "Floating",
                                "MaxConnections",
                                "None"
                              ],
                              "metadata": {
                                "description": "Optional. Auxiliary mode of Network Interface resource. Not all regions are enabled for Auxiliary Mode Nic."
                              }
                            },
                            "auxiliarySku": {
                              "type": "string",
                              "defaultValue": "None",
                              "allowedValues": [
                                "A1",
                                "A2",
                                "A4",
                                "A8",
                                "None"
                              ],
                              "metadata": {
                                "description": "Optional. Auxiliary sku of Network Interface resource. Not all regions are enabled for Auxiliary Mode Nic."
                              }
                            },
                            "disableTcpStateTracking": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether to disable tcp state tracking. Subscription must be registered for the Microsoft.Network/AllowDisableTcpStateTracking feature before this property can be set to true."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. A list of IPConfigurations of the network interface."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource identifier of log analytics."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "AllMetrics"
                              ],
                              "allowedValues": [
                                "AllMetrics"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkInterfaces",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "ipConfigurations",
                                    "count": "[length(parameters('ipConfigurations'))]",
                                    "input": {
                                      "name": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'name'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].name, format('ipconfig0{0}', add(copyIndex('ipConfigurations'), 1)))]",
                                      "properties": {
                                        "primary": "[if(equals(copyIndex('ipConfigurations'), 0), true(), false())]",
                                        "privateIPAllocationMethod": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod, null()), null())]",
                                        "privateIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress, null()), null())]",
                                        "publicIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'publicIPAddressResourceId'), if(not(equals(parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId, null())), createObject('id', parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId), null()), null())]",
                                        "subnet": {
                                          "id": "[parameters('ipConfigurations')[copyIndex('ipConfigurations')].subnetResourceId]"
                                        },
                                        "loadBalancerBackendAddressPools": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerBackendAddressPools'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].loadBalancerBackendAddressPools, null())]",
                                        "applicationSecurityGroups": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationSecurityGroups'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].applicationSecurityGroups, null())]",
                                        "applicationGatewayBackendAddressPools": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationGatewayBackendAddressPools'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].applicationGatewayBackendAddressPools, null())]",
                                        "gatewayLoadBalancer": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'gatewayLoadBalancer'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].gatewayLoadBalancer, null())]",
                                        "loadBalancerInboundNatRules": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerInboundNatRules'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].loadBalancerInboundNatRules, null())]",
                                        "privateIPAddressVersion": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddressVersion'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddressVersion, null())]",
                                        "virtualNetworkTaps": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'virtualNetworkTaps'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].virtualNetworkTaps, null())]"
                                      }
                                    }
                                  }
                                ],
                                "auxiliaryMode": "[parameters('auxiliaryMode')]",
                                "auxiliarySku": "[parameters('auxiliarySku')]",
                                "disableTcpStateTracking": "[parameters('disableTcpStateTracking')]",
                                "dnsSettings": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]",
                                "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                                "enableIPForwarding": "[parameters('enableIPForwarding')]",
                                "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]"
                              }
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                              "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed resource."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed resource."
                              },
                              "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed resource."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('name')), '2023-04-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "networkInterface_publicIPAddresses"
                      ]
                    }
                  ]
                }
              }
            },
            {
              "condition": "[parameters('extensionAadJoinConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-AADLogin', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "AADLogin"
                  },
                  "publisher": {
                    "value": "Microsoft.Azure.ActiveDirectory"
                  },
                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AADLoginForWindows'), createObject('value', 'AADSSHLoginforLinux'))]",
                  "typeHandlerVersion": "[if(contains(parameters('extensionAadJoinConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAadJoinConfig').typeHandlerVersion), createObject('value', '1.0'))]",
                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAadJoinConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAadJoinConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionAadJoinConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAadJoinConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                  "settings": "[if(contains(parameters('extensionAadJoinConfig'), 'settings'), createObject('value', parameters('extensionAadJoinConfig').settings), createObject('value', createObject()))]",
                  "tags": "[if(contains(parameters('extensionAadJoinConfig'), 'tags'), createObject('value', parameters('extensionAadJoinConfig').tags), createObject('value', createObject()))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "479295742213252376"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionDomainJoinConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "DomainJoin"
                  },
                  "publisher": {
                    "value": "Microsoft.Compute"
                  },
                  "type": {
                    "value": "JsonADDomainExtension"
                  },
                  "typeHandlerVersion": "[if(contains(parameters('extensionDomainJoinConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDomainJoinConfig').typeHandlerVersion), createObject('value', '1.3'))]",
                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDomainJoinConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDomainJoinConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionDomainJoinConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDomainJoinConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                  "settings": {
                    "value": "[parameters('extensionDomainJoinConfig').settings]"
                  },
                  "tags": "[if(contains(parameters('extensionDomainJoinConfig'), 'tags'), createObject('value', parameters('extensionDomainJoinConfig').tags), createObject('value', createObject()))]",
                  "protectedSettings": {
                    "value": {
                      "Password": "[parameters('extensionDomainJoinPassword')]"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "479295742213252376"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionAntiMalwareConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "MicrosoftAntiMalware"
                  },
                  "publisher": {
                    "value": "Microsoft.Azure.Security"
                  },
                  "type": {
                    "value": "IaaSAntimalware"
                  },
                  "typeHandlerVersion": "[if(contains(parameters('extensionAntiMalwareConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAntiMalwareConfig').typeHandlerVersion), createObject('value', '1.3'))]",
                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAntiMalwareConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAntiMalwareConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionAntiMalwareConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAntiMalwareConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                  "settings": {
                    "value": "[parameters('extensionAntiMalwareConfig').settings]"
                  },
                  "tags": "[if(contains(parameters('extensionAntiMalwareConfig'), 'tags'), createObject('value', parameters('extensionAntiMalwareConfig').tags), createObject('value', createObject()))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "479295742213252376"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionMonitoringAgentConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "MicrosoftMonitoringAgent"
                  },
                  "publisher": {
                    "value": "Microsoft.EnterpriseCloud.Monitoring"
                  },
                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'MicrosoftMonitoringAgent'), createObject('value', 'OmsAgentForLinux'))]",
                  "typeHandlerVersion": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionMonitoringAgentConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '1.0'), createObject('value', '1.7')))]",
                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionMonitoringAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionMonitoringAgentConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                  "settings": {
                    "value": {
                      "workspaceId": "[if(not(empty(parameters('monitoringWorkspaceId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').customerId, '')]"
                    }
                  },
                  "tags": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'tags'), createObject('value', parameters('extensionMonitoringAgentConfig').tags), createObject('value', createObject()))]",
                  "protectedSettings": {
                    "value": {
                      "workspaceKey": "[if(not(empty(parameters('monitoringWorkspaceId'))), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').primarySharedKey, '')]"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "479295742213252376"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionDependencyAgentConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "DependencyAgent"
                  },
                  "publisher": {
                    "value": "Microsoft.Azure.Monitoring.DependencyAgent"
                  },
                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'DependencyAgentWindows'), createObject('value', 'DependencyAgentLinux'))]",
                  "typeHandlerVersion": "[if(contains(parameters('extensionDependencyAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDependencyAgentConfig').typeHandlerVersion), createObject('value', '9.5'))]",
                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDependencyAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDependencyAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionDependencyAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDependencyAgentConfig').enableAutomaticUpgrade), createObject('value', true()))]",
                  "tags": "[if(contains(parameters('extensionDependencyAgentConfig'), 'tags'), createObject('value', parameters('extensionDependencyAgentConfig').tags), createObject('value', createObject()))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "479295742213252376"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionNetworkWatcherAgentConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "NetworkWatcherAgent"
                  },
                  "publisher": {
                    "value": "Microsoft.Azure.NetworkWatcher"
                  },
                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'NetworkWatcherAgentWindows'), createObject('value', 'NetworkWatcherAgentLinux'))]",
                  "typeHandlerVersion": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').typeHandlerVersion), createObject('value', '1.4'))]",
                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                  "tags": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'tags'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').tags), createObject('value', createObject()))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "479295742213252376"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionDSCConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "DesiredStateConfiguration"
                  },
                  "publisher": {
                    "value": "Microsoft.Powershell"
                  },
                  "type": {
                    "value": "DSC"
                  },
                  "typeHandlerVersion": "[if(contains(parameters('extensionDSCConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDSCConfig').typeHandlerVersion), createObject('value', '2.77'))]",
                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDSCConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDSCConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionDSCConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDSCConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                  "settings": "[if(contains(parameters('extensionDSCConfig'), 'settings'), createObject('value', parameters('extensionDSCConfig').settings), createObject('value', createObject()))]",
                  "tags": "[if(contains(parameters('extensionDSCConfig'), 'tags'), createObject('value', parameters('extensionDSCConfig').tags), createObject('value', createObject()))]",
                  "protectedSettings": "[if(contains(parameters('extensionDSCConfig'), 'protectedSettings'), createObject('value', parameters('extensionDSCConfig').protectedSettings), createObject('value', createObject()))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "479295742213252376"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionCustomScriptConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "CustomScriptExtension"
                  },
                  "publisher": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'Microsoft.Compute'), createObject('value', 'Microsoft.Azure.Extensions'))]",
                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'CustomScriptExtension'), createObject('value', 'CustomScript'))]",
                  "typeHandlerVersion": "[if(contains(parameters('extensionCustomScriptConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionCustomScriptConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '1.10'), createObject('value', '2.1')))]",
                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionCustomScriptConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionCustomScriptConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionCustomScriptConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionCustomScriptConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                  "settings": {
                    "value": {
                      "copy": [
                        {
                          "name": "fileUris",
                          "count": "[length(parameters('extensionCustomScriptConfig').fileData)]",
                          "input": "[if(contains(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')], 'storageAccountId'), format('{0}?{1}', parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri, listAccountSas(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].storageAccountId, '2019-04-01', variables('accountSasProperties')).accountSasToken), parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri)]"
                        }
                      ]
                    }
                  },
                  "tags": "[if(contains(parameters('extensionCustomScriptConfig'), 'tags'), createObject('value', parameters('extensionCustomScriptConfig').tags), createObject('value', createObject()))]",
                  "protectedSettings": {
                    "value": "[parameters('extensionCustomScriptProtectedSetting')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "479295742213252376"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location'))))]"
              ]
            },
            {
              "condition": "[parameters('extensionAzureDiskEncryptionConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-AzureDiskEncryption', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "AzureDiskEncryption"
                  },
                  "publisher": {
                    "value": "Microsoft.Azure.Security"
                  },
                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzureDiskEncryption'), createObject('value', 'AzureDiskEncryptionForLinux'))]",
                  "typeHandlerVersion": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '2.2'), createObject('value', '1.1')))]",
                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                  "forceUpdateTag": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'forceUpdateTag'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').forceUpdateTag), createObject('value', '1.0'))]",
                  "settings": {
                    "value": "[parameters('extensionAzureDiskEncryptionConfig').settings]"
                  },
                  "tags": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'tags'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').tags), createObject('value', createObject()))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "479295742213252376"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location'))))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location'))))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('backupVaultName')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-Backup', uniqueString(deployment().name, parameters('location')))]",
              "resourceGroup": "[parameters('backupVaultResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[format('vm;iaasvmcontainerv2;{0};{1}', resourceGroup().name, parameters('name'))]"
                  },
                  "policyId": {
                    "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('backupVaultName'), parameters('backupPolicyName'))]"
                  },
                  "protectedItemType": {
                    "value": "Microsoft.Compute/virtualMachines"
                  },
                  "protectionContainerName": {
                    "value": "[format('iaasvmcontainer;iaasvmcontainerv2;{0};{1}', resourceGroup().name, parameters('name'))]"
                  },
                  "recoveryVaultName": {
                    "value": "[parameters('backupVaultName')]"
                  },
                  "sourceResourceId": {
                    "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "15677187951825533891"
                    },
                    "name": "Recovery Service Vaults Protection Container Protected Item",
                    "description": "This module deploys a Recovery Services Vault Protection Container Protected Item.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the resource."
                      }
                    },
                    "protectionContainerName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. Name of the Azure Recovery Service Vault Protection Container. Required if the template is used in a standalone deployment."
                      }
                    },
                    "recoveryVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "protectedItemType": {
                      "type": "string",
                      "allowedValues": [
                        "AzureFileShareProtectedItem",
                        "AzureVmWorkloadSAPAseDatabase",
                        "AzureVmWorkloadSAPHanaDatabase",
                        "AzureVmWorkloadSQLDatabase",
                        "DPMProtectedItem",
                        "GenericProtectedItem",
                        "MabFileFolderProtectedItem",
                        "Microsoft.ClassicCompute/virtualMachines",
                        "Microsoft.Compute/virtualMachines",
                        "Microsoft.Sql/servers/databases"
                      ],
                      "metadata": {
                        "description": "Required. The backup item type."
                      }
                    },
                    "policyId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. ID of the backup policy with which this item is backed up."
                      }
                    },
                    "sourceResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the resource to back up."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                      "apiVersion": "2023-01-01",
                      "name": "[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "protectedItemType": "[parameters('protectedItemType')]",
                        "policyId": "[parameters('policyId')]",
                        "sourceResourceId": "[parameters('sourceResourceId')]"
                      }
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the protected item was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the protected item."
                      },
                      "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems', split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[0], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[1], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[2], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[3])]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The Name of the protected item."
                      },
                      "value": "[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-AADLogin', uniqueString(deployment().name, parameters('location'))))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location'))))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location'))))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location'))))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location'))))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location'))))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location'))))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location'))))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the VM."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the VM."
              },
              "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the VM was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2022-11-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2022-11-01', 'full').identity.principalId, '')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2022-11-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('imageBuildResourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}Image-Definition-Validation-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "resourceGroup": "[variables('imageBuildResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "ArtifactsLocation": {
            "value": "[format('{0}{1}/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountResourceId'), '/')[2], split(parameters('storageAccountResourceId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountResourceId'), '/'))), '2022-09-01').primaryEndpoints.blob, parameters('containerName'))]"
          },
          "ExecuteScript": {
            "value": "Get-ImageBuildValidations.ps1"
          },
          "Parameters": "[if(not(empty(parameters('imageDefinitionResourceId'))), createObject('value', format('{0} -imageDefinitionResourceId {1} -SourceSku {2}', format('-environment {0} -subscription {1} -tenant {2} -userAssignedIdentityClientId {3}', variables('cloud'), variables('subscriptionId'), variables('tenantId'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('userAssignedIdentityResourceId'), '/'))), '2023-01-31').clientId), parameters('imageDefinitionResourceId'), parameters('sku'))), createObject('value', format('{0} -imageGalleryResourceId {1} -imageLocation {2} -imageName {3} -ImageHyperVGeneration {4} -ImageSecurityType {5} -ImageIsHibernateSupported {6} -ImageIsAcceleratedNetworkSupported {7} -ImageIsHigherStoragePerformanceSupported {8} -imagePublisher {9} -imageOffer {10} -imageSku {11}', format('-environment {0} -subscription {1} -tenant {2} -userAssignedIdentityClientId {3}', variables('cloud'), variables('subscriptionId'), variables('tenantId'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('userAssignedIdentityResourceId'), '/'))), '2023-01-31').clientId), parameters('computeGalleryResourceId'), parameters('deploymentLocation'), variables('galleryImageDefinitionName'), variables('galleryImageDefinitionHyperVGeneration'), parameters('imageDefinitionSecurityType'), parameters('imageDefinitionIsHibernateSupported'), parameters('imageDefinitionIsAcceleratedNetworkSupported'), parameters('imageDefinitionIsHigherStoragePerformanceSupported'), variables('galleryImageDefinitionPublisher'), variables('galleryImageDefinitionOffer'), variables('galleryImageDefinitionSku'))))]",
          "Files": {
            "value": [
              "Get-ImageBuildValidations.ps1"
            ]
          },
          "Location": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location]"
          },
          "Output": {
            "value": true
          },
          "Tags": {
            "value": "[parameters('tags')]"
          },
          "UserAssignedIdentityClientId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('userAssignedIdentityResourceId'), '/'))), '2023-01-31').clientId]"
          },
          "VirtualMachineName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Management-VM-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "10024048130203563067"
            }
          },
          "parameters": {
            "ArtifactsLocation": {
              "type": "string"
            },
            "Files": {
              "type": "array"
            },
            "ExecuteScript": {
              "type": "string",
              "defaultValue": ""
            },
            "Location": {
              "type": "string"
            },
            "Output": {
              "type": "bool",
              "defaultValue": false
            },
            "Parameters": {
              "type": "string",
              "defaultValue": ""
            },
            "Tags": {
              "type": "object"
            },
            "Timestamp": {
              "type": "string",
              "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
            },
            "UserAssignedIdentityClientId": {
              "type": "string"
            },
            "VirtualMachineName": {
              "type": "string"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "FileUris",
                "count": "[length(variables('FileNames'))]",
                "input": "[format('{0}{1}', parameters('ArtifactsLocation'), variables('FileNames')[copyIndex('FileUris')])]"
              }
            ],
            "CSEMasterScript": "cse_master_script.ps1",
            "ScriptToExecute": "[if(not(empty(parameters('ExecuteScript'))), parameters('ExecuteScript'), variables('CSEMasterScript'))]",
            "CommandToExecute": "[if(empty(parameters('Parameters')), format('powershell -ExecutionPolicy Unrestricted -command .\\{0}', variables('ScriptToExecute')), format('powershell -ExecutionPolicy Unrestricted -command .\\{0} {1}', variables('ScriptToExecute'), parameters('Parameters')))]",
            "FileNames": "[if(not(empty(parameters('ExecuteScript'))), union(createArray(format('{0}', parameters('ExecuteScript'))), parameters('Files')), union(createArray(format('{0}', variables('CSEMasterScript'))), parameters('Files')))]",
            "DefOutputValue": {
              "TimeStamp": "[parameters('Timestamp')]",
              "Files": "[variables('FileNames')]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('VirtualMachineName'), 'CustomScriptExtension')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.10",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "timestamp": "[parameters('Timestamp')]",
                  "fileUris": "[variables('FileUris')]"
                },
                "protectedSettings": "[if(contains(parameters('ArtifactsLocation'), environment().suffixes.storage), createObject('commandToExecute', variables('CommandToExecute'), 'managedIdentity', createObject('clientId', parameters('UserAssignedIdentityClientId'))), createObject('commandToExecute', variables('CommandToExecute')))]"
              }
            }
          ],
          "outputs": {
            "value": {
              "type": "object",
              "value": "[if(parameters('Output'), json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('VirtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message), json(string(variables('DefOutputValue'))))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('imageBuildResourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Management-VM-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('computeGalleryResourceId'), '/')[2], split(parameters('computeGalleryResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('{0}RoleAssign-MI-Reader-GalleryRG-{1}', variables('depPrefix'), parameters('timeStamp')))]"
      ]
    },
    {
      "condition": "[variables('collectLogs')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}Logs-StorageAccount-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "resourceGroup": "[variables('imageBuildResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('sa{0}log{1}', parameters('deploymentPrefix'), uniqueString(subscription().id, variables('imageBuildResourceGroupName'), variables('depPrefix')))]"
          },
          "location": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location]"
          },
          "allowCrossTenantReplication": {
            "value": false
          },
          "allowSharedKeyAccess": {
            "value": true
          },
          "requireInfrastructureEncryption": {
            "value": true
          },
          "blobServices": {
            "value": {
              "containers": [
                {
                  "name": "[variables('logContainerName')]",
                  "publicAccess": "None"
                }
              ]
            }
          },
          "kind": {
            "value": "StorageV2"
          },
          "managementPolicyRules": {
            "value": [
              {
                "enabled": true,
                "name": "Delete Blobs after 7 days",
                "type": "Lifecycle",
                "definition": {
                  "actions": {
                    "baseBlob": {
                      "delete": {
                        "daysAfterModificationGreaterThan": 7
                      }
                    }
                  },
                  "filters": {
                    "blobTypes": [
                      "blockBlob",
                      "appendBlob"
                    ]
                  }
                }
              }
            ]
          },
          "privateEndpoints": {
            "value": [
              {
                "name": "[format('pe-sa{0}log{1}-blob-{2}', parameters('deploymentPrefix'), uniqueString(subscription().id, variables('imageBuildResourceGroupName'), variables('depPrefix')), variables('locations')[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location].abbreviation)]",
                "privateDnsZoneGroup": {
                  "privateDNSResourceIds": [
                    "[format('{0}', parameters('blobPrivateDnsZoneResourceId'))]"
                  ]
                },
                "service": "blob",
                "subnetResourceId": "[parameters('privateEndpointSubnetResourceId')]",
                "tags": "[parameters('tags')]"
              }
            ]
          },
          "publicNetworkAccess": {
            "value": "Disabled"
          },
          "sasExpirationPeriod": {
            "value": "180.00:00:00"
          },
          "skuName": {
            "value": "Standard_LRS"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "4651085682731153865"
            },
            "name": "Storage Accounts",
            "description": "This module deploys a Storage Account.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "name": {
              "type": "string",
              "maxLength": 24,
              "metadata": {
                "description": "Required. Name of the Storage Account."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "StorageV2",
              "allowedValues": [
                "Storage",
                "StorageV2",
                "BlobStorage",
                "FileStorage",
                "BlockBlobStorage"
              ],
              "metadata": {
                "description": "Optional. Type of Storage Account to create."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Standard_GRS",
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_ZRS",
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_GZRS",
                "Standard_RAGZRS"
              ],
              "metadata": {
                "description": "Optional. Storage Account Sku Name."
              }
            },
            "accessTier": {
              "type": "string",
              "defaultValue": "Hot",
              "allowedValues": [
                "Premium",
                "Hot",
                "Cool"
              ],
              "metadata": {
                "description": "Conditional. Required if the Storage Account kind is set to BlobStorage. The access tier is used for billing. The \"Premium\" access tier is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs storage account type."
              }
            },
            "largeFileSharesState": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Disabled",
                "Enabled"
              ],
              "metadata": {
                "description": "Optional. Allow large file shares if sets to 'Enabled'. It cannot be disabled once it is enabled. Only supported on locally redundant and zone redundant file shares. It cannot be set on FileStorage storage accounts (storage accounts for premium file shares)."
              }
            },
            "azureFilesIdentityBasedAuthentication": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Provides the identity based authentication settings for Azure Files."
              }
            },
            "defaultToOAuthAuthentication": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. A boolean flag which indicates whether the default authentication is OAuth or not."
              }
            },
            "allowSharedKeyAccess": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true."
              }
            },
            "privateEndpoints": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
              }
            },
            "managementPolicyRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The Storage Account ManagementPolicies Rules."
              }
            },
            "networkAcls": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Networks ACLs, this value contains IPs to whitelist and/or Subnet information. For security reasons, it is recommended to set the DefaultAction Deny."
              }
            },
            "requireInfrastructureEncryption": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. A Boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest. For security reasons, it is recommended to set it to true."
              }
            },
            "allowCrossTenantReplication": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Allow or disallow cross AAD tenant object replication."
              }
            },
            "customDomainName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Sets the custom domain name assigned to the storage account. Name is the CNAME source."
              }
            },
            "customDomainUseSubDomainName": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether indirect CName validation is enabled. This should only be set on updates."
              }
            },
            "dnsEndpointType": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "AzureDnsZone",
                "Standard"
              ],
              "metadata": {
                "description": "Optional. Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier."
              }
            },
            "blobServices": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Blob service and containers to deploy."
              }
            },
            "fileServices": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. File service and shares to deploy."
              }
            },
            "queueServices": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Queue service and queues to create."
              }
            },
            "tableServices": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Table service and tables to create."
              }
            },
            "allowBlobPublicAccess": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether public access is enabled for all blobs or containers in the storage account. For security reasons, it is recommended to set it to false."
              }
            },
            "minimumTlsVersion": {
              "type": "string",
              "defaultValue": "TLS1_2",
              "allowedValues": [
                "TLS1_0",
                "TLS1_1",
                "TLS1_2"
              ],
              "metadata": {
                "description": "Optional. Set the minimum TLS version on request to storage."
              }
            },
            "enableHierarchicalNamespace": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Conditional. If true, enables Hierarchical Namespace for the storage account. Required if enableSftp or enableNfsV3 is set to true."
              }
            },
            "enableSftp": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If true, enables Secure File Transfer Protocol for the storage account. Requires enableHierarchicalNamespace to be true."
              }
            },
            "localUsers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Local users to deploy for SFTP authentication."
              }
            },
            "isLocalUserEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables local users feature, if set to true."
              }
            },
            "enableNfsV3": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If true, enables NFS 3.0 support for the storage account. Requires enableHierarchicalNamespace to be true."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "diagnosticWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic log analytics workspace."
              }
            },
            "diagnosticEventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "diagnosticEventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "allowedCopyScope": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "AAD",
                "PrivateLink"
              ],
              "metadata": {
                "description": "Optional. Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
              }
            },
            "supportsHttpsTrafficOnly": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Allows HTTPS traffic only to storage service if sets to true."
              }
            },
            "diagnosticMetricsToEnable": {
              "type": "array",
              "defaultValue": [
                "Transaction"
              ],
              "allowedValues": [
                "Transaction"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            },
            "cMKKeyVaultResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. The resource ID of a key vault to reference a customer managed key for encryption from. Required if 'cMKKeyName' is not empty."
              }
            },
            "cMKKeyName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the customer managed key to use for encryption. Cannot be deployed together with the parameter 'systemAssignedIdentity' enabled."
              }
            },
            "cMKUserAssignedIdentityResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. User assigned identity to use when fetching the customer managed key. Required if 'cMKKeyName' is not empty."
              }
            },
            "cMKKeyVersion": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, latest is used."
              }
            },
            "diagnosticSettingsName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
              }
            },
            "sasExpirationPeriod": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The SAS expiration period. DD.HH:MM:SS."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                "input": {
                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true
                }
              }
            ],
            "supportsBlobService": "[or(or(or(equals(parameters('kind'), 'BlockBlobStorage'), equals(parameters('kind'), 'BlobStorage')), equals(parameters('kind'), 'StorageV2')), equals(parameters('kind'), 'Storage'))]",
            "supportsFileService": "[or(or(equals(parameters('kind'), 'FileStorage'), equals(parameters('kind'), 'StorageV2')), equals(parameters('kind'), 'Storage'))]",
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-09-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "identity": "[variables('identity')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "allowSharedKeyAccess": "[parameters('allowSharedKeyAccess')]",
                "defaultToOAuthAuthentication": "[parameters('defaultToOAuthAuthentication')]",
                "allowCrossTenantReplication": "[parameters('allowCrossTenantReplication')]",
                "allowedCopyScope": "[if(not(empty(parameters('allowedCopyScope'))), parameters('allowedCopyScope'), null())]",
                "customDomain": {
                  "name": "[parameters('customDomainName')]",
                  "useSubDomainName": "[parameters('customDomainUseSubDomainName')]"
                },
                "dnsEndpointType": "[if(not(empty(parameters('dnsEndpointType'))), parameters('dnsEndpointType'), null())]",
                "isLocalUserEnabled": "[parameters('isLocalUserEnabled')]",
                "encryption": {
                  "keySource": "[if(not(empty(parameters('cMKKeyName'))), 'Microsoft.Keyvault', 'Microsoft.Storage')]",
                  "services": {
                    "blob": "[if(variables('supportsBlobService'), createObject('enabled', true()), null())]",
                    "file": "[if(variables('supportsFileService'), createObject('enabled', true()), null())]",
                    "table": {
                      "enabled": true
                    },
                    "queue": {
                      "enabled": true
                    }
                  },
                  "requireInfrastructureEncryption": "[if(not(equals(parameters('kind'), 'Storage')), parameters('requireInfrastructureEncryption'), null())]",
                  "keyvaultproperties": "[if(not(empty(parameters('cMKKeyName'))), createObject('keyname', parameters('cMKKeyName'), 'keyvaulturi', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('cMKKeyVaultResourceId'), '/')[2], split(parameters('cMKKeyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults', last(split(parameters('cMKKeyVaultResourceId'), '/'))), '2021-06-01-preview').vaultUri, 'keyversion', if(not(empty(parameters('cMKKeyVersion'))), parameters('cMKKeyVersion'), null())), null())]",
                  "identity": "[if(not(empty(parameters('cMKKeyName'))), createObject('userAssignedIdentity', parameters('cMKUserAssignedIdentityResourceId')), null())]"
                },
                "accessTier": "[if(not(equals(parameters('kind'), 'Storage')), parameters('accessTier'), null())]",
                "sasPolicy": "[if(not(empty(parameters('sasExpirationPeriod'))), createObject('expirationAction', 'Log', 'sasExpirationPeriod', parameters('sasExpirationPeriod')), null())]",
                "supportsHttpsTrafficOnly": "[parameters('supportsHttpsTrafficOnly')]",
                "isHnsEnabled": "[if(parameters('enableHierarchicalNamespace'), parameters('enableHierarchicalNamespace'), null())]",
                "isSftpEnabled": "[parameters('enableSftp')]",
                "isNfsV3Enabled": "[if(parameters('enableNfsV3'), parameters('enableNfsV3'), '')]",
                "largeFileSharesState": "[if(or(equals(parameters('skuName'), 'Standard_LRS'), equals(parameters('skuName'), 'Standard_ZRS')), parameters('largeFileSharesState'), null())]",
                "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                "networkAcls": "[if(not(empty(parameters('networkAcls'))), createObject('bypass', if(contains(parameters('networkAcls'), 'bypass'), parameters('networkAcls').bypass, null()), 'defaultAction', if(contains(parameters('networkAcls'), 'defaultAction'), parameters('networkAcls').defaultAction, null()), 'virtualNetworkRules', if(contains(parameters('networkAcls'), 'virtualNetworkRules'), parameters('networkAcls').virtualNetworkRules, createArray()), 'ipRules', if(contains(parameters('networkAcls'), 'ipRules'), parameters('networkAcls').ipRules, createArray())), null())]",
                "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkAcls'))), 'Disabled', null()))]",
                "azureFilesIdentityBasedAuthentication": "[if(not(empty(parameters('azureFilesIdentityBasedAuthentication'))), parameters('azureFilesIdentityBasedAuthentication'), null())]"
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
              "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "storageAccount_privateEndpoints",
                "count": "[length(parameters('privateEndpoints'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-StorageAccount-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "groupIds": {
                    "value": [
                      "[parameters('privateEndpoints')[copyIndex()].service]"
                    ]
                  },
                  "name": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'name'), createObject('value', parameters('privateEndpoints')[copyIndex()].name), createObject('value', format('pe-{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), parameters('privateEndpoints')[copyIndex()].service, copyIndex())))]",
                  "serviceResourceId": {
                    "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('privateEndpoints')[copyIndex()].subnetResourceId]"
                  },
                  "location": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'location'), createObject('value', parameters('privateEndpoints')[copyIndex()].location), createObject('value', reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location))]",
                  "privateDnsZoneGroup": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'privateDnsZoneGroup'), createObject('value', parameters('privateEndpoints')[copyIndex()].privateDnsZoneGroup), createObject('value', createObject()))]",
                  "tags": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'tags'), createObject('value', parameters('privateEndpoints')[copyIndex()].tags), createObject('value', createObject()))]",
                  "manualPrivateLinkServiceConnections": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'manualPrivateLinkServiceConnections'), createObject('value', parameters('privateEndpoints')[copyIndex()].manualPrivateLinkServiceConnections), createObject('value', createArray()))]",
                  "customDnsConfigs": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'customDnsConfigs'), createObject('value', parameters('privateEndpoints')[copyIndex()].customDnsConfigs), createObject('value', createArray()))]",
                  "ipConfigurations": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'ipConfigurations'), createObject('value', parameters('privateEndpoints')[copyIndex()].ipConfigurations), createObject('value', createArray()))]",
                  "applicationSecurityGroups": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'applicationSecurityGroups'), createObject('value', parameters('privateEndpoints')[copyIndex()].applicationSecurityGroups), createObject('value', createArray()))]",
                  "customNetworkInterfaceName": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'customNetworkInterfaceName'), createObject('value', parameters('privateEndpoints')[copyIndex()].customNetworkInterfaceName), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "14334419407719458542"
                    },
                    "name": "Private Endpoints",
                    "description": "This module deploys a Private Endpoint.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private endpoint resource to create."
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                      }
                    },
                    "serviceResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the resource that needs to be connected to the network."
                      }
                    },
                    "applicationSecurityGroups": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                      }
                    },
                    "customNetworkInterfaceName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                      }
                    },
                    "ipConfigurations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                      }
                    },
                    "groupIds": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. Subtype(s) of the connection to be created. The allowed values depend on the type serviceResourceId refers to."
                      }
                    },
                    "privateDnsZoneGroup": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The private DNS zone group configuration used to associate the private endpoint with one or multiple private DNS zones. A DNS zone group can support up to 5 DNS zones."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                      }
                    },
                    "customDnsConfigs": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Custom DNS configurations."
                      }
                    },
                    "manualPrivateLinkServiceConnections": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Manual PrivateLink Service Connections."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "applicationSecurityGroups": "[parameters('applicationSecurityGroups')]",
                        "customDnsConfigs": "[parameters('customDnsConfigs')]",
                        "customNetworkInterfaceName": "[parameters('customNetworkInterfaceName')]",
                        "ipConfigurations": "[parameters('ipConfigurations')]",
                        "manualPrivateLinkServiceConnections": "[parameters('manualPrivateLinkServiceConnections')]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('name')]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('serviceResourceId')]",
                              "groupIds": "[parameters('groupIds')]"
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PE-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateDNSResourceIds": {
                            "value": "[parameters('privateDnsZoneGroup').privateDNSResourceIds]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('name')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "11244630631275470040"
                            },
                            "name": "Private Endpoint Private DNS Zone Groups",
                            "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                              }
                            },
                            "privateDNSResourceIds": {
                              "type": "array",
                              "minLength": 1,
                              "maxLength": 5,
                              "metadata": {
                                "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateDnsZoneConfigs",
                                "count": "[length(parameters('privateDNSResourceIds'))]",
                                "input": {
                                  "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                  "properties": {
                                    "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                              "properties": {
                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint DNS zone group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint DNS zone group."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), '2023-04-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('managementPolicyRules')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Storage-ManagementPolicies', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "rules": {
                    "value": "[parameters('managementPolicyRules')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "17242504343460920777"
                    },
                    "name": "Storage Account Management Policies",
                    "description": "This module deploys a Storage Account Management Policy.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "rules": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. The Storage Account ManagementPolicies Rules."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[not(empty(parameters('rules')))]",
                      "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                      "apiVersion": "2023-01-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
                      "properties": {
                        "policy": {
                          "rules": "[parameters('rules')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed management policy."
                      },
                      "value": "default"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed management policy."
                      },
                      "value": "default"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed management policy."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-Storage-BlobServices', uniqueString(deployment().name, parameters('location'))))]"
              ]
            },
            {
              "copy": {
                "name": "storageAccount_localUsers",
                "count": "[length(parameters('localUsers'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Storage-LocalUsers-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('localUsers')[copyIndex()].name]"
                  },
                  "hasSshKey": {
                    "value": "[parameters('localUsers')[copyIndex()].hasSshKey]"
                  },
                  "hasSshPassword": {
                    "value": "[parameters('localUsers')[copyIndex()].hasSshPassword]"
                  },
                  "permissionScopes": {
                    "value": "[parameters('localUsers')[copyIndex()].permissionScopes]"
                  },
                  "hasSharedKey": "[if(contains(parameters('localUsers')[copyIndex()], 'hasSharedKey'), createObject('value', parameters('localUsers')[copyIndex()].hasSharedKey), createObject('value', false()))]",
                  "homeDirectory": "[if(contains(parameters('localUsers')[copyIndex()], 'homeDirectory'), createObject('value', parameters('localUsers')[copyIndex()].homeDirectory), createObject('value', ''))]",
                  "sshAuthorizedKeys": "[if(contains(parameters('localUsers')[copyIndex()], 'sshAuthorizedKeys'), createObject('value', parameters('localUsers')[copyIndex()].sshAuthorizedKeys), createObject('value', createArray()))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "3656314660357260599"
                    },
                    "name": "Storage Account Local Users",
                    "description": "This module deploys a Storage Account Local User, which is used for SFTP authentication.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the local user used for SFTP Authentication."
                      }
                    },
                    "hasSharedKey": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether shared key exists. Set it to false to remove existing shared key."
                      }
                    },
                    "hasSshKey": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether SSH key exists. Set it to false to remove existing SSH key."
                      }
                    },
                    "hasSshPassword": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether SSH password exists. Set it to false to remove existing SSH password."
                      }
                    },
                    "homeDirectory": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The local user home directory."
                      }
                    },
                    "permissionScopes": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. The permission scopes of the local user."
                      }
                    },
                    "sshAuthorizedKeys": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The local user SSH authorized keys for SFTP."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts/localUsers",
                      "apiVersion": "2022-05-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                      "properties": {
                        "hasSharedKey": "[parameters('hasSharedKey')]",
                        "hasSshKey": "[parameters('hasSshKey')]",
                        "hasSshPassword": "[parameters('hasSshPassword')]",
                        "homeDirectory": "[parameters('homeDirectory')]",
                        "permissionScopes": "[parameters('permissionScopes')]",
                        "sshAuthorizedKeys": "[if(not(empty(parameters('sshAuthorizedKeys'))), parameters('sshAuthorizedKeys'), null())]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed local user."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed local user."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed local user."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/localUsers', parameters('storageAccountName'), parameters('name'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('blobServices')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Storage-BlobServices', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "containers": "[if(contains(parameters('blobServices'), 'containers'), createObject('value', parameters('blobServices').containers), createObject('value', createArray()))]",
                  "automaticSnapshotPolicyEnabled": "[if(contains(parameters('blobServices'), 'automaticSnapshotPolicyEnabled'), createObject('value', parameters('blobServices').automaticSnapshotPolicyEnabled), createObject('value', false()))]",
                  "changeFeedEnabled": "[if(contains(parameters('blobServices'), 'changeFeedEnabled'), createObject('value', parameters('blobServices').changeFeedEnabled), createObject('value', false()))]",
                  "changeFeedRetentionInDays": "[if(contains(parameters('blobServices'), 'changeFeedRetentionInDays'), createObject('value', parameters('blobServices').changeFeedRetentionInDays), createObject('value', 7))]",
                  "containerDeleteRetentionPolicyEnabled": "[if(contains(parameters('blobServices'), 'containerDeleteRetentionPolicyEnabled'), createObject('value', parameters('blobServices').containerDeleteRetentionPolicyEnabled), createObject('value', false()))]",
                  "containerDeleteRetentionPolicyDays": "[if(contains(parameters('blobServices'), 'containerDeleteRetentionPolicyDays'), createObject('value', parameters('blobServices').containerDeleteRetentionPolicyDays), createObject('value', 7))]",
                  "containerDeleteRetentionPolicyAllowPermanentDelete": "[if(contains(parameters('blobServices'), 'containerDeleteRetentionPolicyAllowPermanentDelete'), createObject('value', parameters('blobServices').containerDeleteRetentionPolicyAllowPermanentDelete), createObject('value', false()))]",
                  "corsRules": "[if(contains(parameters('blobServices'), 'corsRules'), createObject('value', parameters('blobServices').corsRules), createObject('value', createArray()))]",
                  "defaultServiceVersion": "[if(contains(parameters('blobServices'), 'defaultServiceVersion'), createObject('value', parameters('blobServices').defaultServiceVersion), createObject('value', ''))]",
                  "deleteRetentionPolicyAllowPermanentDelete": "[if(contains(parameters('blobServices'), 'deleteRetentionPolicyAllowPermanentDelete'), createObject('value', parameters('blobServices').deleteRetentionPolicyAllowPermanentDelete), createObject('value', false()))]",
                  "deleteRetentionPolicyEnabled": "[if(contains(parameters('blobServices'), 'deleteRetentionPolicyEnabled'), createObject('value', parameters('blobServices').deleteRetentionPolicyEnabled), createObject('value', false()))]",
                  "deleteRetentionPolicyDays": "[if(contains(parameters('blobServices'), 'deleteRetentionPolicyDays'), createObject('value', parameters('blobServices').deleteRetentionPolicyDays), createObject('value', 7))]",
                  "isVersioningEnabled": "[if(contains(parameters('blobServices'), 'isVersioningEnabled'), createObject('value', parameters('blobServices').isVersioningEnabled), createObject('value', false()))]",
                  "lastAccessTimeTrackingPolicyEnabled": "[if(contains(parameters('blobServices'), 'lastAccessTimeTrackingPolicyEnabled'), createObject('value', parameters('blobServices').lastAccessTimeTrackingPolicyEnabled), createObject('value', false()))]",
                  "restorePolicyEnabled": "[if(contains(parameters('blobServices'), 'restorePolicyEnabled'), createObject('value', parameters('blobServices').restorePolicyEnabled), createObject('value', false()))]",
                  "restorePolicyDays": "[if(contains(parameters('blobServices'), 'restorePolicyDays'), createObject('value', parameters('blobServices').restorePolicyDays), createObject('value', 6))]",
                  "diagnosticStorageAccountId": "[if(contains(parameters('blobServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('blobServices').diagnosticStorageAccountId), createObject('value', ''))]",
                  "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('blobServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('blobServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                  "diagnosticEventHubName": "[if(contains(parameters('blobServices'), 'diagnosticEventHubName'), createObject('value', parameters('blobServices').diagnosticEventHubName), createObject('value', ''))]",
                  "diagnosticLogCategoriesToEnable": "[if(contains(parameters('blobServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('blobServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                  "diagnosticMetricsToEnable": "[if(contains(parameters('blobServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('blobServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                  "diagnosticWorkspaceId": "[if(contains(parameters('blobServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('blobServices').diagnosticWorkspaceId), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "2162174421917358102"
                    },
                    "name": "Storage Account blob Services",
                    "description": "This module deploys a Storage Account Blob Service.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "automaticSnapshotPolicyEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Automatic Snapshot is enabled if set to true."
                      }
                    },
                    "changeFeedEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. The blob service properties for change feed events. Indicates whether change feed event logging is enabled for the Blob service."
                      }
                    },
                    "changeFeedRetentionInDays": {
                      "type": "int",
                      "defaultValue": 0,
                      "minValue": 0,
                      "maxValue": 146000,
                      "metadata": {
                        "description": "Optional. Indicates whether change feed event logging is enabled for the Blob service. Indicates the duration of changeFeed retention in days. A \"0\" value indicates an infinite retention of the change feed."
                      }
                    },
                    "containerDeleteRetentionPolicyEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. The blob service properties for container soft delete. Indicates whether DeleteRetentionPolicy is enabled."
                      }
                    },
                    "containerDeleteRetentionPolicyDays": {
                      "type": "int",
                      "defaultValue": 7,
                      "minValue": 1,
                      "maxValue": 365,
                      "metadata": {
                        "description": "Optional. Indicates the number of days that the deleted item should be retained."
                      }
                    },
                    "containerDeleteRetentionPolicyAllowPermanentDelete": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used with blob restore policy. This property only applies to blob service and does not apply to containers or file share."
                      }
                    },
                    "corsRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Blob service."
                      }
                    },
                    "defaultServiceVersion": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Indicates the default version to use for requests to the Blob service if an incoming request's version is not specified. Possible values include version 2008-10-27 and all more recent versions."
                      }
                    },
                    "deleteRetentionPolicyEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. The blob service properties for blob soft delete."
                      }
                    },
                    "deleteRetentionPolicyDays": {
                      "type": "int",
                      "defaultValue": 7,
                      "minValue": 1,
                      "maxValue": 365,
                      "metadata": {
                        "description": "Optional. Indicates the number of days that the deleted blob should be retained."
                      }
                    },
                    "deleteRetentionPolicyAllowPermanentDelete": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used with blob restore policy. This property only applies to blob service and does not apply to containers or file share."
                      }
                    },
                    "isVersioningEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Use versioning to automatically maintain previous versions of your blobs."
                      }
                    },
                    "lastAccessTimeTrackingPolicyEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. The blob service property to configure last access time based tracking policy. When set to true last access time based tracking is enabled."
                      }
                    },
                    "restorePolicyEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. The blob service properties for blob restore policy. If point-in-time restore is enabled, then versioning, change feed, and blob soft delete must also be enabled."
                      }
                    },
                    "restorePolicyDays": {
                      "type": "int",
                      "defaultValue": 6,
                      "minValue": 1,
                      "metadata": {
                        "description": "Optional. how long this blob can be restored. It should be less than DeleteRetentionPolicy days."
                      }
                    },
                    "containers": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Blob containers to create."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of a log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "allLogs"
                      ],
                      "allowedValues": [
                        "",
                        "allLogs",
                        "StorageRead",
                        "StorageWrite",
                        "StorageDelete"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "Transaction"
                      ],
                      "allowedValues": [
                        "Transaction"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogsSpecified",
                        "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), ''))))))]",
                        "input": {
                          "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), '')))))[copyIndex('diagnosticsLogsSpecified')]]",
                          "enabled": true
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true
                        }
                      }
                    ],
                    "name": "default",
                    "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), if(contains(parameters('diagnosticLogCategoriesToEnable'), ''), createArray(), variables('diagnosticsLogsSpecified')))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                      "properties": {
                        "automaticSnapshotPolicyEnabled": "[parameters('automaticSnapshotPolicyEnabled')]",
                        "changeFeed": {
                          "enabled": "[parameters('changeFeedEnabled')]",
                          "retentionInDays": "[if(equals(parameters('changeFeedEnabled'), true()), if(not(equals(parameters('changeFeedRetentionInDays'), 0)), parameters('changeFeedRetentionInDays'), null()), null())]"
                        },
                        "containerDeleteRetentionPolicy": {
                          "enabled": "[parameters('containerDeleteRetentionPolicyEnabled')]",
                          "days": "[if(equals(parameters('containerDeleteRetentionPolicyEnabled'), true()), parameters('containerDeleteRetentionPolicyDays'), null())]",
                          "allowPermanentDelete": "[if(equals(parameters('containerDeleteRetentionPolicyEnabled'), true()), parameters('containerDeleteRetentionPolicyAllowPermanentDelete'), null())]"
                        },
                        "cors": {
                          "corsRules": "[parameters('corsRules')]"
                        },
                        "defaultServiceVersion": "[if(not(empty(parameters('defaultServiceVersion'))), parameters('defaultServiceVersion'), null())]",
                        "deleteRetentionPolicy": {
                          "enabled": "[parameters('deleteRetentionPolicyEnabled')]",
                          "days": "[if(equals(parameters('deleteRetentionPolicyEnabled'), true()), parameters('deleteRetentionPolicyDays'), null())]",
                          "allowPermanentDelete": "[if(and(parameters('deleteRetentionPolicyEnabled'), parameters('deleteRetentionPolicyAllowPermanentDelete')), true(), null())]"
                        },
                        "isVersioningEnabled": "[parameters('isVersioningEnabled')]",
                        "lastAccessTimeTrackingPolicy": {
                          "enable": "[parameters('lastAccessTimeTrackingPolicyEnabled')]",
                          "name": "[if(equals(parameters('lastAccessTimeTrackingPolicyEnabled'), true()), 'AccessTimeTracking', null())]",
                          "trackingGranularityInDays": "[if(equals(parameters('lastAccessTimeTrackingPolicyEnabled'), true()), 1, null())]"
                        },
                        "restorePolicy": {
                          "enabled": "[parameters('restorePolicyEnabled')]",
                          "days": "[if(equals(parameters('restorePolicyEnabled'), true()), parameters('restorePolicyDays'), null())]"
                        }
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), variables('name'))]",
                      "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', variables('name')))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), variables('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "blobServices_container",
                        "count": "[length(parameters('containers'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Container-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          },
                          "name": {
                            "value": "[parameters('containers')[copyIndex()].name]"
                          },
                          "defaultEncryptionScope": "[if(contains(parameters('containers')[copyIndex()], 'defaultEncryptionScope'), createObject('value', parameters('containers')[copyIndex()].defaultEncryptionScope), createObject('value', ''))]",
                          "denyEncryptionScopeOverride": "[if(contains(parameters('containers')[copyIndex()], 'denyEncryptionScopeOverride'), createObject('value', parameters('containers')[copyIndex()].denyEncryptionScopeOverride), createObject('value', false()))]",
                          "enableNfsV3AllSquash": "[if(contains(parameters('containers')[copyIndex()], 'enableNfsV3AllSquash'), createObject('value', parameters('containers')[copyIndex()].enableNfsV3AllSquash), createObject('value', false()))]",
                          "enableNfsV3RootSquash": "[if(contains(parameters('containers')[copyIndex()], 'enableNfsV3RootSquash'), createObject('value', parameters('containers')[copyIndex()].enableNfsV3RootSquash), createObject('value', false()))]",
                          "immutableStorageWithVersioningEnabled": "[if(contains(parameters('containers')[copyIndex()], 'immutableStorageWithVersioningEnabled'), createObject('value', parameters('containers')[copyIndex()].immutableStorageWithVersioningEnabled), createObject('value', false()))]",
                          "metadata": "[if(contains(parameters('containers')[copyIndex()], 'metadata'), createObject('value', parameters('containers')[copyIndex()].metadata), createObject('value', createObject()))]",
                          "publicAccess": "[if(contains(parameters('containers')[copyIndex()], 'publicAccess'), createObject('value', parameters('containers')[copyIndex()].publicAccess), createObject('value', 'None'))]",
                          "immutabilityPolicyProperties": "[if(contains(parameters('containers')[copyIndex()], 'immutabilityPolicyProperties'), createObject('value', parameters('containers')[copyIndex()].immutabilityPolicyProperties), createObject('value', createObject()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "13912326407122700034"
                            },
                            "name": "Storage Account Blob Containers",
                            "description": "This module deploys a Storage Account Blob Container.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the storage container to deploy."
                              }
                            },
                            "defaultEncryptionScope": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Default the container to use specified encryption scope for all writes."
                              }
                            },
                            "denyEncryptionScopeOverride": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Block override of encryption scope from the container default."
                              }
                            },
                            "enableNfsV3AllSquash": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enable NFSv3 all squash on blob container."
                              }
                            },
                            "enableNfsV3RootSquash": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enable NFSv3 root squash on blob container."
                              }
                            },
                            "immutableStorageWithVersioningEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. This is an immutable property, when set to true it enables object level immutability at the container level. The property is immutable and can only be set to true at the container creation time. Existing containers must undergo a migration process."
                              }
                            },
                            "immutabilityPolicyName": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. Name of the immutable policy."
                              }
                            },
                            "immutabilityPolicyProperties": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Configure immutability policy."
                              }
                            },
                            "metadata": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. A name-value pair to associate with the container as metadata."
                              }
                            },
                            "publicAccess": {
                              "type": "string",
                              "defaultValue": "None",
                              "allowedValues": [
                                "Container",
                                "Blob",
                                "None"
                              ],
                              "metadata": {
                                "description": "Optional. Specifies whether data in the container may be accessed publicly and the level of access."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                              "properties": {
                                "defaultEncryptionScope": "[if(not(empty(parameters('defaultEncryptionScope'))), parameters('defaultEncryptionScope'), null())]",
                                "denyEncryptionScopeOverride": "[if(equals(parameters('denyEncryptionScopeOverride'), true()), parameters('denyEncryptionScopeOverride'), null())]",
                                "enableNfsV3AllSquash": "[if(equals(parameters('enableNfsV3AllSquash'), true()), parameters('enableNfsV3AllSquash'), null())]",
                                "enableNfsV3RootSquash": "[if(equals(parameters('enableNfsV3RootSquash'), true()), parameters('enableNfsV3RootSquash'), null())]",
                                "immutableStorageWithVersioning": "[if(equals(parameters('immutableStorageWithVersioningEnabled'), true()), createObject('enabled', parameters('immutableStorageWithVersioningEnabled')), null())]",
                                "metadata": "[parameters('metadata')]",
                                "publicAccess": "[parameters('publicAccess')]"
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('immutabilityPolicyProperties')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[parameters('immutabilityPolicyName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "containerName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "immutabilityPeriodSinceCreationInDays": "[if(contains(parameters('immutabilityPolicyProperties'), 'immutabilityPeriodSinceCreationInDays'), createObject('value', parameters('immutabilityPolicyProperties').immutabilityPeriodSinceCreationInDays), createObject('value', 365))]",
                                  "allowProtectedAppendWrites": "[if(contains(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWrites'), createObject('value', parameters('immutabilityPolicyProperties').allowProtectedAppendWrites), createObject('value', true()))]",
                                  "allowProtectedAppendWritesAll": "[if(contains(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWritesAll'), createObject('value', parameters('immutabilityPolicyProperties').allowProtectedAppendWritesAll), createObject('value', true()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.25.53.49325",
                                      "templateHash": "10329548264889228160"
                                    },
                                    "name": "Storage Account Blob Container Immutability Policies",
                                    "description": "This module deploys a Storage Account Blob Container Immutability Policy.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "containerName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent container to apply the policy to. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "immutabilityPeriodSinceCreationInDays": {
                                      "type": "int",
                                      "defaultValue": 365,
                                      "metadata": {
                                        "description": "Optional. The immutability period for the blobs in the container since the policy creation, in days."
                                      }
                                    },
                                    "allowProtectedAppendWrites": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API."
                                      }
                                    },
                                    "allowProtectedAppendWritesAll": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to both \"Append and Block Blobs\" while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. The \"allowProtectedAppendWrites\" and \"allowProtectedAppendWritesAll\" properties are mutually exclusive."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}/{1}/{2}/{3}', parameters('storageAccountName'), 'default', parameters('containerName'), 'default')]",
                                      "properties": {
                                        "immutabilityPeriodSinceCreationInDays": "[parameters('immutabilityPeriodSinceCreationInDays')]",
                                        "allowProtectedAppendWrites": "[parameters('allowProtectedAppendWrites')]",
                                        "allowProtectedAppendWritesAll": "[parameters('allowProtectedAppendWritesAll')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed immutability policy."
                                      },
                                      "value": "default"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed immutability policy."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies', parameters('storageAccountName'), 'default', parameters('containerName'), 'default')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed immutability policy."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), 'default', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed container."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed container."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), 'default', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed container."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed blob service."
                      },
                      "value": "[variables('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed blob service."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), variables('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed blob service."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('fileServices')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Storage-FileServices', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "diagnosticStorageAccountId": "[if(contains(parameters('fileServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('fileServices').diagnosticStorageAccountId), createObject('value', ''))]",
                  "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('fileServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('fileServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                  "diagnosticEventHubName": "[if(contains(parameters('fileServices'), 'diagnosticEventHubName'), createObject('value', parameters('fileServices').diagnosticEventHubName), createObject('value', ''))]",
                  "diagnosticLogCategoriesToEnable": "[if(contains(parameters('fileServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('fileServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                  "diagnosticMetricsToEnable": "[if(contains(parameters('fileServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('fileServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                  "protocolSettings": "[if(contains(parameters('fileServices'), 'protocolSettings'), createObject('value', parameters('fileServices').protocolSettings), createObject('value', createObject()))]",
                  "shareDeleteRetentionPolicy": "[if(contains(parameters('fileServices'), 'shareDeleteRetentionPolicy'), createObject('value', parameters('fileServices').shareDeleteRetentionPolicy), createObject('value', createObject('enabled', true(), 'days', 7)))]",
                  "shares": "[if(contains(parameters('fileServices'), 'shares'), createObject('value', parameters('fileServices').shares), createObject('value', createArray()))]",
                  "diagnosticWorkspaceId": "[if(contains(parameters('fileServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('fileServices').diagnosticWorkspaceId), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "7732558492459644236"
                    },
                    "name": "Storage Account File Share Services",
                    "description": "This module deploys a Storage Account File Share Service.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. The name of the file service."
                      }
                    },
                    "protocolSettings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Protocol settings for file service."
                      }
                    },
                    "shareDeleteRetentionPolicy": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": true,
                        "days": 7
                      },
                      "metadata": {
                        "description": "Optional. The service properties for soft delete."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of a log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "shares": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. File shares to create."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "allLogs"
                      ],
                      "allowedValues": [
                        "",
                        "allLogs",
                        "StorageRead",
                        "StorageWrite",
                        "StorageDelete"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "Transaction"
                      ],
                      "allowedValues": [
                        "Transaction"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogsSpecified",
                        "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), ''))))))]",
                        "input": {
                          "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), '')))))[copyIndex('diagnosticsLogsSpecified')]]",
                          "enabled": true
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true
                        }
                      }
                    ],
                    "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), if(contains(parameters('diagnosticLogCategoriesToEnable'), ''), createArray(), variables('diagnosticsLogsSpecified')))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts/fileServices",
                      "apiVersion": "2021-09-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                      "properties": {
                        "protocolSettings": "[parameters('protocolSettings')]",
                        "shareDeleteRetentionPolicy": "[parameters('shareDeleteRetentionPolicy')]"
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                      "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "fileServices_shares",
                        "count": "[length(parameters('shares'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-shares-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          },
                          "fileServicesName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('shares')[copyIndex()].name]"
                          },
                          "accessTier": "[if(contains(parameters('shares')[copyIndex()], 'accessTier'), createObject('value', parameters('shares')[copyIndex()].accessTier), if(equals(reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-09-01', 'full').kind, 'FileStorage'), createObject('value', 'Premium'), createObject('value', 'TransactionOptimized')))]",
                          "enabledProtocols": "[if(contains(parameters('shares')[copyIndex()], 'enabledProtocols'), createObject('value', parameters('shares')[copyIndex()].enabledProtocols), createObject('value', 'SMB'))]",
                          "rootSquash": "[if(contains(parameters('shares')[copyIndex()], 'rootSquash'), createObject('value', parameters('shares')[copyIndex()].rootSquash), createObject('value', 'NoRootSquash'))]",
                          "shareQuota": "[if(contains(parameters('shares')[copyIndex()], 'shareQuota'), createObject('value', parameters('shares')[copyIndex()].shareQuota), createObject('value', 5120))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "15385316809100595266"
                            },
                            "name": "Storage Account File Shares",
                            "description": "This module deploys a Storage Account File Share.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "fileServicesName": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Conditional. The name of the parent file service. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the file share to create."
                              }
                            },
                            "accessTier": {
                              "type": "string",
                              "defaultValue": "TransactionOptimized",
                              "allowedValues": [
                                "Premium",
                                "Hot",
                                "Cool",
                                "TransactionOptimized"
                              ],
                              "metadata": {
                                "description": "Conditional. Access tier for specific share. Required if the Storage Account kind is set to FileStorage (should be set to \"Premium\"). GpV2 account can choose between TransactionOptimized (default), Hot, and Cool."
                              }
                            },
                            "shareQuota": {
                              "type": "int",
                              "defaultValue": 5120,
                              "metadata": {
                                "description": "Optional. The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5120 (5TB). For Large File Shares, the maximum size is 102400 (100TB)."
                              }
                            },
                            "enabledProtocols": {
                              "type": "string",
                              "defaultValue": "SMB",
                              "allowedValues": [
                                "NFS",
                                "SMB"
                              ],
                              "metadata": {
                                "description": "Optional. The authentication protocol that is used for the file share. Can only be specified when creating a share."
                              }
                            },
                            "rootSquash": {
                              "type": "string",
                              "defaultValue": "NoRootSquash",
                              "allowedValues": [
                                "AllSquash",
                                "NoRootSquash",
                                "RootSquash"
                              ],
                              "metadata": {
                                "description": "Optional. Permissions for NFS file shares are enforced by the client OS rather than the Azure Files service. Toggling the root squash behavior reduces the rights of the root user for NFS shares."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                              "apiVersion": "2021-09-01",
                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]",
                              "properties": {
                                "accessTier": "[parameters('accessTier')]",
                                "shareQuota": "[parameters('shareQuota')]",
                                "rootSquash": "[if(equals(parameters('enabledProtocols'), 'NFS'), parameters('rootSquash'), null())]",
                                "enabledProtocols": "[parameters('enabledProtocols')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed file share."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed file share."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed file share."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed file share service."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed file share service."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed file share service."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('queueServices')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Storage-QueueServices', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "diagnosticStorageAccountId": "[if(contains(parameters('queueServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('queueServices').diagnosticStorageAccountId), createObject('value', ''))]",
                  "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('queueServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('queueServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                  "diagnosticEventHubName": "[if(contains(parameters('queueServices'), 'diagnosticEventHubName'), createObject('value', parameters('queueServices').diagnosticEventHubName), createObject('value', ''))]",
                  "diagnosticLogCategoriesToEnable": "[if(contains(parameters('queueServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('queueServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                  "diagnosticMetricsToEnable": "[if(contains(parameters('queueServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('queueServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                  "queues": "[if(contains(parameters('queueServices'), 'queues'), createObject('value', parameters('queueServices').queues), createObject('value', createArray()))]",
                  "diagnosticWorkspaceId": "[if(contains(parameters('queueServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('queueServices').diagnosticWorkspaceId), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "14240051223254800231"
                    },
                    "name": "Storage Account Queue Services",
                    "description": "This module deploys a Storage Account Queue Service.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "queues": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Queues to create."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of a log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "allLogs"
                      ],
                      "allowedValues": [
                        "",
                        "allLogs",
                        "StorageRead",
                        "StorageWrite",
                        "StorageDelete"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "Transaction"
                      ],
                      "allowedValues": [
                        "Transaction"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogsSpecified",
                        "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), ''))))))]",
                        "input": {
                          "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), '')))))[copyIndex('diagnosticsLogsSpecified')]]",
                          "enabled": true
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true
                        }
                      }
                    ],
                    "name": "default",
                    "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), if(contains(parameters('diagnosticLogCategoriesToEnable'), ''), createArray(), variables('diagnosticsLogsSpecified')))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts/queueServices",
                      "apiVersion": "2021-09-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                      "properties": {}
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}', parameters('storageAccountName'), variables('name'))]",
                      "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', variables('name')))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), variables('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "queueServices_queues",
                        "count": "[length(parameters('queues'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Queue-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          },
                          "name": {
                            "value": "[parameters('queues')[copyIndex()].name]"
                          },
                          "metadata": "[if(contains(parameters('queues')[copyIndex()], 'metadata'), createObject('value', parameters('queues')[copyIndex()].metadata), createObject('value', createObject()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "7859232960191287347"
                            },
                            "name": "Storage Account Queues",
                            "description": "This module deploys a Storage Account Queue.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the storage queue to deploy."
                              }
                            },
                            "metadata": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Required. A name-value pair that represents queue metadata."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
                              "apiVersion": "2021-09-01",
                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                              "properties": {
                                "metadata": "[parameters('metadata')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed queue."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed queue."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), 'default', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed queue."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed file share service."
                      },
                      "value": "[variables('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed file share service."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), variables('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed file share service."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('tableServices')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Storage-TableServices', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "diagnosticStorageAccountId": "[if(contains(parameters('tableServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('tableServices').diagnosticStorageAccountId), createObject('value', ''))]",
                  "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('tableServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('tableServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                  "diagnosticEventHubName": "[if(contains(parameters('tableServices'), 'diagnosticEventHubName'), createObject('value', parameters('tableServices').diagnosticEventHubName), createObject('value', ''))]",
                  "diagnosticLogCategoriesToEnable": "[if(contains(parameters('tableServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('tableServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                  "diagnosticMetricsToEnable": "[if(contains(parameters('tableServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('tableServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                  "tables": "[if(contains(parameters('tableServices'), 'tables'), createObject('value', parameters('tableServices').tables), createObject('value', createArray()))]",
                  "diagnosticWorkspaceId": "[if(contains(parameters('tableServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('tableServices').diagnosticWorkspaceId), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "4057101197618460427"
                    },
                    "name": "Storage Account Table Services",
                    "description": "This module deploys a Storage Account Table Service.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "tables": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. tables to create."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of a log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "allLogs"
                      ],
                      "allowedValues": [
                        "",
                        "allLogs",
                        "StorageRead",
                        "StorageWrite",
                        "StorageDelete"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "Transaction"
                      ],
                      "allowedValues": [
                        "Transaction"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogsSpecified",
                        "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), ''))))))]",
                        "input": {
                          "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), '')))))[copyIndex('diagnosticsLogsSpecified')]]",
                          "enabled": true
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true
                        }
                      }
                    ],
                    "name": "default",
                    "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), if(contains(parameters('diagnosticLogCategoriesToEnable'), ''), createArray(), variables('diagnosticsLogsSpecified')))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts/tableServices",
                      "apiVersion": "2021-09-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                      "properties": {}
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}', parameters('storageAccountName'), variables('name'))]",
                      "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', variables('name')))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), variables('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "tableServices_tables",
                        "count": "[length(parameters('tables'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Table-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('tables')[copyIndex()]]"
                          },
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "10769278574628832480"
                            },
                            "name": "Storage Account Table",
                            "description": "This module deploys a Storage Account Table.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the table."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
                              "apiVersion": "2021-09-01",
                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]"
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed file share service."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed file share service."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), 'default', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed file share service."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed table service."
                      },
                      "value": "[variables('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed table service."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), variables('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed table service."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed storage account."
              },
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed storage account."
              },
              "value": "[parameters('name')]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed storage account."
              },
              "value": "[resourceGroup().name]"
            },
            "primaryBlobEndpoint": {
              "type": "string",
              "metadata": {
                "description": "The primary blob endpoint reference if blob services are deployed."
              },
              "value": "[if(and(not(empty(parameters('blobServices'))), contains(parameters('blobServices'), 'containers')), reference(format('Microsoft.Storage/storageAccounts/{0}', parameters('name')), '2019-04-01').primaryEndpoints.blob, '')]"
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2022-09-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2022-09-01', 'full').identity.principalId, '')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2022-09-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('imageBuildResourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-Definition-Validation-{1}', variables('depPrefix'), parameters('timeStamp')))]"
      ]
    },
    {
      "condition": "[variables('collectLogs')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}RoleAssign-MI-BlobDataContr-BuildRG-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "resourceGroup": "[variables('imageBuildResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('userAssignedIdentityResourceId'), '/'))), '2023-01-31').principalId]"
          },
          "roleDefinitionId": {
            "value": "ba92f5b4-2d11-453d-a403-e96b0029c9fe"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "18439070699875796729"
            },
            "name": "Role Assignments (Resource Group scope)",
            "description": "This module deploys a Role Assignment at a Resource Group scope.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "roleDefinitionId": {
              "type": "string",
              "metadata": {
                "description": "Required. You can provide either the role definition GUID or its fully qualified ID in the following format: \\'/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11\\'.\r\nYou can find the GUIDs in the ID column on the table at https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles.\r\n"
              }
            },
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
              }
            },
            "resourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Optional. Name of the Resource Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
              }
            },
            "subscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
              }
            },
            "description": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The description of the role assignment."
              }
            },
            "delegatedManagedIdentityResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. ID of the delegated managed identity resource."
              }
            },
            "condition": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
              }
            },
            "conditionVersion": {
              "type": "string",
              "defaultValue": "2.0",
              "allowedValues": [
                "2.0"
              ],
              "metadata": {
                "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
              }
            },
            "principalType": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "ServicePrincipal",
                "Group",
                "User",
                "ForeignGroup",
                "Device",
                ""
              ],
              "metadata": {
                "description": "Optional. The principal type of the assigned principal ID."
              }
            }
          },
          "variables": {
            "roleDefinitionIdVar": "[if(contains(parameters('roleDefinitionId'), '/providers/Microsoft.Authorization/roleDefinitions/'), parameters('roleDefinitionId'), format('/providers/Microsoft.Authorization/roleDefinitions/{0}', parameters('roleDefinitionId')))]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
              "properties": {
                "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                "principalId": "[parameters('principalId')]",
                "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The GUID of the Role Assignment."
              },
              "value": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Role Assignment."
              },
              "value": "[resourceId('Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the role assignment was applied at."
              },
              "value": "[resourceGroup().name]"
            },
            "scope": {
              "type": "string",
              "metadata": {
                "description": "The scope this Role Assignment applies to."
              },
              "value": "[resourceGroup().id]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('imageBuildResourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}Image-VM-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "resourceGroup": "[variables('imageBuildResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location]"
          },
          "name": {
            "value": "[variables('imageVmName')]"
          },
          "adminPassword": {
            "value": "[variables('adminPw')]"
          },
          "adminUsername": {
            "value": "[variables('adminUserName')]"
          },
          "bootDiagnostics": {
            "value": false
          },
          "encryptionAtHost": {
            "value": "[parameters('encryptionAtHost')]"
          },
          "imageReference": "[if(empty(parameters('customSourceImageResourceId')), createObject('value', createObject('publisher', parameters('publisher'), 'offer', parameters('offer'), 'sku', parameters('sku'), 'version', 'latest')), createObject('value', createObject('id', parameters('customSourceImageResourceId'))))]",
          "nicConfigurations": {
            "value": [
              {
                "enabledAcceleratedNetworking": "[parameters('imageDefinitionIsAcceleratedNetworkSupported')]",
                "deleteOption": "Delete",
                "ipConfigurations": [
                  {
                    "name": "ipconfig01",
                    "subnetResourceId": "[parameters('subnetResourceId')]"
                  }
                ],
                "nicSuffix": "-nic-01"
              }
            ]
          },
          "osDisk": {
            "value": {
              "caching": "None",
              "createOption": "fromImage",
              "deleteOption": "Delete",
              "diskSizeGB": "128",
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              }
            }
          },
          "osType": {
            "value": "Windows"
          },
          "securityType": "[if(or(equals(if(empty(parameters('imageDefinitionResourceId')), parameters('imageDefinitionSecurityType'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-Definition-Validation-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.value.value.securityType), 'TrustedLaunch'), equals(if(empty(parameters('imageDefinitionResourceId')), parameters('imageDefinitionSecurityType'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-Definition-Validation-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.value.value.securityType), 'ConfidentialVM')), if(empty(parameters('imageDefinitionResourceId')), createObject('value', parameters('imageDefinitionSecurityType')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-Definition-Validation-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.value.value.securityType)), createObject('value', 'Standard'))]",
          "secureBootEnabled": "[if(equals(if(or(equals(if(empty(parameters('imageDefinitionResourceId')), parameters('imageDefinitionSecurityType'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-Definition-Validation-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.value.value.securityType), 'TrustedLaunch'), equals(if(empty(parameters('imageDefinitionResourceId')), parameters('imageDefinitionSecurityType'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-Definition-Validation-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.value.value.securityType), 'ConfidentialVM')), if(empty(parameters('imageDefinitionResourceId')), parameters('imageDefinitionSecurityType'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-Definition-Validation-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.value.value.securityType), 'Standard'), 'TrustedLaunch'), createObject('value', true()), createObject('value', false()))]",
          "vTpmEnabled": "[if(equals(if(or(equals(if(empty(parameters('imageDefinitionResourceId')), parameters('imageDefinitionSecurityType'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-Definition-Validation-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.value.value.securityType), 'TrustedLaunch'), equals(if(empty(parameters('imageDefinitionResourceId')), parameters('imageDefinitionSecurityType'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-Definition-Validation-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.value.value.securityType), 'ConfidentialVM')), if(empty(parameters('imageDefinitionResourceId')), parameters('imageDefinitionSecurityType'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-Definition-Validation-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.value.value.securityType), 'Standard'), 'TrustedLaunch'), createObject('value', true()), createObject('value', false()))]",
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentities": {
            "value": {
              "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
            }
          },
          "vmSize": {
            "value": "[parameters('vmSize')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "6017932835633854532"
            },
            "name": "Virtual Machines",
            "description": "This module deploys a Virtual Machine with one or multiple NICs and optionally one or multiple public IPs.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "[take(toLower(uniqueString(resourceGroup().name)), 10)]",
              "metadata": {
                "description": "Optional. The name of the virtual machine to be created. You should use a unique prefix to reduce name collisions in Active Directory. If no value is provided, a 10 character long unique string will be generated based on the Resource Group's name."
              }
            },
            "computerName": {
              "type": "string",
              "defaultValue": "[parameters('name')]",
              "metadata": {
                "description": "Optional. Can be used if the computer name needs to be different from the Azure VM resource name. If not used, the resource name will be used as computer name."
              }
            },
            "vmSize": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the size for the VMs."
              }
            },
            "encryptionAtHost": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine. This will enable the encryption for all the disks including Resource/Temp disk at host itself. For security reasons, it is recommended to set encryptionAtHost to True. Restrictions: Cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
              }
            },
            "securityType": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies the SecurityType of the virtual machine. It is set as TrustedLaunch to enable UefiSettings."
              }
            },
            "secureBootEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies whether secure boot should be enabled on the virtual machine. This parameter is part of the UefiSettings. SecurityType should be set to TrustedLaunch to enable UefiSettings."
              }
            },
            "vTpmEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies whether vTPM should be enabled on the virtual machine. This parameter is part of the UefiSettings.  SecurityType should be set to TrustedLaunch to enable UefiSettings."
              }
            },
            "imageReference": {
              "type": "object",
              "metadata": {
                "description": "Required. OS image reference. In case of marketplace images, it's the combination of the publisher, offer, sku, version attributes. In case of custom images it's the resource ID of the custom image."
              }
            },
            "plan": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use."
              }
            },
            "osDisk": {
              "type": "object",
              "metadata": {
                "description": "Required. Specifies the OS disk. For security reasons, it is recommended to specify DiskEncryptionSet into the osDisk object.  Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
              }
            },
            "dataDisks": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specifies the data disks. For security reasons, it is recommended to specify DiskEncryptionSet into the dataDisk object. Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
              }
            },
            "ultraSSDEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled."
              }
            },
            "adminUsername": {
              "type": "securestring",
              "metadata": {
                "description": "Required. Administrator username."
              }
            },
            "adminPassword": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. When specifying a Windows Virtual Machine, this value should be passed."
              }
            },
            "customData": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Custom data associated to the VM, this value will be automatically converted into base64 to account for the expected VM format."
              }
            },
            "certificatesToBeInstalled": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specifies set of certificates that should be installed onto the virtual machine."
              }
            },
            "priority": {
              "type": "string",
              "defaultValue": "Regular",
              "allowedValues": [
                "Regular",
                "Low",
                "Spot"
              ],
              "metadata": {
                "description": "Optional. Specifies the priority for the virtual machine."
              }
            },
            "enableEvictionPolicy": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies the eviction policy for the low priority virtual machine. Will result in 'Deallocate' eviction policy."
              }
            },
            "maxPriceForLowPriorityVm": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies the maximum price you are willing to pay for a low priority VM/VMSS. This price is in US Dollars."
              }
            },
            "dedicatedHostId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies resource ID about the dedicated host that the virtual machine resides in."
              }
            },
            "licenseType": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "Windows_Client",
                "Windows_Server",
                ""
              ],
              "metadata": {
                "description": "Optional. Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system."
              }
            },
            "publicKeys": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The list of SSH public keys used to authenticate with linux based VMs."
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource. The system-assigned managed identity will automatically be enabled if extensionAadJoinConfig.enabled = \"True\"."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "bootDiagnostics": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Whether boot diagnostics should be enabled on the Virtual Machine. Boot diagnostics will be enabled with a managed storage account if no bootDiagnosticsStorageAccountName value is provided. If bootDiagnostics and bootDiagnosticsStorageAccountName values are not provided, boot diagnostics will be disabled."
              }
            },
            "bootDiagnosticStorageAccountName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Custom storage account used to store boot diagnostic information. Boot diagnostics will be enabled with a custom storage account if a value is provided."
              }
            },
            "bootDiagnosticStorageAccountUri": {
              "type": "string",
              "defaultValue": "[format('.blob.{0}/', environment().suffixes.storage)]",
              "metadata": {
                "description": "Optional. Storage account boot diagnostic base URI."
              }
            },
            "proximityPlacementGroupResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of a proximity placement group."
              }
            },
            "availabilitySetResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of an availability set. Cannot be used in combination with availability zone nor scale set."
              }
            },
            "availabilityZone": {
              "type": "int",
              "defaultValue": 0,
              "allowedValues": [
                0,
                1,
                2,
                3
              ],
              "metadata": {
                "description": "Optional. If set to 1, 2 or 3, the availability zone for all VMs is hardcoded to that value. If zero, then availability zones is not used. Cannot be used in combination with availability set nor scale set."
              }
            },
            "nicConfigurations": {
              "type": "array",
              "metadata": {
                "description": "Required. Configures NICs and PIPs."
              }
            },
            "pipDiagnosticSettingsName": {
              "type": "string",
              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "metadata": {
                "description": "Optional. The name of the PIP diagnostic setting, if deployed."
              }
            },
            "pipdiagnosticLogCategoriesToEnable": {
              "type": "array",
              "defaultValue": [
                "allLogs"
              ],
              "allowedValues": [
                "",
                "allLogs",
                "DDoSProtectionNotifications",
                "DDoSMitigationFlowLogs",
                "DDoSMitigationReports"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
              }
            },
            "pipdiagnosticMetricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            },
            "nicDiagnosticSettingsName": {
              "type": "string",
              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "metadata": {
                "description": "Optional. The name of the NIC diagnostic setting, if deployed."
              }
            },
            "nicdiagnosticMetricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            },
            "backupVaultName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Recovery service vault name to add VMs to backup."
              }
            },
            "backupVaultResourceGroup": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Optional. Resource group of the backup recovery service vault. If not provided the current resource group name is considered by default."
              }
            },
            "backupPolicyName": {
              "type": "string",
              "defaultValue": "DefaultPolicy",
              "metadata": {
                "description": "Optional. Backup policy the VMs should be using for backup. If not provided, it will use the DefaultPolicy from the backup recovery service vault."
              }
            },
            "allowExtensionOperations": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine."
              }
            },
            "extensionDomainJoinPassword": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Required if name is specified. Password of the user specified in user parameter."
              }
            },
            "extensionDomainJoinConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Domain Join] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionAadJoinConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [AAD Join] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionAntiMalwareConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Anti Malware] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionMonitoringAgentConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Monitoring Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "monitoringWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the monitoring log analytics workspace. Must be set when extensionMonitoringAgentConfig is set to true."
              }
            },
            "extensionDependencyAgentConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Dependency Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionNetworkWatcherAgentConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Network Watcher Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionAzureDiskEncryptionConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Azure Disk Encryption] extension. Must at least contain the [\"enabled\": true] property to be executed. Restrictions: Cannot be enabled on disks that have encryption at host enabled. Managed disks encrypted using Azure Disk Encryption cannot be encrypted using customer-managed keys."
              }
            },
            "extensionDSCConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Desired State Configuration] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionCustomScriptConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false,
                "fileData": []
              },
              "metadata": {
                "description": "Optional. The configuration for the [Custom Script] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionCustomScriptProtectedSetting": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "diagnosticWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic log analytics workspace."
              }
            },
            "diagnosticEventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "diagnosticEventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "baseTime": {
              "type": "string",
              "defaultValue": "[utcNow('u')]",
              "metadata": {
                "description": "Generated. Do not provide a value! This date value is used to generate a registration token."
              }
            },
            "sasTokenValidityLength": {
              "type": "string",
              "defaultValue": "PT8H",
              "metadata": {
                "description": "Optional. SAS token validity length to use to download files from storage accounts. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the SAS token will be valid for 8 hours."
              }
            },
            "osType": {
              "type": "string",
              "allowedValues": [
                "Windows",
                "Linux"
              ],
              "metadata": {
                "description": "Required. The chosen OS type."
              }
            },
            "disablePasswordAuthentication": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies whether password authentication should be disabled."
              }
            },
            "provisionVMAgent": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later."
              }
            },
            "enableAutomaticUpdates": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. When patchMode is set to Manual, this parameter must be set to false. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning."
              }
            },
            "patchMode": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "AutomaticByPlatform",
                "AutomaticByOS",
                "Manual",
                "ImageDefault",
                ""
              ],
              "metadata": {
                "description": "Optional. VM guest patching orchestration mode. 'AutomaticByOS' & 'Manual' are for Windows only, 'ImageDefault' for Linux only. Refer to 'https://learn.microsoft.com/en-us/azure/virtual-machines/automatic-vm-guest-patching'."
              }
            },
            "patchAssessmentMode": {
              "type": "string",
              "defaultValue": "ImageDefault",
              "allowedValues": [
                "AutomaticByPlatform",
                "ImageDefault"
              ],
              "metadata": {
                "description": "Optional. VM guest patching assessment mode. Set it to 'AutomaticByPlatform' to enable automatically check for updates every 24 hours."
              }
            },
            "timeZone": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies the time zone of the virtual machine. e.g. 'Pacific Standard Time'. Possible values can be `TimeZoneInfo.id` value from time zones returned by `TimeZoneInfo.GetSystemTimeZones`."
              }
            },
            "additionalUnattendContent": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. - AdditionalUnattendContent object."
              }
            },
            "winRM": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell. - WinRMConfiguration object."
              }
            },
            "configurationProfile": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesProduction",
                "/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesDevTest",
                ""
              ],
              "metadata": {
                "description": "Required. The configuration profile of automanage."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "publicKeysFormatted",
                "count": "[length(parameters('publicKeys'))]",
                "input": {
                  "path": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].path]",
                  "keyData": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].keyData]"
                }
              }
            ],
            "linuxConfiguration": {
              "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]",
              "ssh": {
                "publicKeys": "[variables('publicKeysFormatted')]"
              },
              "provisionVMAgent": "[parameters('provisionVMAgent')]",
              "patchSettings": "[if(and(parameters('provisionVMAgent'), or(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), equals(toLower(parameters('patchMode')), toLower('ImageDefault')))), createObject('patchMode', parameters('patchMode'), 'assessmentMode', parameters('patchAssessmentMode')), null())]"
            },
            "windowsConfiguration": {
              "provisionVMAgent": "[parameters('provisionVMAgent')]",
              "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
              "patchSettings": "[if(and(parameters('provisionVMAgent'), or(or(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), equals(toLower(parameters('patchMode')), toLower('AutomaticByOS'))), equals(toLower(parameters('patchMode')), toLower('Manual')))), createObject('patchMode', parameters('patchMode'), 'assessmentMode', parameters('patchAssessmentMode')), null())]",
              "timeZone": "[if(empty(parameters('timeZone')), null(), parameters('timeZone'))]",
              "additionalUnattendContent": "[if(empty(parameters('additionalUnattendContent')), null(), parameters('additionalUnattendContent'))]",
              "winRM": "[if(not(empty(parameters('winRM'))), createObject('listeners', parameters('winRM')), null())]"
            },
            "accountSasProperties": {
              "signedServices": "b",
              "signedPermission": "r",
              "signedExpiry": "[dateTimeAdd(parameters('baseTime'), parameters('sasTokenValidityLength'))]",
              "signedResourceTypes": "o",
              "signedProtocol": "https"
            },
            "identityType": "[if(if(parameters('extensionAadJoinConfig').enabled, true(), parameters('systemAssignedIdentity')), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "identity": "[variables('identity')]",
              "tags": "[parameters('tags')]",
              "zones": "[if(not(equals(parameters('availabilityZone'), 0)), array(parameters('availabilityZone')), null())]",
              "plan": "[if(not(empty(parameters('plan'))), parameters('plan'), null())]",
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "securityProfile": {
                  "encryptionAtHost": "[if(parameters('encryptionAtHost'), parameters('encryptionAtHost'), null())]",
                  "securityType": "[parameters('securityType')]",
                  "uefiSettings": "[if(equals(parameters('securityType'), 'TrustedLaunch'), createObject('secureBootEnabled', parameters('secureBootEnabled'), 'vTpmEnabled', parameters('vTpmEnabled')), null())]"
                },
                "storageProfile": {
                  "copy": [
                    {
                      "name": "dataDisks",
                      "count": "[length(parameters('dataDisks'))]",
                      "input": {
                        "lun": "[copyIndex('dataDisks')]",
                        "name": "[format('{0}-disk-data-{1}', parameters('name'), padLeft(add(copyIndex('dataDisks'), 1), 2, '0'))]",
                        "diskSizeGB": "[parameters('dataDisks')[copyIndex('dataDisks')].diskSizeGB]",
                        "createOption": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'createOption'), parameters('dataDisks')[copyIndex('dataDisks')].createOption, 'Empty')]",
                        "deleteOption": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'deleteOption'), parameters('dataDisks')[copyIndex('dataDisks')].deleteOption, 'Delete')]",
                        "caching": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'caching'), parameters('dataDisks')[copyIndex('dataDisks')].caching, 'ReadOnly')]",
                        "managedDisk": {
                          "storageAccountType": "[parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.storageAccountType]",
                          "diskEncryptionSet": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')].managedDisk, 'diskEncryptionSet'), createObject('id', parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.diskEncryptionSet.id), null())]"
                        }
                      }
                    }
                  ],
                  "imageReference": "[parameters('imageReference')]",
                  "osDisk": {
                    "name": "[format('{0}-disk-os-01', parameters('name'))]",
                    "createOption": "[if(contains(parameters('osDisk'), 'createOption'), parameters('osDisk').createOption, 'FromImage')]",
                    "deleteOption": "[if(contains(parameters('osDisk'), 'deleteOption'), parameters('osDisk').deleteOption, 'Delete')]",
                    "diskSizeGB": "[parameters('osDisk').diskSizeGB]",
                    "caching": "[if(contains(parameters('osDisk'), 'caching'), parameters('osDisk').caching, 'ReadOnly')]",
                    "managedDisk": {
                      "storageAccountType": "[parameters('osDisk').managedDisk.storageAccountType]",
                      "diskEncryptionSet": "[if(contains(parameters('osDisk').managedDisk, 'diskEncryptionSet'), createObject('id', parameters('osDisk').managedDisk.diskEncryptionSet.id), null())]"
                    }
                  }
                },
                "additionalCapabilities": {
                  "ultraSSDEnabled": "[parameters('ultraSSDEnabled')]"
                },
                "osProfile": {
                  "computerName": "[parameters('computerName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "customData": "[if(not(empty(parameters('customData'))), base64(parameters('customData')), null())]",
                  "windowsConfiguration": "[if(equals(parameters('osType'), 'Windows'), variables('windowsConfiguration'), null())]",
                  "linuxConfiguration": "[if(equals(parameters('osType'), 'Linux'), variables('linuxConfiguration'), null())]",
                  "secrets": "[parameters('certificatesToBeInstalled')]",
                  "allowExtensionOperations": "[parameters('allowExtensionOperations')]"
                },
                "networkProfile": {
                  "copy": [
                    {
                      "name": "networkInterfaces",
                      "count": "[length(parameters('nicConfigurations'))]",
                      "input": {
                        "properties": {
                          "deleteOption": "[if(contains(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'deleteOption'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].deleteOption, 'Delete')]",
                          "primary": "[if(equals(copyIndex('networkInterfaces'), 0), true(), false())]"
                        },
                        "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', parameters('name'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].nicSuffix))]"
                      }
                    }
                  ]
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), true(), parameters('bootDiagnostics'))]",
                    "storageUri": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), format('https://{0}{1}', parameters('bootDiagnosticStorageAccountName'), parameters('bootDiagnosticStorageAccountUri')), null())]"
                  }
                },
                "availabilitySet": "[if(not(empty(parameters('availabilitySetResourceId'))), createObject('id', parameters('availabilitySetResourceId')), null())]",
                "proximityPlacementGroup": "[if(not(empty(parameters('proximityPlacementGroupResourceId'))), createObject('id', parameters('proximityPlacementGroupResourceId')), null())]",
                "priority": "[parameters('priority')]",
                "evictionPolicy": "[if(parameters('enableEvictionPolicy'), 'Deallocate', null())]",
                "billingProfile": "[if(and(not(empty(parameters('priority'))), not(empty(parameters('maxPriceForLowPriorityVm')))), createObject('maxPrice', parameters('maxPriceForLowPriorityVm')), null())]",
                "host": "[if(not(empty(parameters('dedicatedHostId'))), createObject('id', parameters('dedicatedHostId')), null())]",
                "licenseType": "[if(not(empty(parameters('licenseType'))), parameters('licenseType'), null())]"
              },
              "dependsOn": [
                "vm_nic"
              ]
            },
            {
              "condition": "[not(empty(parameters('configurationProfile')))]",
              "type": "Microsoft.Automanage/configurationProfileAssignments",
              "apiVersion": "2021-04-30-preview",
              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
              "name": "default",
              "properties": {
                "configurationProfile": "[parameters('configurationProfile')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "vm_nic",
                "count": "[length(parameters('nicConfigurations'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-Nic-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "networkInterfaceName": {
                    "value": "[format('{0}{1}', parameters('name'), parameters('nicConfigurations')[copyIndex()].nicSuffix)]"
                  },
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableIPForwarding": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableIPForwarding'), if(not(empty(parameters('nicConfigurations')[copyIndex()].enableIPForwarding)), createObject('value', parameters('nicConfigurations')[copyIndex()].enableIPForwarding), createObject('value', false())), createObject('value', false()))]",
                  "enableAcceleratedNetworking": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableAcceleratedNetworking'), createObject('value', parameters('nicConfigurations')[copyIndex()].enableAcceleratedNetworking), createObject('value', true()))]",
                  "dnsServers": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'dnsServers'), if(not(empty(parameters('nicConfigurations')[copyIndex()].dnsServers)), createObject('value', parameters('nicConfigurations')[copyIndex()].dnsServers), createObject('value', createArray())), createObject('value', createArray()))]",
                  "networkSecurityGroupResourceId": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'networkSecurityGroupResourceId'), createObject('value', parameters('nicConfigurations')[copyIndex()].networkSecurityGroupResourceId), createObject('value', ''))]",
                  "ipConfigurations": {
                    "value": "[parameters('nicConfigurations')[copyIndex()].ipConfigurations]"
                  },
                  "diagnosticStorageAccountId": {
                    "value": "[parameters('diagnosticStorageAccountId')]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('diagnosticWorkspaceId')]"
                  },
                  "diagnosticEventHubAuthorizationRuleId": {
                    "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                  },
                  "diagnosticEventHubName": {
                    "value": "[parameters('diagnosticEventHubName')]"
                  },
                  "pipDiagnosticSettingsName": {
                    "value": "[parameters('pipDiagnosticSettingsName')]"
                  },
                  "nicDiagnosticSettingsName": {
                    "value": "[parameters('nicDiagnosticSettingsName')]"
                  },
                  "pipdiagnosticMetricsToEnable": {
                    "value": "[parameters('pipdiagnosticMetricsToEnable')]"
                  },
                  "pipdiagnosticLogCategoriesToEnable": {
                    "value": "[parameters('pipdiagnosticLogCategoriesToEnable')]"
                  },
                  "nicDiagnosticMetricsToEnable": {
                    "value": "[parameters('nicdiagnosticMetricsToEnable')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "13527221761587781746"
                    }
                  },
                  "parameters": {
                    "networkInterfaceName": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "enableIPForwarding": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableAcceleratedNetworking": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "dnsServers": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "networkSecurityGroupResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The network security group (NSG) to attach to the network interface."
                      }
                    },
                    "ipConfigurations": {
                      "type": "array"
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string"
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string"
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string"
                    },
                    "diagnosticEventHubName": {
                      "type": "string"
                    },
                    "pipdiagnosticMetricsToEnable": {
                      "type": "array"
                    },
                    "pipdiagnosticLogCategoriesToEnable": {
                      "type": "array"
                    },
                    "nicDiagnosticMetricsToEnable": {
                      "type": "array"
                    },
                    "pipDiagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('virtualMachineName'))]",
                      "metadata": {
                        "description": "Optional. The name of the PIP diagnostic setting, if deployed."
                      }
                    },
                    "nicDiagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('virtualMachineName'))]",
                      "metadata": {
                        "description": "Optional. The name of the NIC diagnostic setting, if deployed."
                      }
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "networkInterface_publicIPAddresses",
                        "count": "[length(parameters('ipConfigurations'))]"
                      },
                      "condition": "[contains(parameters('ipConfigurations')[copyIndex()], 'pipconfiguration')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-publicIP-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurations')[copyIndex()].pipconfiguration.publicIpNameSuffix)]"
                          },
                          "diagnosticEventHubAuthorizationRuleId": {
                            "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                          },
                          "diagnosticEventHubName": {
                            "value": "[parameters('diagnosticEventHubName')]"
                          },
                          "diagnosticLogCategoriesToEnable": {
                            "value": "[parameters('pipdiagnosticLogCategoriesToEnable')]"
                          },
                          "diagnosticMetricsToEnable": {
                            "value": "[parameters('pipdiagnosticMetricsToEnable')]"
                          },
                          "diagnosticSettingsName": {
                            "value": "[parameters('pipDiagnosticSettingsName')]"
                          },
                          "diagnosticStorageAccountId": {
                            "value": "[parameters('diagnosticStorageAccountId')]"
                          },
                          "diagnosticWorkspaceId": {
                            "value": "[parameters('diagnosticWorkspaceId')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "publicIPAddressVersion": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'publicIPAddressVersion'), createObject('value', parameters('ipConfigurations')[copyIndex()].publicIPAddressVersion), createObject('value', 'IPv4'))]",
                          "publicIPAllocationMethod": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'publicIPAllocationMethod'), createObject('value', parameters('ipConfigurations')[copyIndex()].publicIPAllocationMethod), createObject('value', 'Static'))]",
                          "publicIPPrefixResourceId": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'publicIPPrefixResourceId'), createObject('value', parameters('ipConfigurations')[copyIndex()].publicIPPrefixResourceId), createObject('value', ''))]",
                          "skuName": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'skuName'), createObject('value', parameters('ipConfigurations')[copyIndex()].skuName), createObject('value', 'Standard'))]",
                          "skuTier": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'skuTier'), createObject('value', parameters('ipConfigurations')[copyIndex()].skuTier), createObject('value', 'Regional'))]",
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "zones": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'zones'), createObject('value', parameters('ipConfigurations')[copyIndex()].zones), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "6299355001850457425"
                            },
                            "name": "Public IP Addresses",
                            "description": "This module deploys a Public IP Address.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the Public IP Address."
                              }
                            },
                            "publicIPPrefixResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                              }
                            },
                            "publicIPAllocationMethod": {
                              "type": "string",
                              "defaultValue": "Static",
                              "allowedValues": [
                                "Dynamic",
                                "Static"
                              ],
                              "metadata": {
                                "description": "Optional. The public IP address allocation method."
                              }
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "Standard",
                              "allowedValues": [
                                "Basic",
                                "Standard"
                              ],
                              "metadata": {
                                "description": "Optional. Name of a public IP address SKU."
                              }
                            },
                            "skuTier": {
                              "type": "string",
                              "defaultValue": "Regional",
                              "allowedValues": [
                                "Global",
                                "Regional"
                              ],
                              "metadata": {
                                "description": "Optional. Tier of a public IP address SKU."
                              }
                            },
                            "zones": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                              }
                            },
                            "publicIPAddressVersion": {
                              "type": "string",
                              "defaultValue": "IPv4",
                              "allowedValues": [
                                "IPv4",
                                "IPv6"
                              ],
                              "metadata": {
                                "description": "Optional. IP address version."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "domainNameLabel": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                              }
                            },
                            "domainNameLabelScope": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "",
                                "NoReuse",
                                "ResourceGroupReuse",
                                "SubscriptionReuse",
                                "TenantReuse"
                              ],
                              "metadata": {
                                "description": "Optional. The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN."
                              }
                            },
                            "fqdn": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                              }
                            },
                            "reverseFqdn": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "allLogs"
                              ],
                              "allowedValues": [
                                "",
                                "allLogs",
                                "DDoSProtectionNotifications",
                                "DDoSMitigationFlowLogs",
                                "DDoSMitigationReports"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "AllMetrics"
                              ],
                              "allowedValues": [
                                "AllMetrics"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogsSpecified",
                                "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), ''))))))]",
                                "input": {
                                  "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), '')))))[copyIndex('diagnosticsLogsSpecified')]]",
                                  "enabled": true
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true
                                }
                              }
                            ],
                            "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), if(contains(parameters('diagnosticLogCategoriesToEnable'), ''), createArray(), variables('diagnosticsLogsSpecified')))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "[parameters('skuName')]",
                                "tier": "[parameters('skuTier')]"
                              },
                              "zones": "[parameters('zones')]",
                              "properties": {
                                "dnsSettings": "[if(not(empty(parameters('domainNameLabel'))), createObject('domainNameLabel', parameters('domainNameLabel'), 'domainNameLabelScope', parameters('domainNameLabelScope'), 'fqdn', parameters('fqdn'), 'reverseFqdn', parameters('reverseFqdn')), null())]",
                                "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                                "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                                "publicIPPrefix": "[if(not(empty(parameters('publicIPPrefixResourceId'))), createObject('id', parameters('publicIPPrefixResourceId')), null())]",
                                "idleTimeoutInMinutes": 4,
                                "ipTags": []
                              }
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                              "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the public IP address was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the public IP address."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the public IP address."
                              },
                              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                            },
                            "ipAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "The public IP address of the public IP address resource."
                              },
                              "value": "[if(contains(reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2023-04-01'), 'ipAddress'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2023-04-01').ipAddress, '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2023-04-01', 'full').location]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-NetworkInterface', deployment().name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('networkInterfaceName')]"
                          },
                          "ipConfigurations": {
                            "copy": [
                              {
                                "name": "value",
                                "count": "[length(parameters('ipConfigurations'))]",
                                "input": "[createObject('name', if(not(empty(parameters('ipConfigurations')[copyIndex('value')].name)), parameters('ipConfigurations')[copyIndex('value')].name, null()), 'primary', equals(copyIndex('value'), 0), 'privateIPAllocationMethod', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('value')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('value')].privateIPAllocationMethod, null()), null()), 'privateIPAddress', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('value')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('value')].privateIPAddress, null()), null()), 'publicIPAddressResourceId', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'pipconfiguration'), resourceId('Microsoft.Network/publicIPAddresses', format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurations')[copyIndex('value')].pipconfiguration.publicIpNameSuffix)), null()), 'subnetResourceId', parameters('ipConfigurations')[copyIndex('value')].subnetResourceId, 'loadBalancerBackendAddressPools', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerBackendAddressPools'), parameters('ipConfigurations')[copyIndex('value')].loadBalancerBackendAddressPools, null()), 'applicationSecurityGroups', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'applicationSecurityGroups'), parameters('ipConfigurations')[copyIndex('value')].applicationSecurityGroups, null()), 'applicationGatewayBackendAddressPools', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'applicationGatewayBackendAddressPools'), parameters('ipConfigurations')[copyIndex('value')].applicationGatewayBackendAddressPools, null()), 'gatewayLoadBalancer', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'gatewayLoadBalancer'), parameters('ipConfigurations')[copyIndex('value')].gatewayLoadBalancer, null()), 'loadBalancerInboundNatRules', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerInboundNatRules'), parameters('ipConfigurations')[copyIndex('value')].loadBalancerInboundNatRules, null()), 'privateIPAddressVersion', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddressVersion'), parameters('ipConfigurations')[copyIndex('value')].privateIPAddressVersion, null()), 'virtualNetworkTaps', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'virtualNetworkTaps'), parameters('ipConfigurations')[copyIndex('value')].virtualNetworkTaps, null()))]"
                              }
                            ]
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "diagnosticEventHubAuthorizationRuleId": {
                            "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                          },
                          "diagnosticEventHubName": {
                            "value": "[parameters('diagnosticEventHubName')]"
                          },
                          "diagnosticStorageAccountId": {
                            "value": "[parameters('diagnosticStorageAccountId')]"
                          },
                          "diagnosticMetricsToEnable": {
                            "value": "[parameters('nicDiagnosticMetricsToEnable')]"
                          },
                          "diagnosticSettingsName": {
                            "value": "[parameters('nicDiagnosticSettingsName')]"
                          },
                          "diagnosticWorkspaceId": {
                            "value": "[parameters('diagnosticWorkspaceId')]"
                          },
                          "dnsServers": "[if(not(empty(parameters('dnsServers'))), createObject('value', parameters('dnsServers')), createObject('value', createArray()))]",
                          "enableAcceleratedNetworking": {
                            "value": "[parameters('enableAcceleratedNetworking')]"
                          },
                          "enableIPForwarding": {
                            "value": "[parameters('enableIPForwarding')]"
                          },
                          "networkSecurityGroupResourceId": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('value', parameters('networkSecurityGroupResourceId')), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "5134080285079659794"
                            },
                            "name": "Network Interface",
                            "description": "This module deploys a Network Interface.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the network interface."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableIPForwarding": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether IP forwarding is enabled on this network interface."
                              }
                            },
                            "enableAcceleratedNetworking": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If the network interface is accelerated networking enabled."
                              }
                            },
                            "dnsServers": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection."
                              }
                            },
                            "networkSecurityGroupResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The network security group (NSG) to attach to the network interface."
                              }
                            },
                            "auxiliaryMode": {
                              "type": "string",
                              "defaultValue": "None",
                              "allowedValues": [
                                "Floating",
                                "MaxConnections",
                                "None"
                              ],
                              "metadata": {
                                "description": "Optional. Auxiliary mode of Network Interface resource. Not all regions are enabled for Auxiliary Mode Nic."
                              }
                            },
                            "auxiliarySku": {
                              "type": "string",
                              "defaultValue": "None",
                              "allowedValues": [
                                "A1",
                                "A2",
                                "A4",
                                "A8",
                                "None"
                              ],
                              "metadata": {
                                "description": "Optional. Auxiliary sku of Network Interface resource. Not all regions are enabled for Auxiliary Mode Nic."
                              }
                            },
                            "disableTcpStateTracking": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether to disable tcp state tracking. Subscription must be registered for the Microsoft.Network/AllowDisableTcpStateTracking feature before this property can be set to true."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. A list of IPConfigurations of the network interface."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource identifier of log analytics."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "AllMetrics"
                              ],
                              "allowedValues": [
                                "AllMetrics"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkInterfaces",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "ipConfigurations",
                                    "count": "[length(parameters('ipConfigurations'))]",
                                    "input": {
                                      "name": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'name'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].name, format('ipconfig0{0}', add(copyIndex('ipConfigurations'), 1)))]",
                                      "properties": {
                                        "primary": "[if(equals(copyIndex('ipConfigurations'), 0), true(), false())]",
                                        "privateIPAllocationMethod": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod, null()), null())]",
                                        "privateIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress, null()), null())]",
                                        "publicIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'publicIPAddressResourceId'), if(not(equals(parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId, null())), createObject('id', parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId), null()), null())]",
                                        "subnet": {
                                          "id": "[parameters('ipConfigurations')[copyIndex('ipConfigurations')].subnetResourceId]"
                                        },
                                        "loadBalancerBackendAddressPools": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerBackendAddressPools'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].loadBalancerBackendAddressPools, null())]",
                                        "applicationSecurityGroups": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationSecurityGroups'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].applicationSecurityGroups, null())]",
                                        "applicationGatewayBackendAddressPools": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationGatewayBackendAddressPools'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].applicationGatewayBackendAddressPools, null())]",
                                        "gatewayLoadBalancer": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'gatewayLoadBalancer'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].gatewayLoadBalancer, null())]",
                                        "loadBalancerInboundNatRules": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerInboundNatRules'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].loadBalancerInboundNatRules, null())]",
                                        "privateIPAddressVersion": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddressVersion'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddressVersion, null())]",
                                        "virtualNetworkTaps": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'virtualNetworkTaps'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].virtualNetworkTaps, null())]"
                                      }
                                    }
                                  }
                                ],
                                "auxiliaryMode": "[parameters('auxiliaryMode')]",
                                "auxiliarySku": "[parameters('auxiliarySku')]",
                                "disableTcpStateTracking": "[parameters('disableTcpStateTracking')]",
                                "dnsSettings": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]",
                                "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                                "enableIPForwarding": "[parameters('enableIPForwarding')]",
                                "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]"
                              }
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                              "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed resource."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed resource."
                              },
                              "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed resource."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('name')), '2023-04-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "networkInterface_publicIPAddresses"
                      ]
                    }
                  ]
                }
              }
            },
            {
              "condition": "[parameters('extensionAadJoinConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-AADLogin', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "AADLogin"
                  },
                  "publisher": {
                    "value": "Microsoft.Azure.ActiveDirectory"
                  },
                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AADLoginForWindows'), createObject('value', 'AADSSHLoginforLinux'))]",
                  "typeHandlerVersion": "[if(contains(parameters('extensionAadJoinConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAadJoinConfig').typeHandlerVersion), createObject('value', '1.0'))]",
                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAadJoinConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAadJoinConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionAadJoinConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAadJoinConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                  "settings": "[if(contains(parameters('extensionAadJoinConfig'), 'settings'), createObject('value', parameters('extensionAadJoinConfig').settings), createObject('value', createObject()))]",
                  "tags": "[if(contains(parameters('extensionAadJoinConfig'), 'tags'), createObject('value', parameters('extensionAadJoinConfig').tags), createObject('value', createObject()))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "479295742213252376"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionDomainJoinConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "DomainJoin"
                  },
                  "publisher": {
                    "value": "Microsoft.Compute"
                  },
                  "type": {
                    "value": "JsonADDomainExtension"
                  },
                  "typeHandlerVersion": "[if(contains(parameters('extensionDomainJoinConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDomainJoinConfig').typeHandlerVersion), createObject('value', '1.3'))]",
                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDomainJoinConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDomainJoinConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionDomainJoinConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDomainJoinConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                  "settings": {
                    "value": "[parameters('extensionDomainJoinConfig').settings]"
                  },
                  "tags": "[if(contains(parameters('extensionDomainJoinConfig'), 'tags'), createObject('value', parameters('extensionDomainJoinConfig').tags), createObject('value', createObject()))]",
                  "protectedSettings": {
                    "value": {
                      "Password": "[parameters('extensionDomainJoinPassword')]"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "479295742213252376"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionAntiMalwareConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "MicrosoftAntiMalware"
                  },
                  "publisher": {
                    "value": "Microsoft.Azure.Security"
                  },
                  "type": {
                    "value": "IaaSAntimalware"
                  },
                  "typeHandlerVersion": "[if(contains(parameters('extensionAntiMalwareConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAntiMalwareConfig').typeHandlerVersion), createObject('value', '1.3'))]",
                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAntiMalwareConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAntiMalwareConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionAntiMalwareConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAntiMalwareConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                  "settings": {
                    "value": "[parameters('extensionAntiMalwareConfig').settings]"
                  },
                  "tags": "[if(contains(parameters('extensionAntiMalwareConfig'), 'tags'), createObject('value', parameters('extensionAntiMalwareConfig').tags), createObject('value', createObject()))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "479295742213252376"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionMonitoringAgentConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "MicrosoftMonitoringAgent"
                  },
                  "publisher": {
                    "value": "Microsoft.EnterpriseCloud.Monitoring"
                  },
                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'MicrosoftMonitoringAgent'), createObject('value', 'OmsAgentForLinux'))]",
                  "typeHandlerVersion": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionMonitoringAgentConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '1.0'), createObject('value', '1.7')))]",
                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionMonitoringAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionMonitoringAgentConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                  "settings": {
                    "value": {
                      "workspaceId": "[if(not(empty(parameters('monitoringWorkspaceId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').customerId, '')]"
                    }
                  },
                  "tags": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'tags'), createObject('value', parameters('extensionMonitoringAgentConfig').tags), createObject('value', createObject()))]",
                  "protectedSettings": {
                    "value": {
                      "workspaceKey": "[if(not(empty(parameters('monitoringWorkspaceId'))), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').primarySharedKey, '')]"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "479295742213252376"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionDependencyAgentConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "DependencyAgent"
                  },
                  "publisher": {
                    "value": "Microsoft.Azure.Monitoring.DependencyAgent"
                  },
                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'DependencyAgentWindows'), createObject('value', 'DependencyAgentLinux'))]",
                  "typeHandlerVersion": "[if(contains(parameters('extensionDependencyAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDependencyAgentConfig').typeHandlerVersion), createObject('value', '9.5'))]",
                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDependencyAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDependencyAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionDependencyAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDependencyAgentConfig').enableAutomaticUpgrade), createObject('value', true()))]",
                  "tags": "[if(contains(parameters('extensionDependencyAgentConfig'), 'tags'), createObject('value', parameters('extensionDependencyAgentConfig').tags), createObject('value', createObject()))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "479295742213252376"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionNetworkWatcherAgentConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "NetworkWatcherAgent"
                  },
                  "publisher": {
                    "value": "Microsoft.Azure.NetworkWatcher"
                  },
                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'NetworkWatcherAgentWindows'), createObject('value', 'NetworkWatcherAgentLinux'))]",
                  "typeHandlerVersion": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').typeHandlerVersion), createObject('value', '1.4'))]",
                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                  "tags": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'tags'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').tags), createObject('value', createObject()))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "479295742213252376"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionDSCConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "DesiredStateConfiguration"
                  },
                  "publisher": {
                    "value": "Microsoft.Powershell"
                  },
                  "type": {
                    "value": "DSC"
                  },
                  "typeHandlerVersion": "[if(contains(parameters('extensionDSCConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDSCConfig').typeHandlerVersion), createObject('value', '2.77'))]",
                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDSCConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDSCConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionDSCConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDSCConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                  "settings": "[if(contains(parameters('extensionDSCConfig'), 'settings'), createObject('value', parameters('extensionDSCConfig').settings), createObject('value', createObject()))]",
                  "tags": "[if(contains(parameters('extensionDSCConfig'), 'tags'), createObject('value', parameters('extensionDSCConfig').tags), createObject('value', createObject()))]",
                  "protectedSettings": "[if(contains(parameters('extensionDSCConfig'), 'protectedSettings'), createObject('value', parameters('extensionDSCConfig').protectedSettings), createObject('value', createObject()))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "479295742213252376"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionCustomScriptConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "CustomScriptExtension"
                  },
                  "publisher": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'Microsoft.Compute'), createObject('value', 'Microsoft.Azure.Extensions'))]",
                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'CustomScriptExtension'), createObject('value', 'CustomScript'))]",
                  "typeHandlerVersion": "[if(contains(parameters('extensionCustomScriptConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionCustomScriptConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '1.10'), createObject('value', '2.1')))]",
                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionCustomScriptConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionCustomScriptConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionCustomScriptConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionCustomScriptConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                  "settings": {
                    "value": {
                      "copy": [
                        {
                          "name": "fileUris",
                          "count": "[length(parameters('extensionCustomScriptConfig').fileData)]",
                          "input": "[if(contains(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')], 'storageAccountId'), format('{0}?{1}', parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri, listAccountSas(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].storageAccountId, '2019-04-01', variables('accountSasProperties')).accountSasToken), parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri)]"
                        }
                      ]
                    }
                  },
                  "tags": "[if(contains(parameters('extensionCustomScriptConfig'), 'tags'), createObject('value', parameters('extensionCustomScriptConfig').tags), createObject('value', createObject()))]",
                  "protectedSettings": {
                    "value": "[parameters('extensionCustomScriptProtectedSetting')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "479295742213252376"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location'))))]"
              ]
            },
            {
              "condition": "[parameters('extensionAzureDiskEncryptionConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-AzureDiskEncryption', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "AzureDiskEncryption"
                  },
                  "publisher": {
                    "value": "Microsoft.Azure.Security"
                  },
                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzureDiskEncryption'), createObject('value', 'AzureDiskEncryptionForLinux'))]",
                  "typeHandlerVersion": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '2.2'), createObject('value', '1.1')))]",
                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                  "forceUpdateTag": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'forceUpdateTag'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').forceUpdateTag), createObject('value', '1.0'))]",
                  "settings": {
                    "value": "[parameters('extensionAzureDiskEncryptionConfig').settings]"
                  },
                  "tags": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'tags'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').tags), createObject('value', createObject()))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "479295742213252376"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location'))))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location'))))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('backupVaultName')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-Backup', uniqueString(deployment().name, parameters('location')))]",
              "resourceGroup": "[parameters('backupVaultResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[format('vm;iaasvmcontainerv2;{0};{1}', resourceGroup().name, parameters('name'))]"
                  },
                  "policyId": {
                    "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('backupVaultName'), parameters('backupPolicyName'))]"
                  },
                  "protectedItemType": {
                    "value": "Microsoft.Compute/virtualMachines"
                  },
                  "protectionContainerName": {
                    "value": "[format('iaasvmcontainer;iaasvmcontainerv2;{0};{1}', resourceGroup().name, parameters('name'))]"
                  },
                  "recoveryVaultName": {
                    "value": "[parameters('backupVaultName')]"
                  },
                  "sourceResourceId": {
                    "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "15677187951825533891"
                    },
                    "name": "Recovery Service Vaults Protection Container Protected Item",
                    "description": "This module deploys a Recovery Services Vault Protection Container Protected Item.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the resource."
                      }
                    },
                    "protectionContainerName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. Name of the Azure Recovery Service Vault Protection Container. Required if the template is used in a standalone deployment."
                      }
                    },
                    "recoveryVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "protectedItemType": {
                      "type": "string",
                      "allowedValues": [
                        "AzureFileShareProtectedItem",
                        "AzureVmWorkloadSAPAseDatabase",
                        "AzureVmWorkloadSAPHanaDatabase",
                        "AzureVmWorkloadSQLDatabase",
                        "DPMProtectedItem",
                        "GenericProtectedItem",
                        "MabFileFolderProtectedItem",
                        "Microsoft.ClassicCompute/virtualMachines",
                        "Microsoft.Compute/virtualMachines",
                        "Microsoft.Sql/servers/databases"
                      ],
                      "metadata": {
                        "description": "Required. The backup item type."
                      }
                    },
                    "policyId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. ID of the backup policy with which this item is backed up."
                      }
                    },
                    "sourceResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the resource to back up."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                      "apiVersion": "2023-01-01",
                      "name": "[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "protectedItemType": "[parameters('protectedItemType')]",
                        "policyId": "[parameters('policyId')]",
                        "sourceResourceId": "[parameters('sourceResourceId')]"
                      }
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the protected item was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the protected item."
                      },
                      "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems', split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[0], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[1], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[2], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[3])]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The Name of the protected item."
                      },
                      "value": "[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-AADLogin', uniqueString(deployment().name, parameters('location'))))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location'))))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location'))))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location'))))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location'))))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location'))))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location'))))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location'))))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the VM."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the VM."
              },
              "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the VM was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2022-11-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2022-11-01', 'full').identity.principalId, '')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2022-11-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('imageBuildResourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-Definition-Validation-{1}', variables('depPrefix'), parameters('timeStamp')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}Customize-Image-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "resourceGroup": "[variables('imageBuildResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cloud": {
            "value": "[variables('cloud')]"
          },
          "location": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location]"
          },
          "containerName": {
            "value": "[parameters('containerName')]"
          },
          "customizations": {
            "value": "[parameters('customizations')]"
          },
          "installFsLogix": {
            "value": "[parameters('installFsLogix')]"
          },
          "fslogixBlobName": {
            "value": "[parameters('fslogixBlobName')]"
          },
          "installAccess": {
            "value": "[parameters('installAccess')]"
          },
          "installExcel": {
            "value": "[parameters('installExcel')]"
          },
          "installOneDrive": {
            "value": "[parameters('installOneDrive')]"
          },
          "onedriveBlobName": {
            "value": "[parameters('onedriveBlobName')]"
          },
          "installOneNote": {
            "value": "[parameters('installOneNote')]"
          },
          "installOutlook": {
            "value": "[parameters('installOutlook')]"
          },
          "installPowerPoint": {
            "value": "[parameters('installPowerPoint')]"
          },
          "installProject": {
            "value": "[parameters('installProject')]"
          },
          "installPublisher": {
            "value": "[parameters('installpublisher')]"
          },
          "installSkypeForBusiness": {
            "value": "[parameters('installSkypeForBusiness')]"
          },
          "installTeams": {
            "value": "[parameters('installTeams')]"
          },
          "installVirtualDesktopOptimizationTool": {
            "value": "[parameters('installVirtualDesktopOptimizationTool')]"
          },
          "installVisio": {
            "value": "[parameters('installVisio')]"
          },
          "installWord": {
            "value": "[parameters('installWord')]"
          },
          "storageEndpoint": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountResourceId'), '/')[2], split(parameters('storageAccountResourceId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountResourceId'), '/'))), '2022-09-01').primaryEndpoints.blob]"
          },
          "userAssignedIdentityClientId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('userAssignedIdentityResourceId'), '/'))), '2023-01-31').clientId]"
          },
          "managementVmName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Management-VM-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.name.value]"
          },
          "imageVmName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-VM-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.name.value]"
          },
          "vDotBlobName": {
            "value": "[parameters('vDotBlobName')]"
          },
          "officeBlobName": {
            "value": "[parameters('officeBlobName')]"
          },
          "teamsBlobName": {
            "value": "[parameters('teamsBlobName')]"
          },
          "logBlobContainerUri": "[if(variables('collectLogs'), if(variables('collectLogs'), createObject('value', format('{0}{1}/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Logs-StorageAccount-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.primaryBlobEndpoint.value, variables('logContainerName'))), createObject('value', '')), createObject('value', ''))]",
          "installUpdates": {
            "value": "[parameters('installUpdates')]"
          },
          "updateService": {
            "value": "[parameters('updateService')]"
          },
          "wsusServer": {
            "value": "[parameters('wsusServer')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "2253053977837040250"
            }
          },
          "parameters": {
            "cloud": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "userAssignedIdentityClientId": {
              "type": "string"
            },
            "logBlobContainerUri": {
              "type": "string"
            },
            "storageEndpoint": {
              "type": "string"
            },
            "containerName": {
              "type": "string"
            },
            "managementVmName": {
              "type": "string"
            },
            "imageVmName": {
              "type": "string"
            },
            "installFsLogix": {
              "type": "bool"
            },
            "fslogixBlobName": {
              "type": "string"
            },
            "installAccess": {
              "type": "bool"
            },
            "installExcel": {
              "type": "bool"
            },
            "installOneNote": {
              "type": "bool"
            },
            "installOutlook": {
              "type": "bool"
            },
            "installPowerPoint": {
              "type": "bool"
            },
            "installProject": {
              "type": "bool"
            },
            "installPublisher": {
              "type": "bool"
            },
            "installSkypeForBusiness": {
              "type": "bool"
            },
            "installTeams": {
              "type": "bool"
            },
            "installVirtualDesktopOptimizationTool": {
              "type": "bool"
            },
            "installVisio": {
              "type": "bool"
            },
            "installWord": {
              "type": "bool"
            },
            "installOneDrive": {
              "type": "bool"
            },
            "onedriveBlobName": {
              "type": "string"
            },
            "customizations": {
              "type": "array"
            },
            "vDotBlobName": {
              "type": "string"
            },
            "officeBlobName": {
              "type": "string"
            },
            "teamsBlobName": {
              "type": "string"
            },
            "timeStamp": {
              "type": "string",
              "defaultValue": "[utcNow('yyMMddhhmm')]"
            },
            "installUpdates": {
              "type": "bool"
            },
            "updateService": {
              "type": "string"
            },
            "wsusServer": {
              "type": "string"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "customizers",
                "count": "[length(parameters('customizations'))]",
                "input": {
                  "name": "[parameters('customizations')[copyIndex('customizers')].name]",
                  "blobName": "[parameters('customizations')[copyIndex('customizers')].blobName]",
                  "arguments": "[if(contains(parameters('customizations')[copyIndex('customizers')], 'arguments'), parameters('customizations')[copyIndex('customizers')].arguments, '')]"
                }
              }
            ],
            "buildDir": "c:\\BuildDir"
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('imageVmName'), 'create-BuildDir-and-LogDir')]",
              "location": "[parameters('location')]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "parameters": [
                  {
                    "name": "BuildDir",
                    "value": "[variables('buildDir')]"
                  }
                ],
                "source": {
                  "script": "        param(\r\n          [string]$BuildDir\r\n        )\r\n        New-Item -Path $BuildDir -ItemType Directory -Force | Out-Null\r\n        New-Item -Path (Join-Path -Path \"$env:SystemRoot\\Logs\" -ChildPath ImageBuild) -ItemType Directory -Force | Out-Null\r\n      "
                }
              }
            },
            {
              "copy": {
                "name": "applications",
                "count": "[length(variables('customizers'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('imageVmName'), format('{0}', variables('customizers')[copyIndex()].name))]",
              "location": "[parameters('location')]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "errorBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "errorBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}{1}-error-{2}.log', parameters('logBlobContainerUri'), variables('customizers')[copyIndex()].name, parameters('timeStamp')))]",
                "outputBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "outputBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}{1}-output-{2}.log', parameters('logBlobContainerUri'), variables('customizers')[copyIndex()].name, parameters('timeStamp')))]",
                "parameters": [
                  {
                    "name": "BuildDir",
                    "value": "[variables('buildDir')]"
                  },
                  {
                    "name": "UserAssignedIdentityClientId",
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  {
                    "name": "ContainerName",
                    "value": "[parameters('containerName')]"
                  },
                  {
                    "name": "StorageEndpoint",
                    "value": "[parameters('storageEndpoint')]"
                  },
                  {
                    "name": "Blobname",
                    "value": "[variables('customizers')[copyIndex()].blobName]"
                  },
                  {
                    "name": "installer",
                    "value": "[variables('customizers')[copyIndex()].name]"
                  },
                  {
                    "name": "Arguments",
                    "value": "[variables('customizers')[copyIndex()].arguments]"
                  }
                ],
                "source": {
                  "script": "        param(\r\n          [string]$BuildDir,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$ContainerName,\r\n          [string]$StorageEndpoint,\r\n          [string]$BlobName,\r\n          [string]$Installer,\r\n          [string]$Arguments\r\n        )\r\n        Start-Transcript -Path \"$env:SystemRoot\\Logs\\ImageBuild\\$Installer.log\" -Force\r\n        If ($Arguments -eq '') {$Arguments = $null}\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageEndpoint&client_id=$UserAssignedIdentityClientId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $InstallDir = Join-Path $BuildDir -ChildPath $Installer\r\n        New-Item -Path $InstallDir -ItemType Directory -Force | Out-Null\r\n        Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageEndpoint$ContainerName/$BlobName\" -OutFile $InstallDir\\$Blobname\r\n        Start-Sleep -Seconds 10        \r\n        Set-Location -Path $InstallDir\r\n        if($Blobname -like '*.exe') {\r\n          If ($Arguments) {\r\n            Start-Process -FilePath $InstallDir\\$Blobname -ArgumentList $Arguments -NoNewWindow -Wait -PassThru\r\n          } Else {\r\n            Start-Process -FilePath $InstallDir\\$Blobname -NoNewWindow -Wait -PassThru\r\n          }\r\n          $status = Get-WmiObject -Class Win32_Product | Where-Object Name -like \"*$($installer)*\"\r\n          if($status) {\r\n            Write-Output $status.Name \"is installed\"\r\n          } else {\r\n            Write-Output \"$Installer did not install properly, please check arguments\"\r\n          }\r\n        }\r\n        if($Blobname -like '*.msi') {\r\n          If ($Arguments) {\r\n            If ($Arguments -notcontains $Blobname) {$Arguments = \"/i $Blobname $Arguments\"}\r\n            Start-Process -FilePath msiexec.exe -ArgumentList $Arguments -Wait\r\n          } Else {\r\n            Start-Process -FilePath msiexec.exe -ArgumentList \"/i $BlobName /qn\" -Wait\r\n          }\r\n          $status = Get-WmiObject -Class Win32_Product | Where-Object Name -like \"*$($installer)*\"\r\n          if($status) {\r\n            Write-Output $status.Name \"is installed\"\r\n          } else {\r\n            Write-Output $Installer \"did not install properly, please check arguments\"\r\n          }\r\n        }\r\n        if($Blobname -like '*.bat') {\r\n          If ($Arguments) {\r\n            Start-Process -FilePath cmd.exe -ArgumentList \"$BlobName $Arguments\" -Wait\r\n          } Else {\r\n            Start-Process -FilePath cmd.exe -ArgumentList \"$BlobName\" -Wait\r\n          }\r\n        }\r\n        if($Blobname -like '*.ps1') {\r\n          If ($Arguments) {\r\n            & $BlobName $Arguments\r\n          } Else {\r\n            & $BlobName\r\n          }\r\n        }\r\n        if($Blobname -like '*.zip') {\r\n          $destinationPath = Join-Path -Path $InstallDir -ChildPath $([System.IO.Path]::GetFileNameWithoutExtension($Blobname))\r\n          Expand-Archive -Path $InstallDir\\$Blobname -DestinationPath $destinationPath -Force\r\n          $PSScript = (Get-ChildItem -Path $destinationPath -filter '*.ps1').FullName\r\n          If ($PSScript.count -gt 1) { $PSScript = $PSScript[0] }\r\n          If ($Arguments) {\r\n            & $PSScript $Arguments\r\n          } Else {          \r\n            & $PSScript\r\n          }\r\n        }\r\n        Stop-Transcript\r\n      "
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'create-BuildDir-and-LogDir')]"
              ]
            },
            {
              "condition": "[parameters('installFsLogix')]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('imageVmName'), 'fslogix')]",
              "location": "[parameters('location')]",
              "properties": {
                "errorBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "errorBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}FSLogix-error-{1}.log', parameters('logBlobContainerUri'), parameters('timeStamp')))]",
                "outputBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "outputBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}FSLogix-output-{1}.log', parameters('logBlobContainerUri'), parameters('timeStamp')))]",
                "parameters": [
                  {
                    "name": "BuildDir",
                    "value": "[variables('buildDir')]"
                  },
                  {
                    "name": "UserAssignedIdentityClientId",
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  {
                    "name": "ContainerName",
                    "value": "[parameters('containerName')]"
                  },
                  {
                    "name": "StorageEndpoint",
                    "value": "[parameters('storageEndpoint')]"
                  },
                  {
                    "name": "BlobName",
                    "value": "[parameters('fslogixBlobName')]"
                  }
                ],
                "source": {
                  "script": "        param(\r\n          [string]$BuildDir,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$ContainerName,\r\n          [string]$StorageEndpoint,\r\n          [string]$BlobName\r\n        )\r\n        $SoftwareName = 'FSLogix'\r\n        Start-Transcript -Path \"$env:SystemRoot\\Logs\\ImageBuild\\$SoftwareName.log\" -Force\r\n        Write-Output \"Starting '$SoftwareName' install.\"\r\n        Write-Output \"Obtaining bearer token for download from Azure Storage Account.\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageEndpoint&client_id=$UserAssignedIdentityClientId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $appDir = Join-Path -Path $BuildDir -ChildPath $SoftwareName\r\n        New-Item -Path $appDir -ItemType Directory -Force | Out-Null\r\n        $destFile = Join-Path -Path $appDir -ChildPath $BlobName\r\n        Write-Output \"Downloading $BlobName from storage.\"\r\n        Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageEndpoint$ContainerName/$BlobName\" -OutFile $destFile\r\n        Start-Sleep -seconds 10\r\n        Write-Output \"Extracting Contents of Zip File\"\r\n        Expand-Archive -Path $destFile -DestinationPath \"$appDir\\Temp\" -Force\r\n        $FSLogixZip = (Get-ChildItem -Path \"$appDir\\Temp\" -filter '*.zip').FullName\r\n        Write-Output \"Found FSLogix Source files: [$FSLogixZip], Extracting contents...\"\r\n        Expand-Archive -Path $FSLogixZip -DestinationPath $appDir -Force\r\n        $Installer = (Get-ChildItem -Path $appDir -File -Recurse -Filter 'FSLogixAppsSetup.exe' | Where-Object { $_.FullName -like '*x64*' }).FullName\r\n        Write-Output \"Installation file found: [$Installer], executing installation.\"\r\n        $Install = Start-Process -FilePath $Installer -ArgumentList \"/install /quiet /norestart\" -Wait -PassThru\r\n        If ($($Install.ExitCode) -eq 0) {\r\n            Write-Output \"'Microsoft FSLogix Apps' installed successfully.\"\r\n        }\r\n        Else {\r\n            Write-Error \"The Install exit code is $($Install.ExitCode)\"\r\n        }\r\n        Write-Output \"Copying the FSLogix ADMX and ADML files to the PolicyDefinitions folders.\"\r\n        Get-ChildItem -Path $appDir -File -Recurse -Filter '*.admx' | ForEach-Object { Write-Output \"Copying $($_.Name)\"; Copy-Item -Path $_.FullName -Destination \"$env:WINDIR\\PolicyDefinitions\\\" -Force }\r\n        Get-ChildItem -Path $appDir -File -Recurse -Filter '*.adml' | ForEach-Object { Write-Output \"Copying $($_.Name)\"; Copy-Item -Path $_.FullName -Destination \"$env:WINDIR\\PolicyDefinitions\\en-us\\\" -Force }\r\n        Write-Output \"Installation complete.\"\r\n        Stop-Transcript     \r\n      "
                }
              },
              "dependsOn": [
                "applications",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'create-BuildDir-and-LogDir')]"
              ]
            },
            {
              "condition": "[or(or(or(or(or(or(or(or(or(parameters('installAccess'), parameters('installExcel')), parameters('installOneNote')), parameters('installOutlook')), parameters('installPowerPoint')), parameters('installProject')), parameters('installPublisher')), parameters('installSkypeForBusiness')), parameters('installVisio')), parameters('installWord'))]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('imageVmName'), 'install-office')]",
              "location": "[parameters('location')]",
              "properties": {
                "errorBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "errorBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}Office-error-{1}.log', parameters('logBlobContainerUri'), parameters('timeStamp')))]",
                "outputBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "outputBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}Office-output-{1}.log', parameters('logBlobContainerUri'), parameters('timeStamp')))]",
                "parameters": [
                  {
                    "name": "BuildDir",
                    "value": "[variables('buildDir')]"
                  },
                  {
                    "name": "InstallAccess",
                    "value": "[string(parameters('installAccess'))]"
                  },
                  {
                    "name": "InstallWord",
                    "value": "[string(parameters('installWord'))]"
                  },
                  {
                    "name": "InstallExcel",
                    "value": "[string(parameters('installExcel'))]"
                  },
                  {
                    "name": "InstallOneNote",
                    "value": "[string(parameters('installOneNote'))]"
                  },
                  {
                    "name": "InstallOutlook",
                    "value": "[string(parameters('installOutlook'))]"
                  },
                  {
                    "name": "InstallPowerPoint",
                    "value": "[string(parameters('installPowerPoint'))]"
                  },
                  {
                    "name": "InstallProject",
                    "value": "[string(parameters('installProject'))]"
                  },
                  {
                    "name": "InstallPublisher",
                    "value": "[string(parameters('installPublisher'))]"
                  },
                  {
                    "name": "InstallSkypeForBusiness",
                    "value": "[string(parameters('installSkypeForBusiness'))]"
                  },
                  {
                    "name": "InstallVisio",
                    "value": "[string(parameters('installVisio'))]"
                  },
                  {
                    "name": "UserAssignedIdentityClientId",
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  {
                    "name": "ContainerName",
                    "value": "[parameters('containerName')]"
                  },
                  {
                    "name": "StorageEndpoint",
                    "value": "[parameters('storageEndpoint')]"
                  },
                  {
                    "name": "BlobName",
                    "value": "[parameters('officeBlobName')]"
                  }
                ],
                "source": {
                  "script": "      \r\n        param(\r\n          [string]$BuildDir,\r\n          [string]$InstallAccess,\r\n          [string]$InstallExcel,\r\n          [string]$InstallOutlook,\r\n          [string]$InstallProject,\r\n          [string]$InstallPublisher,\r\n          [string]$InstallSkypeForBusiness,\r\n          [string]$InstallVisio,\r\n          [string]$InstallWord,\r\n          [string]$InstallOneNote,\r\n          [string]$InstallPowerPoint,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$ContainerName,\r\n          [string]$StorageEndpoint,\r\n          [string]$BlobName\r\n        )\r\n        $SoftwareName = 'Office-365'\r\n        Start-Transcript -Path \"$env:SystemRoot\\Logs\\ImageBuild\\$SoftwareName.log\" -Force\r\n        Write-Output \"Installing '$SoftwareName'.\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageEndpoint&client_id=$UserAssignedIdentityClientId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata = $true } -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $sku = (Get-ComputerInfo).OsName\r\n        $appDir = Join-Path -Path $BuildDir -ChildPath $SoftwareName\r\n        New-Item -Path $appDir -ItemType Directory -Force | Out-Null  \r\n        $ErrorActionPreference = \"Stop\"\r\n        $destFile = Join-Path -Path $appDir -ChildPath $BlobName\r\n        Invoke-WebRequest -Headers @{\"x-ms-version\" = \"2017-11-09\"; Authorization = \"Bearer $AccessToken\" } -Uri \"$StorageEndpoint$ContainerName/$BlobName\" -OutFile $destFile\r\n        Start-Sleep -Seconds 10\r\n        Expand-Archive -Path $destFile -DestinationPath \"$appDir\\Temp\" -Force\r\n        $Setup = (Get-ChildItem -Path \"$appDir\\Temp\" -Filter 'setup*.exe' -Recurse -File).FullName\r\n        If (-not($Setup)) {\r\n          $DeploymentTool = (Get-ChildItem -Path $appDir\\Temp -Filter 'OfficeDeploymentTool*.exe' -Recurse -File).FullName\r\n          Start-Process -FilePath $DeploymentTool -ArgumentList \"/extract:`\"$appDir\\ODT`\" /quiet /passive /norestart\" -Wait -PassThru | Out-Null\r\n          Write-Output \"Downloaded & extracted the Office 365 Deployment Toolkit\"\r\n          $setup = (Get-ChildItem -Path \"$appDir\\ODT\" -Filter '*setup*.exe').FullName\r\n        }\r\n        Write-Output \"Dynamically creating $SoftwareName configuration file for setup.\"\r\n        $configFile = Join-Path -Path $appDir -ChildPath 'office365x64.xml'\r\n        $null = Set-Content $configFile '<Configuration>'\r\n        $null = Add-Content $configFile '  <Add OfficeClientEdition=\"64\" Channel=\"MonthlyEnterprise\">'\r\n        $null = Add-Content $configFile '    <Product ID=\"O365ProPlusRetail\">'\r\n        $null = Add-Content $configFile '      <Language ID=\"en-us\" />'\r\n        $null = Add-Content $configFile '      <ExcludeApp ID=\"Groove\" />'\r\n        $null = Add-Content $configFile '      <ExcludeApp ID=\"OneDrive\" />'\r\n        $null = Add-Content $configFile '      <ExcludeApp ID=\"Teams\" />'\r\n        if ($InstallAccess -ne 'True') {\r\n          $null = Add-Content $configFile '      <ExcludeApp ID=\"Access\" />'\r\n        }\r\n        if ($InstallExcel -ne 'True') {\r\n          $null = Add-Content $configFile '      <ExcludeApp ID=\"Excel\" />'\r\n        }\r\n        if ($InstallOneNote -ne 'True') {\r\n          $null = Add-Content $configFile '      <ExcludeApp ID=\"OneNote\" />'\r\n        }\r\n        if ($InstallOutlook -ne 'True') {\r\n          $null = Add-Content $configFile '      <ExcludeApp ID=\"Outlook\" />'\r\n        }\r\n        if ($InstallPowerPoint -ne 'True') {\r\n          $null = Add-Content $configFile '      <ExcludeApp ID=\"PowerPoint\" />'\r\n        }\r\n        if ($InstallPublisher -ne 'True') {\r\n          $null = Add-Content $configFile '      <ExcludeApp ID=\"Publisher\" />'\r\n        }\r\n        if ($InstallSkypeForBusiness -ne 'True') {\r\n          $null = Add-Content $configFile '      <ExcludeApp ID=\"Lync\" />'\r\n        }\r\n        if ($InstallWord -ne 'True') {\r\n          $null = Add-Content $configFile '      <ExcludeApp ID=\"Word\" />'\r\n        }\r\n        $null = Add-Content $configFile '    </Product>'\r\n        if ($InstallProject -eq 'True') {\r\n          $null = Add-Content $configFile '    <Product ID=\"ProjectProRetail\"><Language ID=\"en-us\" /></Product>'\r\n        }\r\n        if ($InstallVisio -eq 'True') {\r\n          $null = Add-Content $configFile '    <Product ID=\"VisioProRetail\"><Language ID=\"en-us\" /></Product>'\r\n        }\r\n        $null = Add-Content $configFile '  </Add>'\r\n        if (($Sku).Contains(\"multi\") -eq \"true\") {\r\n          $null = Add-Content $configFile '  <Property Name=\"SharedComputerLicensing\" Value=\"1\" />'\r\n        }\r\n        $null = Add-Content $configFile '  <Property Name=\"FORCEAPPSHUTDOWN\" Value=\"TRUE\" />'\r\n        $null = Add-Content $configFile '  <Updates Enabled=\"FALSE\" />'\r\n        $null = Add-Content $configFile '  <Display Level=\"None\" AcceptEULA=\"TRUE\" />'\r\n        $null = Add-Content $configFile '</Configuration>'\r\n        Write-Output \"Starting setup process.\"\r\n        $Install = Start-Process -FilePath $setup -ArgumentList \"/configure `\"$configFile`\"\" -Wait -PassThru -ErrorAction \"Stop\"\r\n        If ($($Install.ExitCode) -eq 0) {\r\n          Write-Output \"'$SoftwareName' installed successfully.\"\r\n        }\r\n        Else {\r\n          Write-Error \"'$SoftwareName' install exit code is $($Install.ExitCode)\"\r\n        }\r\n        Stop-Transcript\r\n      "
                }
              },
              "dependsOn": [
                "applications",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'create-BuildDir-and-LogDir')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'fslogix')]"
              ]
            },
            {
              "condition": "[parameters('installOneDrive')]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('imageVmName'), 'onedrive')]",
              "location": "[parameters('location')]",
              "properties": {
                "errorBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "errorBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}OneDrive-error-{1}.log', parameters('logBlobContainerUri'), parameters('timeStamp')))]",
                "outputBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "outputBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}OneDrive-output-{1}.log', parameters('logBlobContainerUri'), parameters('timeStamp')))]",
                "parameters": [
                  {
                    "name": "BuildDir",
                    "value": "[variables('buildDir')]"
                  },
                  {
                    "name": "UserAssignedIdentityClientId",
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  {
                    "name": "ContainerName",
                    "value": "[parameters('containerName')]"
                  },
                  {
                    "name": "StorageEndpoint",
                    "value": "[parameters('storageEndpoint')]"
                  },
                  {
                    "name": "BlobName",
                    "value": "[parameters('onedriveBlobName')]"
                  }
                ],
                "source": {
                  "script": "        param(\r\n          [string]$BuildDir,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$ContainerName,\r\n          [string]$StorageEndpoint,\r\n          [string]$BlobName\r\n        )\r\n        $SoftwareName = 'OneDrive'\r\n        Start-Transcript -Path \"$env:SystemRoot\\Logs\\ImageBuild\\$SoftwareName.log\" -Force\r\n        $RegPath = 'HKLM:\\SOFTWARE\\Microsoft\\OneDrive'\r\n        If (Test-Path -Path $RegPath) {\r\n          If (Get-ItemProperty -Path $RegPath -Name AllUsersInstall -ErrorAction SilentlyContinue) {\r\n            $AllUsersInstall = Get-ItemPropertyValue -Path $RegPath -Name AllUsersInstall\r\n          }\r\n        }\r\n        If ($AllUsersInstall -eq '1') {\r\n          Write-Output \"$SoftwareName is already setup per-machine. Quiting.\"\r\n        } Else {\r\n          Write-Output \"Obtaining bearer token for download from Azure Storage Account.\"\r\n          $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageEndpoint&client_id=$UserAssignedIdentityClientId\"\r\n          $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n          $appDir = Join-Path -Path $BuildDir -ChildPath 'OneDrive'\r\n          New-Item -Path $appDir -ItemType Directory -Force | Out-Null\r\n          $destFile = Join-Path -Path $appDir -ChildPath 'OneDrive.zip'\r\n          Write-Output \"Downloading $BlobName from storage.\"\r\n          Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageEndpoint$ContainerName/$BlobName\" -OutFile $destFile\r\n          Start-Sleep -Seconds 10\r\n          Expand-Archive -Path $destFile -DestinationPath $appDir -Force\r\n          $onedrivesetup = (Get-ChildItem -Path $appDir -filter 'OneDrive*.exe' -Recurse).FullName\r\n          #Find existing OneDriveSetup\r\n          $RegPath = 'HKLM:\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\OneDriveSetup.exe'\r\n          If (Test-Path -Path $RegPath) {\r\n            Write-Output \"Found Per-Machine Installation, determining uninstallation command.\"\r\n            If (Get-ItemProperty -Path $RegPath -name UninstallString -ErrorAction SilentlyContinue) {\r\n              $UninstallString = (Get-ItemPropertyValue -Path $RegPath -Name UninstallString).toLower()\r\n              $OneDriveSetupindex = $UninstallString.IndexOf('onedrivesetup.exe') + 17\r\n              $Uninstaller = $UninstallString.Substring(0,$OneDriveSetupindex)\r\n              $Arguments = $UninstallString.Substring($OneDriveSetupindex).replace('  ', ' ').trim()\r\n            }\r\n          } Else {\r\n            $Uninstaller = $OneDriveSetup\r\n            $Arguments = '/uninstall'\r\n          }    \r\n          # Uninstall existing version\r\n          Write-Output \"Running [$Uninstaller $Arguments] to remove any existing versions.\"\r\n          Start-Process -FilePath $Uninstaller -ArgumentList $Arguments\r\n          If (get-process onedrivesetup) {Wait-Process -Name OneDriveSetup}\r\n          # Set OneDrive for All Users Install\r\n          Write-Output \"Setting registry values to indicate a per-machine (AllUsersInstall)\"\r\n          New-Item -Path \"HKLM:\\SOFTWARE\\Microsoft\\OneDrive\" -Force | Out-Null\r\n          New-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\OneDrive\" -Name AllUsersInstall -PropertyType DWORD -Value 1 -Force | Out-Null\r\n          $Install = Start-Process -FilePath $onedrivesetup -ArgumentList '/allusers' -Wait -Passthru\r\n          If ($($Install.ExitCode) -eq 0) {\r\n            Write-Output \"'$SoftwareName' installed successfully.\"\r\n          }\r\n          Else {\r\n            Write-Error \"'$SoftwareName' install exit code is $($Install.ExitCode)\"\r\n          }\r\n          Write-Output \"Configuring OneDrive to startup for each user upon logon.\"\r\n          New-ItemProperty -Path 'HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run' -Name OneDrive -PropertyType String -Value 'C:\\Program Files\\Microsoft OneDrive\\OneDrive.exe /background' -Force | Out-Null\r\n          Write-Output \"Installed OneDrive Per-Machine\"\r\n        }\r\n        Stop-Transcript\r\n      "
                }
              },
              "dependsOn": [
                "applications",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'create-BuildDir-and-LogDir')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'fslogix')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'install-office')]"
              ]
            },
            {
              "condition": "[parameters('installTeams')]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('imageVmName'), 'teams')]",
              "location": "[parameters('location')]",
              "properties": {
                "errorBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "errorBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}Teams-error-{1}.log', parameters('logBlobContainerUri'), parameters('timeStamp')))]",
                "outputBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "outputBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}Teams-output-{1}.log', parameters('logBlobContainerUri'), parameters('timeStamp')))]",
                "parameters": [
                  {
                    "name": "BuildDir",
                    "value": "[variables('buildDir')]"
                  },
                  {
                    "name": "UserAssignedIdentityClientId",
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  {
                    "name": "ContainerName",
                    "value": "[parameters('containerName')]"
                  },
                  {
                    "name": "StorageEndpoint",
                    "value": "[parameters('storageEndpoint')]"
                  },
                  {
                    "name": "BlobName",
                    "value": "[parameters('teamsBlobName')]"
                  }
                ],
                "source": {
                  "script": "        param(\r\n          [string]$BuildDir,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$ContainerName,\r\n          [string]$StorageEndpoint,\r\n          [string]$BlobName\r\n        )\r\n        $SoftwareName = 'Teams'\r\n        Start-Transcript -Path \"$env:SystemRoot\\Logs\\ImageBuild\\$SoftwareName.log\" -Force\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageEndpoint&client_id=$UserAssignedIdentityClientId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $sku = (Get-ComputerInfo).OsName\r\n        $appDir = Join-Path -Path $BuildDir -ChildPath $SoftwareName\r\n        New-Item -Path $appDir -ItemType Directory -Force | Out-Null\r\n        $destFile = Join-Path -Path $appDir -ChildPath $BlobName\r\n        Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageEndpoint$ContainerName/$BlobName\" -OutFile $destFile\r\n        Start-Sleep -Seconds 10\r\n        Expand-Archive -Path $destFile -DestinationPath $appDir -Force\r\n        $vcRedistFile = (Get-ChildItem -Path $appDir -filter 'vc*.exe' -Recurse).FullName\r\n        $webRTCFile = (Get-ChildItem -Path $appDir -filter '*WebRTC*.msi' -Recurse).FullName\r\n        $teamsFile = (Get-ChildItem -Path $appDir -filter '*Teams*.msi' -Recurse).FullName\r\n        # Enable media optimizations for Team\r\n        New-Item -Path \"HKLM:\\SOFTWARE\\Microsoft\\Teams\" -Force\r\n        New-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Teams\" -Name IsWVDEnvironment -PropertyType DWORD -Value 1 -Force\r\n        Write-Output \"Enabled media optimizations for Teams\"\r\n        $ErrorActionPreference = \"Stop\"\r\n        Start-Process -FilePath  $vcRedistFile -ArgumentList \"/install /quiet /norestart\" -Wait -PassThru | Out-Null\r\n        Write-Output \"Installed the latest version of Microsoft Visual C++ Redistributable\"\r\n        # install the Remote Desktop WebRTC Redirector Service\r\n        Start-Process -FilePath msiexec.exe -ArgumentList \"/i  $webRTCFile /quiet /qn /norestart /passive\" -Wait -PassThru | Out-Null\r\n        Write-Output \"Installed the Remote Desktop WebRTC Redirector Service\"\r\n        # Install Teams\r\n        if(($Sku).Contains('multi')){\r\n            $msiArgs = 'ALLUSER=1 ALLUSERS=1'\r\n        } else {\r\n            $msiArgs = 'ALLUSERS=1'\r\n        }\r\n        Start-Process -FilePath msiexec.exe -ArgumentList \"/i $teamsFile /quiet /qn /norestart /passive $msiArgs\" -Wait -PassThru | Out-Null\r\n        Write-Output \"Installed Teams\"\r\n        Stop-Transcript\r\n      "
                }
              },
              "dependsOn": [
                "applications",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'create-BuildDir-and-LogDir')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'fslogix')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'install-office')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'onedrive')]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('managementVmName'), 'restart-vm-1')]",
              "location": "[parameters('location')]",
              "properties": {
                "treatFailureAsDeploymentFailure": false,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "UserAssignedIdentityClientId",
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  {
                    "name": "imageVmRg",
                    "value": "[split(resourceId('Microsoft.Compute/virtualMachines', parameters('imageVmName')), '/')[4]]"
                  },
                  {
                    "name": "imageVmName",
                    "value": "[parameters('imageVmName')]"
                  },
                  {
                    "name": "Environment",
                    "value": "[parameters('cloud')]"
                  }
                ],
                "source": {
                  "script": "        param(\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$imageVmRg,\r\n          [string]$imageVmName,\r\n          [string]$Environment\r\n        )\r\n        # Connect to Azure\r\n        Connect-AzAccount -Identity -AccountId $UserAssignedIdentityClientId -Environment $Environment # Run on the virtual machine\r\n        # Restart VM\r\n        Restart-AzVM -Name $imageVmName -ResourceGroupName $imageVmRg        \r\n        $lastProvisioningState = \"\"\r\n        $provisioningState = (Get-AzVM -resourcegroupname $imageVmRg -name $imageVmName -Status).Statuses[1].Code\r\n        $condition = ($provisioningState -eq \"PowerState/running\")\r\n        while (!$condition) {\r\n          $lastProvisioningState = $provisioningState    \r\n          Start-Sleep -Seconds 5\r\n          $provisioningState = (Get-AzVM -resourcegroupname $imageVmRg -name $imageVmName -Status).Statuses[1].Code\r\n        }\r\n      "
                }
              },
              "dependsOn": [
                "applications",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'create-BuildDir-and-LogDir')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'fslogix')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'install-office')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'teams')]"
              ]
            },
            {
              "condition": "[parameters('installUpdates')]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('imageVmName'), 'install-microsoft-updates')]",
              "location": "[parameters('location')]",
              "properties": {
                "asyncExecution": false,
                "errorBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "errorBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}Install-Updates-error-{1}.log', parameters('logBlobContainerUri'), parameters('timeStamp')))]",
                "outputBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "outputBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}Install-Updates-output-{1}.log', parameters('logBlobContainerUri'), parameters('timeStamp')))]",
                "parameters": "[if(equals(parameters('updateService'), 'WSUS'), createArray(createObject('name', 'Service', 'value', parameters('updateService')), createObject('name', 'WSUSServer', 'value', parameters('wsusServer'))), createArray(createObject('name', 'Service', 'value', parameters('updateService'))))]",
                "source": {
                  "script": "        param (\r\n          # The App Name to pass to the WUA API as the calling application.\r\n          [Parameter()]\r\n          [String]$AppName = \"Windows Update API Script\",\r\n          # The search criteria to be used.\r\n          [Parameter()]\r\n          [String]$Criteria = \"IsInstalled=0 and Type='Software' and IsHidden=0\",\r\n          [Parameter()]\r\n          [bool]$ExcludePreviewUpdates = $true,\r\n          # Default service (WSUS if machine is configured to use it, or MU if opted in, or WU otherwise.)\r\n          [Parameter()]\r\n          [ValidateSet(\"WU\",\"MU\",\"WSUS\",\"DCAT\",\"STORE\",\"OTHER\")]\r\n          [string]$Service = 'MU',\r\n          # The http/https fqdn for the Windows Server Update Server\r\n          [Parameter()]\r\n          [string]$WSUSServer\r\n        )\r\n        \r\n        Function ConvertFrom-InstallationResult {\r\n        [CmdletBinding()]\r\n            param (\r\n                [Parameter()]\r\n                [int]$Result\r\n            )        \r\n            switch ($Result) {\r\n                2 { $Text = 'Succeeded' }\r\n                3 { $Text = 'Succeeded with errors' }\r\n                4 { $Text = 'Failed' }\r\n                5 { $Text = 'Cancelled' }\r\n                Default { $Text = \"Unexpected ($Result)\"}\r\n            }        \r\n            Return $Text\r\n        }\r\n        Start-Transcript -Path \"$env:SystemRoot\\Logs\\ImageBuild\\Install-Updates.log\"\r\n        Switch ($Service.ToUpper()) {\r\n            'WU' { $ServerSelection = 2 }\r\n            'MU' { $ServerSelection = 3; $ServiceId = \"7971f918-a847-4430-9279-4a52d1efe18d\" }\r\n            'WSUS' { $ServerSelection = 1 }\r\n            'DCAT' { $ServerSelection = 3; $ServiceId = \"855E8A7C-ECB4-4CA3-B045-1DFA50104289\" }\r\n            'STORE' { $serverSelection = 3; $ServiceId = \"117cab2d-82b1-4b5a-a08c-4d62dbee7782\" }\r\n            'OTHER' { $ServerSelection = 3; $ServiceId = $Service }\r\n        }        \r\n        If ($Service -eq 'MU') {\r\n            $UpdateServiceManager = New-Object -ComObject Microsoft.Update.ServiceManager\r\n            $UpdateServiceManager.ClientApplicationID = $AppName\r\n            $UpdateServiceManager.AddService2(\"7971f918-a847-4430-9279-4a52d1efe18d\", 7, \"\")\r\n            $null = cmd /c reg.exe ADD \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v AllowMUUpdateService /t REG_DWORD /d 1 /f '2>&1'\r\n            Write-Output \"Added Registry entry to configure Microsoft Update. Exit Code: [$LastExitCode]\"\r\n        } Elseif ($Service -eq 'WSUS' -and $WSUSServer) {\r\n            $null = cmd /c reg.exe ADD \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v WUServer /t REG_SZ /d $WSUSServer /f '2>&1'\r\n            $null = cmd /c reg.exe ADD \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v WUStatusServer /t REG_SZ /d $WSUSServer /f '2>&1'\r\n            Write-Output \"Added Registry entry to configure WSUS Server. Exit Code: [$LastExitCode]\"\r\n        }        \r\n        $UpdateSession = New-Object -ComObject Microsoft.Update.Session\r\n        $updateSession.ClientApplicationID = $AppName   \r\n        $UpdateSearcher = $UpdateSession.CreateUpdateSearcher()\r\n        $UpdateSearcher.ServerSelection = $ServerSelection\r\n        If ($ServerSelection -eq 3) {\r\n            $UpdateSearcher.ServiceId = $ServiceId\r\n        }\r\n        Write-Output \"Searching for Updates...\"\r\n        $SearchResult = $UpdateSearcher.Search($Criteria)\r\n        If ($SearchResult.Updates.Count -eq 0) {\r\n            Write-Output \"There are no applicable updates.\"\r\n            Write-Output \"Now Exiting\"\r\n            Exit $ExitCode\r\n        }\r\n        Write-Output \"List of applicable items found for this computer:\"\r\n        For ($i = 0; $i -lt $SearchResult.Updates.Count; $i++) {\r\n            $Update = $SearchResult.Updates[$i]\r\n            Write-Output \"$($i + 1) > $($update.Title)\"\r\n        }\r\n        $AtLeastOneAdded = $false\r\n        $ExclusiveAdded = $false   \r\n        $UpdatesToDownload = New-Object -ComObject Microsoft.Update.UpdateColl\r\n        Write-Output \"Checking search results:\"\r\n        For ($i = 0; $i -lt $SearchResult.Updates.Count; $i++) {\r\n            $Update = $SearchResult.Updates[$i]\r\n            $AddThisUpdate = $false        \r\n            If ($ExclusiveAdded) {\r\n                Write-Output \"$($i + 1) > skipping: '$($update.Title)' because an exclusive update has already been selected.\"\r\n            } Else {\r\n                $AddThisUpdate = $true\r\n            }        \r\n            if ($ExcludePreviewUpdates -and $update.Title -like '*Preview*') {\r\n                Write-Output \"$($i + 1) > Skipping: '$($update.Title)' because it is a preview update.\"\r\n                $AddThisUpdate = $false\r\n            }        \r\n            If ($AddThisUpdate) {\r\n                $PropertyTest = 0\r\n                $ErrorActionPreference = 'SilentlyContinue'\r\n                $PropertyTest = $Update.InstallationBehavior.Impact\r\n                $ErrorActionPreference = 'Stop'\r\n                If ($PropertyTest -eq 2) {\r\n                    If ($AtLeastOneAdded) {\r\n                        Write-Output \"$($i + 1) > skipping: '$($update.Title)' because it is exclusive and other updates are being installed first.\"\r\n                        $AddThisUpdate = $false\r\n                    }\r\n                }\r\n            }\r\n            If ($AddThisUpdate) {\r\n                Write-Output \"$($i + 1) > adding: '$($update.Title)'\"\r\n                $UpdatesToDownload.Add($Update) | out-null\r\n                $AtLeastOneAdded = $true\r\n                $ErrorActionPreference = 'SilentlyContinue'\r\n                $PropertyTest = $Update.InstallationBehavior.Impact\r\n                $ErrorActionPreference = 'Stop'\r\n                If ($PropertyTest -eq 2) {\r\n                    Write-Output \"This update is exclusive; skipping remaining updates\"\r\n                    $ExclusiveAdded = $true\r\n                }\r\n            }\r\n        }        \r\n        $UpdatesToInstall = New-Object -ComObject Microsoft.Update.UpdateColl\r\n        Write-Output \"Downloading updates...\"\r\n        $Downloader = $UpdateSession.CreateUpdateDownloader()\r\n        $Downloader.Updates = $UpdatesToDownload\r\n        $Downloader.Download()\r\n        Write-Output \"Successfully downloaded updates:\"        \r\n        For ($i = 0; $i -lt $UpdatesToDownload.Count; $i++) {\r\n            $Update = $UpdatesToDownload[$i]\r\n            If ($Update.IsDownloaded -eq $true) {\r\n                Write-Output \"$($i + 1) > $($update.title)\"\r\n                $UpdatesToInstall.Add($Update) | out-null\r\n            }\r\n        }        \r\n        If ($UpdatesToInstall.Count -gt 0) {\r\n            Write-Output \"Now installing updates...\"\r\n            $Installer = $UpdateSession.CreateUpdateInstaller()\r\n            $Installer.Updates = $UpdatesToInstall\r\n            $InstallationResult = $Installer.Install()\r\n            $Text = ConvertFrom-InstallationResult -Result $InstallationResult.ResultCode\r\n            Write-Output \"Installation Result: $($Text)\"        \r\n            If ($InstallationResult.RebootRequired) {\r\n                Write-Output \"Atleast one update requires a reboot to complete the installation.\"\r\n            }\r\n        }\r\n        If ($service -eq 'MU') {\r\n            Reg.exe DELETE \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v AllowMUUpdateService /f\r\n        } Elseif ($Service -eq 'WSUS' -and $WSUSServer) {\r\n            reg.exe DELETE \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v WUServer /f\r\n            reg.exe DELETE \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v WUStatusServer /f\r\n        }\r\n        Stop-Transcript\r\n      "
                },
                "treatFailureAsDeploymentFailure": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('managementVmName'), 'restart-vm-1')]"
              ]
            },
            {
              "condition": "[parameters('installUpdates')]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('managementVmName'), 'restart-vm-2')]",
              "location": "[parameters('location')]",
              "properties": {
                "treatFailureAsDeploymentFailure": false,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "UserAssignedIdentityClientId",
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  {
                    "name": "imageVmRg",
                    "value": "[split(resourceId('Microsoft.Compute/virtualMachines', parameters('imageVmName')), '/')[4]]"
                  },
                  {
                    "name": "imageVmName",
                    "value": "[parameters('imageVmName')]"
                  },
                  {
                    "name": "Environment",
                    "value": "[parameters('cloud')]"
                  }
                ],
                "source": {
                  "script": "        param(\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$imageVmRg,\r\n          [string]$imageVmName,\r\n          [string]$Environment\r\n        )\r\n        # Connect to Azure\r\n        Connect-AzAccount -Identity -AccountId $UserAssignedIdentityClientId -Environment $Environment # Run on the virtual machine\r\n        # Restart VM\r\n        Restart-AzVM -Name $imageVmName -ResourceGroupName $imageVmRg        \r\n        $lastProvisioningState = \"\"\r\n        $provisioningState = (Get-AzVM -resourcegroupname $imageVmRg -name $imageVmName -Status).Statuses[1].Code\r\n        $condition = ($provisioningState -eq \"PowerState/running\")\r\n        while (!$condition) {\r\n          if ($lastProvisioningState -ne $provisioningState) {\r\n            Write-Output $imageVmName \"under\" $imageVmRg \"is\" $provisioningState \"(waiting for state change)\"\r\n          }\r\n          $lastProvisioningState = $provisioningState      \r\n          Start-Sleep -Seconds 5\r\n          $provisioningState = (Get-AzVM -resourcegroupname $imageVmRg -name $imageVmName -Status).Statuses[1].Code\r\n        }\r\n        Write-Output $imageVmName \"under\" $imageVmRg \"is\" $provisioningState\r\n      "
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'install-microsoft-updates')]"
              ]
            },
            {
              "condition": "[parameters('installVirtualDesktopOptimizationTool')]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('imageVmName'), 'vdot')]",
              "location": "[parameters('location')]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "errorBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "errorBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}vdot-error-{1}.log', parameters('logBlobContainerUri'), parameters('timeStamp')))]",
                "outputBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "outputBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}vdot-output-{1}.log', parameters('logBlobContainerUri'), parameters('timeStamp')))]",
                "parameters": [
                  {
                    "name": "UserAssignedIdentityClientId",
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  {
                    "name": "ContainerName",
                    "value": "[parameters('containerName')]"
                  },
                  {
                    "name": "StorageEndpoint",
                    "value": "[parameters('storageEndpoint')]"
                  },
                  {
                    "name": "BlobName",
                    "value": "[parameters('vDotBlobName')]"
                  },
                  {
                    "name": "BuildDir",
                    "value": "[variables('buildDir')]"
                  }
                ],
                "source": {
                  "script": "        param(\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$ContainerName,\r\n          [string]$StorageEndpoint,\r\n          [string]$BlobName,\r\n          [string]$BuildDir    \r\n        )\r\n        Start-Transcript -Path \"$env:SystemRoot\\Logs\\ImageBuild\\VDOT.log\" -Force\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageEndpoint&client_id=$UserAssignedIdentityClientId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $ZIP = Join-Path -Path $BuildDir -ChildPath $BlobName\r\n        Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageEndpoint$ContainerName/$BlobName\" -OutFile $ZIP\r\n        Start-Sleep -Seconds 10\r\n        Unblock-File -Path $ZIP\r\n        $VDOTDir = Join-Path -Path $BuildDir -ChildPath 'VDOT'\r\n        Expand-Archive -LiteralPath $ZIP -DestinationPath $VDOTDir -Force\r\n        $Path = (Get-ChildItem -Path $VDOTDir -Recurse | Where-Object {$_.Name -eq \"Windows_VDOT.ps1\"}).FullName\r\n        $Script = Get-Content -Path $Path\r\n        $ScriptUpdate = $Script.Replace(\"Set-NetAdapterAdvancedProperty\",\"#Set-NetAdapterAdvancedProperty\")\r\n        $ScriptUpdate | Set-Content -Path $Path\r\n        & $Path -Optimizations @(\"AppxPackages\",\"Autologgers\",\"DefaultUserSettings\",\"LGPO\",\"NetworkOptimizations\",\"ScheduledTasks\",\"Services\",\"WindowsMediaPlayer\") -AdvancedOptimizations @(\"Edge\",\"RemoveLegacyIE\") -AcceptEULA\r\n        Write-Output \"Optimized the operating system using the Virtual Desktop Optimization Tool\"\r\n        Stop-Transcript\r\n      "
                },
                "timeoutInSeconds": 640
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('managementVmName'), 'restart-vm-2')]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('imageVmName'), 'remove-BuildDir')]",
              "location": "[parameters('location')]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "parameters": [
                  {
                    "name": "BuildDir",
                    "value": "[variables('buildDir')]"
                  }
                ],
                "source": {
                  "script": "        param(\r\n          [string]$BuildDir\r\n        )\r\n        Remove-Item -Path $BuildDir -Recurse -Force | Out-Null\r\n      "
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('managementVmName'), 'restart-vm-2')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'vdot')]"
              ]
            },
            {
              "condition": "[parameters('installVirtualDesktopOptimizationTool')]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('managementVmName'), 'restart-vm-3')]",
              "location": "[parameters('location')]",
              "properties": {
                "treatFailureAsDeploymentFailure": false,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "UserAssignedIdentityClientId",
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  {
                    "name": "ImageVmRg",
                    "value": "[split(resourceId('Microsoft.Compute/virtualMachines', parameters('imageVmName')), '/')[4]]"
                  },
                  {
                    "name": "ImageVmName",
                    "value": "[parameters('imageVmName')]"
                  },
                  {
                    "name": "Environment",
                    "value": "[parameters('cloud')]"
                  }
                ],
                "source": {
                  "script": "        param(\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$ImageVmRg,\r\n          [string]$ImageVmName,\r\n          [string]$Environment\r\n        )\r\n        # Connect to Azure\r\n        Connect-AzAccount -Identity -AccountId $UserAssignedIdentityClientId -Environment $Environment\r\n        Restart-AzVM -Name $imageVmName -ResourceGroupName $imageVmRg        \r\n        $lastProvisioningState = \"\"\r\n        $provisioningState = (Get-AzVM -resourcegroupname $imageVmRg -name $imageVmName -Status).Statuses[1].Code\r\n        $condition = ($provisioningState -eq \"PowerState/running\")\r\n        while (!$condition) {\r\n          if ($lastProvisioningState -ne $provisioningState) {\r\n            Write-Output $imageVmName \"under\" $imageVmRg \"is\" $provisioningState \"(waiting for state change)\"\r\n          }\r\n          $lastProvisioningState = $provisioningState      \r\n          Start-Sleep -Seconds 5\r\n          $provisioningState = (Get-AzVM -resourcegroupname $imageVmRg -name $imageVmName -Status).Statuses[1].Code\r\n        }\r\n        Write-Output $imageVmName \"under\" $imageVmRg \"is\" $provisioningState\r\n      "
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'remove-BuildDir')]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('imageVmName'), 'sysprep')]",
              "location": "[parameters('location')]",
              "properties": {
                "asyncExecution": false,
                "errorBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "errorBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}Sysprep-error-{1}.log', parameters('logBlobContainerUri'), parameters('timeStamp')))]",
                "outputBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "outputBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}Sysprep-output-{1}.log', parameters('logBlobContainerUri'), parameters('timeStamp')))]",
                "source": {
                  "script": "        $Services = 'RdAgent', 'WindowsTelemetryService', 'WindowsAzureGuestAgent'        \r\n        ForEach ($Service in $Services) {\r\n            If (Get-Service | Where-Object {$_.Name -eq $Service}) {\r\n                While ((Get-Service -Name $Service).Status -ne 'Running') {\r\n                    Write-Output \">>> Waiting for $Service to start...\"\r\n                    Start-Sleep -Seconds 5\r\n                }\r\n            }\r\n        }\r\n        $Files = \"$env:SystemRoot\\System32\\sysprep\\unattend.xml\", \"$env:SystemRoot\\Panther\\Unattend.xml\"\r\n        ForEach ($file in $Files) {\r\n            if (Test-Path -Path $File) {\r\n              Write-Output \">>> Removing $file\"\r\n              Remove-Item $file -Force\r\n            }\r\n        }\r\n        Write-Output '>>> Sysprepping VM ...'\r\n        Start-Process -FilePath \"C:\\Windows\\System32\\Sysprep\\Sysprep.exe\" -ArgumentList \"/generalize /oobe /quit /mode:vm\" -Wait\r\n        while($true) {\r\n            $imageState = (Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\State).ImageState\r\n            Write-Output $imageState\r\n            if ($imageState -eq 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { break }\r\n            Start-Sleep -s 5\r\n        }\r\n        Write-Output \">>> Sysprep complete ...\"\r\n      "
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'remove-BuildDir')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('managementVmName'), 'restart-vm-3')]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('imageBuildResourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-VM-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Logs-StorageAccount-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Management-VM-{1}', variables('depPrefix'), parameters('timeStamp')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}Generalize-VM-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "resourceGroup": "[variables('imageBuildResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cloud": {
            "value": "[variables('cloud')]"
          },
          "location": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location]"
          },
          "imageVmName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-VM-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.name.value]"
          },
          "managementVmName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Management-VM-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.name.value]"
          },
          "userAssignedIdentityClientId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('userAssignedIdentityResourceId'), '/'))), '2023-01-31').clientId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "6177526042216541158"
            }
          },
          "parameters": {
            "cloud": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "imageVmName": {
              "type": "string"
            },
            "managementVmName": {
              "type": "string"
            },
            "userAssignedIdentityClientId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('managementVmName'), 'generalize')]",
              "location": "[parameters('location')]",
              "properties": {
                "treatFailureAsDeploymentFailure": false,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "UserAssignedIdentityClientId",
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  {
                    "name": "ImageVmRg",
                    "value": "[split(resourceId('Microsoft.Compute/virtualMachines', parameters('imageVmName')), '/')[4]]"
                  },
                  {
                    "name": "ImageVmName",
                    "value": "[parameters('imageVmName')]"
                  },
                  {
                    "name": "Environment",
                    "value": "[parameters('cloud')]"
                  }
                ],
                "source": {
                  "script": "      param(\r\n        [string]$UserAssignedIdentityClientId,\r\n        [string]$ImageVmRg,\r\n        [string]$ImageVmName,\r\n        [string]$Environment\r\n        )\r\n        # Connect to Azure\r\n        Connect-AzAccount -Identity -AccountId $miClientId -Environment $Environment # Run on the virtual machine\r\n\r\n        Do {\r\n          Start-Sleep -seconds 5\r\n        } Until (Get-AzResource -ResourceType 'Microsoft.Compute/VirtualMachines')\r\n        \r\n        # Generalize VM Using PowerShell\r\n        Stop-AzVM -ResourceGroupName $imageVmRg -Name $imageVmName -Force\r\n        Set-AzVm -ResourceGroupName $imageVmRg -Name $imageVmName -Generalized\r\n\r\n        Write-Output \"Generalized\"\r\n      "
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Customize-Image-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-VM-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Management-VM-{1}', variables('depPrefix'), parameters('timeStamp')))]"
      ]
    },
    {
      "condition": "[empty(parameters('imageDefinitionResourceId'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}Gallery-Image-Definition-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "subscriptionId": "[split(parameters('computeGalleryResourceId'), '/')[2]]",
      "resourceGroup": "[split(parameters('computeGalleryResourceId'), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('deploymentLocation')]"
          },
          "galleryName": {
            "value": "[last(split(parameters('computeGalleryResourceId'), '/'))]"
          },
          "name": {
            "value": "[variables('galleryImageDefinitionName')]"
          },
          "hyperVGeneration": {
            "value": "[variables('galleryImageDefinitionHyperVGeneration')]"
          },
          "isHibernateSupported": {
            "value": "[parameters('imageDefinitionIsHibernateSupported')]"
          },
          "isAcceleratedNetworkSupported": {
            "value": "[parameters('imageDefinitionIsAcceleratedNetworkSupported')]"
          },
          "isHigherStoragePerformanceSupported": {
            "value": "[parameters('imageDefinitionIsHigherStoragePerformanceSupported')]"
          },
          "securityType": "[if(empty(parameters('imageDefinitionResourceId')), createObject('value', parameters('imageDefinitionSecurityType')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-Definition-Validation-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.value.value.securityType))]",
          "osType": {
            "value": "Windows"
          },
          "osState": {
            "value": "Generalized"
          },
          "publisher": {
            "value": "[variables('galleryImageDefinitionPublisher')]"
          },
          "offer": {
            "value": "[variables('galleryImageDefinitionOffer')]"
          },
          "sku": {
            "value": "[variables('galleryImageDefinitionSku')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "11797025253166267981"
            },
            "name": "Compute Galleries Image Definitions",
            "description": "This module deploys an Azure Compute Gallery Image Definition.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the image definition."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "galleryName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Conditional. The name of the parent Azure Shared Image Gallery. Required if the template is used in a standalone deployment."
              }
            },
            "architecture": {
              "type": "string",
              "defaultValue": "x64",
              "allowedValues": [
                "x64",
                "Arm64"
              ],
              "metadata": {
                "description": "Optional. The OS architecture of the image to be created. V1 images do not support Arm64."
              }
            },
            "osType": {
              "type": "string",
              "defaultValue": "Windows",
              "allowedValues": [
                "Windows",
                "Linux"
              ],
              "metadata": {
                "description": "Optional. OS type of the image to be created."
              }
            },
            "osState": {
              "type": "string",
              "defaultValue": "Generalized",
              "allowedValues": [
                "Generalized",
                "Specialized"
              ],
              "metadata": {
                "description": "Optional. This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'."
              }
            },
            "publisher": {
              "type": "string",
              "defaultValue": "MicrosoftWindowsServer",
              "metadata": {
                "description": "Optional. The name of the gallery Image Definition publisher."
              }
            },
            "offer": {
              "type": "string",
              "defaultValue": "WindowsServer",
              "metadata": {
                "description": "Optional. The name of the gallery Image Definition offer."
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "2019-Datacenter",
              "metadata": {
                "description": "Optional. The name of the gallery Image Definition SKU."
              }
            },
            "minRecommendedvCPUs": {
              "type": "int",
              "defaultValue": 1,
              "minValue": 1,
              "maxValue": 128,
              "metadata": {
                "description": "Optional. The minimum number of the CPU cores recommended for this image."
              }
            },
            "maxRecommendedvCPUs": {
              "type": "int",
              "defaultValue": 4,
              "minValue": 1,
              "maxValue": 128,
              "metadata": {
                "description": "Optional. The maximum number of the CPU cores recommended for this image."
              }
            },
            "minRecommendedMemory": {
              "type": "int",
              "defaultValue": 4,
              "minValue": 1,
              "maxValue": 4000,
              "metadata": {
                "description": "Optional. The minimum amount of RAM in GB recommended for this image."
              }
            },
            "maxRecommendedMemory": {
              "type": "int",
              "defaultValue": 16,
              "minValue": 1,
              "maxValue": 4000,
              "metadata": {
                "description": "Optional. The maximum amount of RAM in GB recommended for this image."
              }
            },
            "hyperVGeneration": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "V1",
                "V2"
              ],
              "metadata": {
                "description": "Optional. The hypervisor generation of the Virtual Machine.</p>- If this value is not specified, then it is determined by the securityType parameter.</p>- If the securityType parameter is specified, then the value of hyperVGeneration will be V2, else V1."
              }
            },
            "securityType": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Standard",
                "TrustedLaunch",
                "TrustedLaunchSupported",
                "ConfidentialVM",
                "ConfidentialVMSupported",
                "TrustedLaunchAndConfidentialVMSupported"
              ],
              "metadata": {
                "description": "Optional. The security type of the image. Requires a hyperVGeneration V2."
              }
            },
            "isHibernateSupported": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. The image will support hibernation."
              }
            },
            "isAcceleratedNetworkSupported": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. The image supports accelerated networking.</p>Accelerated networking enables single root I/O virtualization (SR-IOV) to a VM, greatly improving its networking performance.</p>This high-performance path bypasses the host from the data path, which reduces latency, jitter, and CPU utilization for the most demanding network workloads on supported VM types."
              }
            },
            "isHigherStoragePerformanceSupported": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. The image supports Higher Storage Performance with NVMe."
              }
            },
            "description": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The description of this gallery Image Definition resource. This property is updatable."
              }
            },
            "eula": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The Eula agreement for the gallery Image Definition. Has to be a valid URL."
              }
            },
            "privacyStatementUri": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The privacy statement uri. Has to be a valid URL."
              }
            },
            "releaseNoteUri": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The release note uri. Has to be a valid URL."
              }
            },
            "productName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The product ID."
              }
            },
            "planName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The plan ID."
              }
            },
            "planPublisherName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The publisher ID."
              }
            },
            "endOfLife": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The end of life date of the gallery Image Definition. This property can be used for decommissioning purposes. This property is updatable. Allowed format: 2020-01-10T23:00:00.000Z."
              }
            },
            "excludedDiskTypes": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of the excluded disk types. E.g. Standard_LRS."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags for all resources."
              }
            }
          },
          "variables": {
            "hibernateSupported": "[if(parameters('isHibernateSupported'), 'true', 'false')]",
            "acceleratedNetworkSupported": "[if(parameters('isAcceleratedNetworkSupported'), 'true', 'false')]",
            "diskControllerTypes": "[if(parameters('isHigherStoragePerformanceSupported'), createArray(createObject('name', 'DiskControllerTypes', 'value', 'SCSI, NVMe')), createArray())]",
            "gaFeatures": "[if(and(not(empty(parameters('securityType'))), not(equals(parameters('securityType'), 'Standard'))), createArray(createObject('name', 'SecurityType', 'value', parameters('securityType')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', variables('acceleratedNetworkSupported')), createObject('name', 'IsHibernateSupported', 'value', variables('hibernateSupported'))), createArray(createObject('name', 'IsAcceleratedNetworkSupported', 'value', variables('acceleratedNetworkSupported')), createObject('name', 'IsHibernateSupported', 'value', variables('hibernateSupported'))))]",
            "features": "[if(not(empty(variables('diskControllerTypes'))), union(variables('gaFeatures'), variables('diskControllerTypes')), variables('gaFeatures'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Compute/galleries/images",
              "apiVersion": "2022-03-03",
              "name": "[format('{0}/{1}', parameters('galleryName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "architecture": "[if(and(equals(parameters('architecture'), 'x64'), equals(parameters('hyperVGeneration'), 'V2')), parameters('architecture'), null())]",
                "osType": "[parameters('osType')]",
                "osState": "[parameters('osState')]",
                "identifier": {
                  "publisher": "[parameters('publisher')]",
                  "offer": "[parameters('offer')]",
                  "sku": "[parameters('sku')]"
                },
                "recommended": {
                  "vCPUs": {
                    "min": "[parameters('minRecommendedvCPUs')]",
                    "max": "[parameters('maxRecommendedvCPUs')]"
                  },
                  "memory": {
                    "min": "[parameters('minRecommendedMemory')]",
                    "max": "[parameters('maxRecommendedMemory')]"
                  }
                },
                "hyperVGeneration": "[if(not(empty(parameters('hyperVGeneration'))), parameters('hyperVGeneration'), if(not(empty(parameters('securityType'))), 'V2', 'V1'))]",
                "features": "[variables('features')]",
                "description": "[parameters('description')]",
                "eula": "[if(not(empty(parameters('eula'))), parameters('eula'), null())]",
                "privacyStatementUri": "[parameters('privacyStatementUri')]",
                "releaseNoteUri": "[parameters('releaseNoteUri')]",
                "purchasePlan": {
                  "product": "[if(not(empty(parameters('productName'))), parameters('productName'), null())]",
                  "name": "[if(not(empty(parameters('planName'))), parameters('planName'), null())]",
                  "publisher": "[if(not(empty(parameters('planPublisherName'))), parameters('planPublisherName'), null())]"
                },
                "endOfLifeDate": "[parameters('endOfLife')]",
                "disallowed": {
                  "diskTypes": "[parameters('excludedDiskTypes')]"
                }
              },
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the image was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the image."
              },
              "value": "[resourceId('Microsoft.Compute/galleries/images', parameters('galleryName'), parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the image."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference(resourceId('Microsoft.Compute/galleries/images', parameters('galleryName'), parameters('name')), '2022-03-03', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-Definition-Validation-{1}', variables('depPrefix'), parameters('timeStamp')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}Get-ImageVersion-Source-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "resourceGroup": "[variables('imageBuildResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "ArtifactsLocation": {
            "value": "[format('{0}{1}/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountResourceId'), '/')[2], split(parameters('storageAccountResourceId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountResourceId'), '/'))), '2022-09-01').primaryEndpoints.blob, parameters('containerName'))]"
          },
          "ExecuteScript": {
            "value": "Get-ImageVersionSource.ps1"
          },
          "Parameters": "[if(not(empty(parameters('imageDefinitionResourceId'))), createObject('value', format('{0} -ImageDefinitionResourceId \"{1}\" -VmName {2} -ResourceGroupName {3} -Location {4}', format('-environment {0} -subscription {1} -tenant {2} -userAssignedIdentityClientId {3}', variables('cloud'), variables('subscriptionId'), variables('tenantId'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('userAssignedIdentityResourceId'), '/'))), '2023-01-31').clientId), parameters('imageDefinitionResourceId'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-VM-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.name.value, variables('imageBuildResourceGroupName'), parameters('deploymentLocation'))), createObject('value', format('{0} -ImageDefinitionResourceId \"{1}\" -VmName {2} -ResourceGroupName {3} -Location {4}', format('-environment {0} -subscription {1} -tenant {2} -userAssignedIdentityClientId {3}', variables('cloud'), variables('subscriptionId'), variables('tenantId'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('userAssignedIdentityResourceId'), '/'))), '2023-01-31').clientId), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('computeGalleryResourceId'), '/')[2], split(parameters('computeGalleryResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('{0}Gallery-Image-Definition-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-VM-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.name.value, variables('imageBuildResourceGroupName'), parameters('deploymentLocation'))))]",
          "Files": {
            "value": [
              "Get-ImageVersionSource.ps1"
            ]
          },
          "Location": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location]"
          },
          "Output": {
            "value": true
          },
          "Tags": {
            "value": "[parameters('tags')]"
          },
          "UserAssignedIdentityClientId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('userAssignedIdentityResourceId'), '/'))), '2023-01-31').clientId]"
          },
          "VirtualMachineName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Management-VM-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "10024048130203563067"
            }
          },
          "parameters": {
            "ArtifactsLocation": {
              "type": "string"
            },
            "Files": {
              "type": "array"
            },
            "ExecuteScript": {
              "type": "string",
              "defaultValue": ""
            },
            "Location": {
              "type": "string"
            },
            "Output": {
              "type": "bool",
              "defaultValue": false
            },
            "Parameters": {
              "type": "string",
              "defaultValue": ""
            },
            "Tags": {
              "type": "object"
            },
            "Timestamp": {
              "type": "string",
              "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
            },
            "UserAssignedIdentityClientId": {
              "type": "string"
            },
            "VirtualMachineName": {
              "type": "string"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "FileUris",
                "count": "[length(variables('FileNames'))]",
                "input": "[format('{0}{1}', parameters('ArtifactsLocation'), variables('FileNames')[copyIndex('FileUris')])]"
              }
            ],
            "CSEMasterScript": "cse_master_script.ps1",
            "ScriptToExecute": "[if(not(empty(parameters('ExecuteScript'))), parameters('ExecuteScript'), variables('CSEMasterScript'))]",
            "CommandToExecute": "[if(empty(parameters('Parameters')), format('powershell -ExecutionPolicy Unrestricted -command .\\{0}', variables('ScriptToExecute')), format('powershell -ExecutionPolicy Unrestricted -command .\\{0} {1}', variables('ScriptToExecute'), parameters('Parameters')))]",
            "FileNames": "[if(not(empty(parameters('ExecuteScript'))), union(createArray(format('{0}', parameters('ExecuteScript'))), parameters('Files')), union(createArray(format('{0}', variables('CSEMasterScript'))), parameters('Files')))]",
            "DefOutputValue": {
              "TimeStamp": "[parameters('Timestamp')]",
              "Files": "[variables('FileNames')]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('VirtualMachineName'), 'CustomScriptExtension')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.10",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "timestamp": "[parameters('Timestamp')]",
                  "fileUris": "[variables('FileUris')]"
                },
                "protectedSettings": "[if(contains(parameters('ArtifactsLocation'), environment().suffixes.storage), createObject('commandToExecute', variables('CommandToExecute'), 'managedIdentity', createObject('clientId', parameters('UserAssignedIdentityClientId'))), createObject('commandToExecute', variables('CommandToExecute')))]"
              }
            }
          ],
          "outputs": {
            "value": {
              "type": "object",
              "value": "[if(parameters('Output'), json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('VirtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message), json(string(variables('DefOutputValue'))))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Generalize-VM-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('imageBuildResourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('computeGalleryResourceId'), '/')[2], split(parameters('computeGalleryResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('{0}Gallery-Image-Definition-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-VM-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Management-VM-{1}', variables('depPrefix'), parameters('timeStamp')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}ImageVersion-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "subscriptionId": "[split(parameters('computeGalleryResourceId'), '/')[2]]",
      "resourceGroup": "[split(parameters('computeGalleryResourceId'), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('deploymentLocation')]"
          },
          "name": {
            "value": "[variables('imageVersionName')]"
          },
          "galleryName": {
            "value": "[last(split(parameters('computeGalleryResourceId'), '/'))]"
          },
          "imageName": "[if(not(empty(parameters('imageDefinitionResourceId'))), createObject('value', last(split(parameters('imageDefinitionResourceId'), '/'))), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('computeGalleryResourceId'), '/')[2], split(parameters('computeGalleryResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('{0}Gallery-Image-Definition-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.name.value))]",
          "endOfLifeDate": {
            "value": "[variables('imageVersionEndOfLifeDate')]"
          },
          "excludeFromLatest": {
            "value": "[parameters('imageVersionExcludeFromLatest')]"
          },
          "replicaCount": {
            "value": "[parameters('imageVersionDefaultReplicaCount')]"
          },
          "storageAccountType": {
            "value": "[parameters('imageVersionDefaultStorageAccountType')]"
          },
          "sourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Get-ImageVersion-Source-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.value.value.sourceId]"
          },
          "targetRegions": {
            "value": "[variables('imageVersionReplicationRegions')]"
          },
          "tags": {
            "value": {}
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "18074787650811954517"
            },
            "name": "Compute Galleries Image Version",
            "description": "This module deploys an Azure Compute Gallery Image Definition Version",
            "author": "shawn.meyer@microsoft.com"
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the image version."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "imageName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Conditional. The name of the parent Azure Shared Image Gallery Image Definition. Required if the template is used in a standalone deployment."
              }
            },
            "galleryName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Conditional. The name of the Azure Compute gallery that contains the Image Definition for which this version will be created."
              }
            },
            "endOfLifeDate": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The end of life date as a string."
              }
            },
            "excludeFromLatest": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If set to true, Virtual Machines deployed from the latest version of the Image Definition will not use this Image Version."
              }
            },
            "replicaCount": {
              "type": "int",
              "metadata": {
                "description": "Optional. The number of replicas of the Image Version to be created per region.\r\nThis property would take effect for a region when regionalReplicaCount is not specified. This property is updatable."
              }
            },
            "replicationMode": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "Full",
                "Shallow"
              ],
              "metadata": {
                "description": "Optional. Optional parameter which specifies the mode to be used for replication. This property is not updatable."
              }
            },
            "storageAccountType": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "allowedValues": [
                "Premium_LRS",
                "Standard_LRS",
                "Standard_ZRS"
              ],
              "metadata": {
                "description": "Optional. Specifies the storage account type to be used to store the image. This property is not updatable."
              }
            },
            "targetRegions": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The target regions where the Image Version is going to be replicated to.\r\nIf this object is not specified, then the deployment location will be used."
              }
            },
            "diskEncryptionSetId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. A relative URI containing the resource ID of the disk encryption set."
              }
            },
            "confidentialVMEncryptionType": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "EncryptedVMGuestStateOnlyWithPmk",
                "EncryptedWithCmk",
                "EncryptedWithPmk"
              ],
              "metadata": {
                "description": "Optional. Confidential VM encryption types"
              }
            },
            "secureVMDiskEncryptionSetId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Secure VM disk encryption set id."
              }
            },
            "allowDeletionOfReplicatedLocations": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates whether or not removing this Gallery Image Version from replicated regions is allowed."
              }
            },
            "hostCaching": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "None",
                "ReadOnly",
                "ReadWrite"
              ],
              "metadata": {
                "description": "Optional. The host caching of the disk."
              }
            },
            "osDiskImageSourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The id of the gallery artifact version source. Can specify a disk uri, snapshot uri, user image or storage account resource."
              }
            },
            "osDiskImageSourceUri": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The uri of the gallery artifact version source. Currently used to specify vhd/blob source."
              }
            },
            "sourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The id of the gallery artifact version source. Can specify a disk uri, snapshot uri, user image or storage account resource."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags for all resources."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "regionMatchArray",
                "count": "[length(parameters('targetRegions'))]",
                "input": "[if(equals(parameters('targetRegions')[copyIndex('regionMatchArray')].name, parameters('location')), true(), false())]"
              }
            ],
            "sourceStorageProfile": "[if(not(empty(parameters('sourceId'))), createObject('id', parameters('sourceId')), createObject())]",
            "osDiskImageStorageProfile": "[if(or(not(empty(parameters('osDiskImageSourceId'))), not(empty(parameters('osDiskImageSourceUri')))), createObject('hostCaching', parameters('hostCaching'), 'source', createObject('id', if(not(empty(parameters('osDiskImageSourceId'))), parameters('osDiskImageSourceId'), null()), 'uri', if(not(empty(parameters('osDiskImageSourceUri'))), parameters('osDiskImageSourceUri'), null()))), createObject())]",
            "targetRegionDefault": [
              {
                "encryption": "[if(not(empty(parameters('diskEncryptionSetId'))), createObject('osDiskImage', createObject('diskEncryptionSetId', parameters('diskEncryptionSetId'), 'securityProfile', createObject('confidentialVMEncryptionType', if(not(empty(parameters('confidentialVMEncryptionType'))), parameters('confidentialVMEncryptionType'), null()), 'secureVMDiskEncryptionSetId', if(not(empty(parameters('secureVMDiskEncryptionSetId'))), parameters('secureVMDiskEncryptionSetId'), null())))), null())]",
                "name": "[parameters('location')]",
                "storageAccountType": "[parameters('storageAccountType')]"
              }
            ],
            "targetRegionsContainsLocation": "[if(contains(variables('regionMatchArray'), true()), true(), false())]",
            "targetRegionsVar": "[if(not(empty(parameters('targetRegions'))), if(variables('targetRegionsContainsLocation'), parameters('targetRegions'), union(parameters('targetRegions'), variables('targetRegionDefault'))), variables('targetRegionDefault'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Compute/galleries/images/versions",
              "apiVersion": "2022-03-03",
              "name": "[format('{0}/{1}/{2}', parameters('galleryName'), parameters('imageName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "publishingProfile": {
                  "endOfLifeDate": "[if(not(empty(parameters('endOfLifeDate'))), parameters('endOfLifeDate'), null())]",
                  "excludeFromLatest": "[parameters('excludeFromLatest')]",
                  "replicaCount": "[parameters('replicaCount')]",
                  "replicationMode": "[if(not(empty(parameters('replicationMode'))), parameters('replicationMode'), null())]",
                  "storageAccountType": "[parameters('storageAccountType')]",
                  "targetRegions": "[variables('targetRegionsVar')]"
                },
                "safetyProfile": {
                  "allowDeletionOfReplicatedLocations": "[parameters('allowDeletionOfReplicatedLocations')]"
                },
                "storageProfile": {
                  "osDiskImage": "[variables('osDiskImageStorageProfile')]",
                  "source": "[variables('sourceStorageProfile')]"
                }
              },
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the image was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the image version."
              },
              "value": "[resourceId('Microsoft.Compute/galleries/images/versions', parameters('galleryName'), parameters('imageName'), parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the image version."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference(resourceId('Microsoft.Compute/galleries/images/versions', parameters('galleryName'), parameters('imageName'), parameters('name')), '2022-03-03', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Get-ImageVersion-Source-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('computeGalleryResourceId'), '/')[2], split(parameters('computeGalleryResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('{0}Gallery-Image-Definition-{1}', variables('depPrefix'), parameters('timeStamp')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}Remove-Build-Resources-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "resourceGroup": "[variables('imageBuildResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cloud": {
            "value": "[variables('cloud')]"
          },
          "location": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location]"
          },
          "imageResourceId": "[if(contains(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Get-ImageVersion-Source-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.value.value.sourceId, 'Microsoft.Compute/images'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Get-ImageVersion-Source-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.value.value.sourceId), createObject('value', ''))]",
          "imageVmName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-VM-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.name.value]"
          },
          "managementVmName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Management-VM-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.name.value]"
          },
          "userAssignedIdentityClientId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('userAssignedIdentityResourceId'), '/'))), '2023-01-31').clientId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "3459257614969850922"
            }
          },
          "parameters": {
            "cloud": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "imageVmName": {
              "type": "string"
            },
            "managementVmName": {
              "type": "string"
            },
            "imageResourceId": {
              "type": "string"
            },
            "userAssignedIdentityClientId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('managementVmName'), 'removeVm')]",
              "location": "[parameters('location')]",
              "properties": {
                "treatFailureAsDeploymentFailure": false,
                "asyncExecution": true,
                "parameters": [
                  {
                    "name": "UserAssignedIdentityClientId",
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  {
                    "name": "ResourceGroupName",
                    "value": "[split(resourceId('Microsoft.Compute/virtualMachines', parameters('managementVmName')), '/')[4]]"
                  },
                  {
                    "name": "imageVmName",
                    "value": "[parameters('imageVmName')]"
                  },
                  {
                    "name": "managementVmName",
                    "value": "[parameters('managementVmName')]"
                  },
                  {
                    "name": "imageName",
                    "value": "[last(split(parameters('imageResourceId'), '/'))]"
                  },
                  {
                    "name": "Environment",
                    "value": "[parameters('cloud')]"
                  }
                ],
                "source": {
                  "script": "        param(\r\n          [string]$Environment,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$imageName,\r\n          [string]$imageVmName,\r\n          [string]$managementVmName,\r\n          [string]$ResourceGroupName\r\n        )\r\n        # Connect to Azure\r\n        Connect-AzAccount -Identity -AccountId $UserAssignedIdentityClientId -Environment $Environment # Run on the virtual machine\r\n        # Remove Image VM and Management VM\r\n        If ($imageName -ne '') {\r\n          Remove-AzImage -Name $imageName -ResourceGroupName $ResourceGroupName -Force\r\n        }\r\n        Remove-AzVM -Name $imageVmName -ResourceGroupName $ResourceGroupName -ForceDeletion $true -Force\r\n        Remove-AzVM -Name $managementVmName -ResourceGroupName $ResourceGroupName -NoWait -ForceDeletion $true -Force -AsJob\r\n      "
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Get-ImageVersion-Source-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('computeGalleryResourceId'), '/')[2], split(parameters('computeGalleryResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('{0}ImageVersion-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-VM-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Management-VM-{1}', variables('depPrefix'), parameters('timeStamp')))]"
      ]
    }
  ]
}